<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"                    
 xmlns:igWindows="http://infragistics.com/Windows"
xmlns:igDP="http://schemas.infragistics.com/xaml/wpf"
xmlns:Custom="http://infragistics.com/DataPresenter"
xmlns:Custom1="http://infragistics.com/Windows"               
xmlns:themes="http://infragistics.com/Themes"
xmlns:prim="http://schemas.infragistics.com/xaml/primitives"                  
xmlns:editors="http://infragistics.com/Editors"               
                    xmlns:arm="ARMVisual"
	xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
xmlns:visualCompHelpers="clr-namespace:Proryv.AskueARM2.Both.VisualCompHelpers;assembly=ElectroARM_Client_Visual_ComponentsHelpers" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:interop="clr-namespace:System.Windows.Interop;assembly=PresentationFramework"
                    mc:Ignorable="d"
 x:Class="Proryv.AskueARM2.Client.Styles.Style.IgXamGrid" 
xmlns:System="clr-namespace:System;assembly=mscorlib"
 >

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/BrushResource.xaml"/>
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/SimpleScrollBar.xaml"/>
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/DrawingBrushResource.xaml"/>
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/NewDrawingBrushResource.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!-- _________________________ Brush заменены______________________________________ -->



    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterStrokeBrush}" Color="{StaticResource BaseDarkGrayColor}" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterVerticalFillBrush}" Color="{StaticResource BaseDarkGrayColor}" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterHorizontalFillBrush}" Color="{StaticResource BaseDarkGrayColor}" PresentationOptions:Freeze="true" />
  
    
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type Custom:XamDataGrid}, GroupByNavBackground}" Color="#FFBED6E9"/>
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type Custom:XamDataGrid}, GroupByNavBackgroundHover}" Color="{StaticResource BaseDarkGrayColor}"/>
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type Custom:XamDataGrid}, GroupByNavBorderBrush}" Color="{StaticResource BaseDarkGrayColor}" PresentationOptions:Freeze="true" />


    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelBackground}" Color="{StaticResource BaseLightControlBackgroundColor}" PresentationOptions:Freeze="true" />
    <SolidColorBrush  x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelHighlight}" Color="{StaticResource BaseLightGrayColor}"/>
    <SolidColorBrush  x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelHighlight2}" Color="{StaticResource BaseLightGrayColor}"/>



    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, CardBackground}" Color="{StaticResource BaseLightControlBackgroundColor}" PresentationOptions:Freeze="true" />

    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelInnerBorder}" Color="Transparent" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelOuterBorder}" Color="{StaticResource BaseDarkGrayColor}" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelForeground}" Color="{StaticResource IconBlueColor}" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, NestedContentBackgroundBorder}" Color="#00102975" PresentationOptions:Freeze="true" />

    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, AddRowBackground}" Color="{StaticResource BaseLightControlBackgroundColor}" PresentationOptions:Freeze="true" />

    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type Custom:XamDataGrid}, SummaryRecordPresenterBackground}" Color="{StaticResource BaseLightGrayColor}"/>
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryRecordPresenterBorder}" Color="#fff4f4f4" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonPopupBorder}" Color="{StaticResource BaseDarkGrayColor}" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackground}" Color="#B2779CC1" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBorder}" Color="{StaticResource BaseDarkGrayColor}" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonPopupInnerBackground}" Color="{StaticResource BaseDarkGrayColor}" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonPopupBackground}" Color="#FFF0F0F0" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCSCItemForeground}" Color="Black" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.SummaryCSCItemForegroundKey}" Color="Black" themes:ResourceWasher.WashGroup="ThemeColor" PresentationOptions:Freeze="true" />

    <SolidColorBrush x:Key="{x:Static Custom:DataPresenterBrushKeys.GroupByAreaMultiHighlightBrush}" Color="Transparent"/>
    <SolidColorBrush x:Key="{x:Static Custom:DataPresenterBrushKeys.LabelPresenterFooterBorderBrushKey}" Color="{StaticResource BaseDarkGrayColor}"/>
    <SolidColorBrush x:Key="{x:Static Custom:DataPresenterBrushKeys.LabelPresenterFooterEndBrushKey}" Color="{StaticResource BaseDarkGrayColor}"/>
    <SolidColorBrush x:Key="{x:Static Custom:DataPresenterBrushKeys.LabelPresenterFooterMid}" Color="{StaticResource BaseDarkGrayColor}"/>




    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, CheckBoxNormalOuterBoxCenterFill}" Color="#FFF4F4F4" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, CheckBoxNormalOuterBoxBorderFill}" Color="#FF8E8F8F" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, CheckBoxHoverOuterBoxBorderFill}" Color="#FF5586A3" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, CheckBoxHoverOuterBoxCenterFill}" Color="#FFDEF9FA" PresentationOptions:Freeze="true" />
    <CornerRadius x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelCornerRadius}">0,0,0,0</CornerRadius>

   
    <LinearGradientBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, CarouselItemExpansionIndicator}" EndPoint="0,1" StartPoint="0,0" PresentationOptions:Freeze="true" >
        <GradientStop Offset="0.01" Color="#FFE3F7FF"/>
        <GradientStop Offset="0.18" Color="#FFE3F7FF"/>
        <GradientStop Offset="1.000000" Color="#FFB7E7FB"/>
    </LinearGradientBrush>
   
    <LinearGradientBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonForeground}" StartPoint="0,0" EndPoint="1,0" PresentationOptions:Freeze="true" >
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FF3c596c" Offset="0"/>
                <GradientStop Color="#FF3C596C" Offset="0.9944444298744202"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonBackgroundHover}" EndPoint="0.5,1" StartPoint="0.5,0" PresentationOptions:Freeze="true" >
        <GradientStop Offset="0.000000" Color="#FFCDF2FF"/>
        <GradientStop Offset="0.350000" Color="#FFCDF2FF"/>
        <GradientStop Offset="0.350000" Color="#FF8CE0FF"/>
        <GradientStop Offset="1.000000" Color="#FF88D9FB"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackgroundHover}" EndPoint="0.5,1" StartPoint="0.5,0" PresentationOptions:Freeze="true" >
        <GradientStop Offset="0.000000" Color="#FFCDF2FF"/>
        <GradientStop Offset="1.000000" Color="#FF88DAFB"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, GroupByAreaBackground}" EndPoint="0.704,0.8" StartPoint="-0.089,-0.636" PresentationOptions:Freeze="true" >
        <GradientStop Color="#FFF2FBFE" Offset="0"/>
        <GradientStop Color="#FFA6C6E1" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, CheckBoxNormalInnerBoxCenterFill}" EndPoint="0.854,0.854" StartPoint="0.146,0.146" PresentationOptions:Freeze="true" >
        <GradientStop Color="#FFCACFD5" Offset="0"/>
        <GradientStop Color="#FFF6F6F6" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, CheckBoxNormalInnerBoxBorderFill}" EndPoint="0.854,0.854" StartPoint="0.146,0.146" PresentationOptions:Freeze="true" >
        <GradientStop Color="#FFAEB3B9" Offset="0"/>
        <GradientStop Color="#FFE9E9EA" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, CheckBoxHoverInnerBoxBorderFill}" EndPoint="0.854,0.854" StartPoint="0.146,0.146" PresentationOptions:Freeze="true" >
        <GradientStop Color="#FF79C6F9" Offset="0"/>
        <GradientStop Color="#FFCFECFD" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, CheckBoxHoverInnerBoxCenterFill}" EndPoint="0.854,0.854" StartPoint="0.146,0.146" PresentationOptions:Freeze="true" >
        <GradientStop Color="#FFB1DFFD" Offset="0"/>
        <GradientStop Color="#FFE7F7FE" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, CheckBoxPressedInnerBoxBorderFill}" EndPoint="0.854,0.854" StartPoint="0.146,0.146" PresentationOptions:Freeze="true" >
        <GradientStop Color="#FF79C6F9" Offset="0"/>
        <GradientStop Color="#FFCFECFD" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, CheckBoxPressedInnerBoxCenterFill}" EndPoint="0.854,0.854" StartPoint="0.146,0.146" PresentationOptions:Freeze="true" >
        <GradientStop Color="#FFB1DFFD" Offset="0"/>
        <GradientStop Color="#FFE7F7FE" Offset="1"/>
    </LinearGradientBrush>


    <!-- Brushes used for menu controls -->
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.MenuHighlightOuterBorderBrushFillKey}" Color="#FFAECDF9" PresentationOptions:Freeze="true" />
    <LinearGradientBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.MenuHighlightBackgroundBrushFillKey}" EndPoint="0,1" StartPoint="0,0" PresentationOptions:Freeze="true" >
        <GradientStop Offset="0" Color="#FFD3F5FF"/>
        <GradientStop Offset="1" Color="#FFB9D8FF"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.MenuHighlightTextBrushFillKey}" Color="#FF151C55" PresentationOptions:Freeze="true" />



    <!-- Brushes For CustomFilterSelectionControl -->
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ButtonNormalOuterBorderBrush}" Color="#FF707070" PresentationOptions:Freeze="true" />
    <LinearGradientBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ButtonNormalInnerBorderBrush}" EndPoint="0.5,1" StartPoint="0.5,0" PresentationOptions:Freeze="true" >
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFfcfcfc" Offset="0"/>
                <GradientStop Color="#FFfafafa" Offset="0.5"/>
                <GradientStop Color="#FFf6f6f6" Offset="0.5009999871253967"/>
                <GradientStop Color="#FFf3f3f3" Offset="1"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ButtonNormalCenterBrush}" EndPoint="0.5,1" StartPoint="0.5,0" PresentationOptions:Freeze="true" >
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFf2f2f2" Offset="0"/>
                <GradientStop Color="#FFebebeb" Offset="0.5"/>
                <GradientStop Color="#FFdddddd" Offset="0.5009999871253967"/>
                <GradientStop Color="#FFcfcfcf" Offset="1"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ButtonHoverOuterBorderBrush}" Color="yellow" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ButtonHoverInnerBorderBrush}" Color="green" PresentationOptions:Freeze="true" />
    <LinearGradientBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ButtonHoverCenterBrush}" EndPoint="0.5,1" StartPoint="0.5,0" PresentationOptions:Freeze="true" >
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFeaf6fd" Offset="0"/>
                <GradientStop Color="#FFd9f0fc" Offset="0.5"/>
                <GradientStop Color="#FFbee6fd" Offset="0.5009999871253967"/>
                <GradientStop Color="#FFa7d9f5" Offset="1"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ButtonPressedOuterBorderBrush}" Color="#FF2C628B" PresentationOptions:Freeze="true" />
    <LinearGradientBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ButtonPressedInnerBorderBrush}" EndPoint="0.5,1" StartPoint="0.5,0" PresentationOptions:Freeze="true" >
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FF9eb0ba" Offset="0"/>
                <GradientStop Color="#FF9abacb" Offset="0.5"/>
                <GradientStop Color="#FF78aac5" Offset="0.5008999705314636"/>
                <GradientStop Color="#FF5a96b8" Offset="0.8999999761581421"/>
                <GradientStop Color="#FF68b2da" Offset="1"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ButtonPressedCenterBrush}" EndPoint="0.5,1" StartPoint="0.5,0" PresentationOptions:Freeze="true" >
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFe5f4fc" Offset="0"/>
                <GradientStop Color="#FFc4e5f6" Offset="0.5"/>
                <GradientStop Color="#FF98d1ef" Offset="0.5009999871253967"/>
                <GradientStop Color="#FF68b3db" Offset="1"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ButtonDisabledOuterBorderBrush}" Color="#FFADB2B5" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ButtonDisabledInnerBorderBrush}" Color="#FFFCFCFC" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ButtonDisabledCenterBrush}" Color="#FFF4F4F4" PresentationOptions:Freeze="true" />

    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.CustomFilterControlTextblockBrush}" Color="#FF000000" PresentationOptions:Freeze="true" />

    <LinearGradientBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.CustomFilterControlHeaderBrush}" EndPoint="0.5,1" StartPoint="0.5,0" PresentationOptions:Freeze="true">
        <GradientStop Color="#FFffffff" Offset="0"/>
        <GradientStop Color="#FFffffff" Offset="0.3490000069141388"/>
        <GradientStop Color="#FFf9f9fb" Offset="0.3499999940395355"/>
        <GradientStop Color="#FFf1f2f4" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.CustomFilterControlToolbarBrush}" EndPoint="0.5,1" StartPoint="0.5,0" PresentationOptions:Freeze="true" >
        <GradientStop Color="#FFf4f4f4" Offset="0.02"/>
        <GradientStop Color="#FFe5e9ec" Offset="0"/>
        <GradientStop Color="#FFbec8d2" Offset="0.48"/>
        <GradientStop Color="#FFb2bdc9" Offset="0.49"/>
        <GradientStop Color="#FFced5dc" Offset="1"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.AndLogicalOperatorBrush}" Color="#FF94A3B1" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.OrLogicalOperatorBrush}" Color="#FFB3E3FB" PresentationOptions:Freeze="true" />

    <!-- Brushes for FixedFields Splitter -->

    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterHottrackStrokeBrush}" Color="{StaticResource BaseDarkGrayColor}" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterVerticalHottrackFillBrush}" Color="{StaticResource BaseDarkGrayColor}" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterHorizontalHottrackFillBrush}" Color="{StaticResource BaseDarkGrayColor}" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperDarkLineBrush}" Color="{StaticResource BaseDarkGrayColor}" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperLightLineBrush}" Color="#FFFFFFFF" PresentationOptions:Freeze="true" />
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, DisabledBackgroundBrush}" Color="#F4F4F4" />
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, DisabledBorderBrush}" Color="#ADB2B5" />

    <!--
	These 2 VisualBrushes are empty. Only Luna brush dictionaries have useful VisualBrushes.
	These are placed here to pass a unit test -->
    <DrawingBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.FFSplitterVerticalTileBrushKey}" PresentationOptions:Freeze="true"/>
    <DrawingBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.FFSplitterHorizontalTileBrushKey}" PresentationOptions:Freeze="true"/>

    <LinearGradientBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.GroupByAreaMultiBackgroundBrush}" EndPoint="0,1" StartPoint="0,0" PresentationOptions:Freeze="true" >
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0" Color="#FF095175"/>
                <GradientStop Offset="0.5" Color="#FF095175"/>
                <GradientStop Offset="0.699" Color="#FF14587a"/>
                <GradientStop Offset="0.819" Color="#FF256585"/>
                <GradientStop Offset="0.970" Color="#FF4d95aa"/>
                <GradientStop Offset="1" Color="#FF4d95aa"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ConnectorLinePenBrush}" Color="#FFFFFFFF" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.FieldLayoutForeground}" Color="#FFFFFFFF" PresentationOptions:Freeze="true" />
    <!-- JJD 4/27/11
        Moved Pen up to ...Brushes.xaml files to fix regression issue introduced by fix
        to TFS7339 where using this in a StaticReference caused an exception to be raised
        when used from multiple threads -->
    <Pen x:Key="{x:Static igDP:DataPresenterBrushKeys.ConnectorLinePen}" 
         x:Shared="false"
         Brush="{StaticResource {x:Static igDP:DataPresenterBrushKeys.ConnectorLinePenBrush}}" 
         Thickness="3" 
         DashStyle="{x:Static DashStyles.Dot}" 
         DashCap="Round" 
         StartLineCap="Round" 
         EndLineCap="Round" 
         LineJoin="Round"
         PresentationOptions:Freeze="true" />

    <!-- iDataErrorInfo Brush Keys -->
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.DataErrorHighlightBackgroundBrushKey}" Color="#FFFFECE6" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.DataErrorHighlightBorderBrushKey}" Color="#FF944E4E" PresentationOptions:Freeze="true" />
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.DataErrorIconForegroundBrushKey}" Color="#FF944E4E" PresentationOptions:Freeze="true" />

    <!-- For FixedRecordButton glyph/icon -->
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.FixedRecordGlyphBrush}" Color="#FF000000" PresentationOptions:Freeze="true" />


    <!-- For When a LabelPresenter is being Dragged with Fieldchooser control-->
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.FieldChooserDragBorderBrushKey}" Color="#FF99DEFD" PresentationOptions:Freeze="true" />


    <!-- =================================================== CardView Brushes =================================================== -->
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.CollapseCardGlyphNormalBrushKey}" Color="#FFFFFFFF" PresentationOptions:Freeze="true"  themes:ResourceWasher.WashGroup="ThemeColor"/>
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.CollapseCardGlyphPressedBrushKey}" Color="#FFFFFFFF" PresentationOptions:Freeze="true"  themes:ResourceWasher.WashGroup="HoverColor"/>
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.CollapseCardGlyphActiveBrushKey}" Color="#FFFFFFFF" PresentationOptions:Freeze="true"  themes:ResourceWasher.WashGroup="ActiveColor"/>

    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.CollapseCellGlyphCheckedStrokeBrushKey}" Color="#FFFFFFFF" PresentationOptions:Freeze="true"  themes:ResourceWasher.WashGroup="ThemeColor"/>
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.CollapseCellGlyphCheckedBackgroundBrushKey}" Color="#66FFFFFF" PresentationOptions:Freeze="true"  themes:ResourceWasher.WashGroup="ThemeColor"/>

    <LinearGradientBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardButtonBackgroundHottrackBrushKey}" StartPoint="0,0" EndPoint="0,1" PresentationOptions:Freeze="true" themes:ResourceWasher.WashGroup="HoverColor">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0" Color="#FFd6ebfa"/>
                <GradientStop Offset="0.07" Color="#FFd6ebfa"/>
                <GradientStop Offset="0.10" Color="#FFaad5f3"/>
                <GradientStop Offset="0.40" Color="#FF7dbee9"/>
                <GradientStop Offset="0.40" Color="#FF2d73a3"/>
                <GradientStop Offset="0.53" Color="#FF2c7baf"/>
                <GradientStop Offset="0.80" Color="#FF24c6eb"/>
                <GradientStop Offset="0.85" Color="#FF85eff9"/>
                <GradientStop Offset="1" Color="#FF85eff9"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardButtonBorderHottrackBrushKey}" Color="#FF515e6c" PresentationOptions:Freeze="true"  themes:ResourceWasher.WashGroup="HoverColor"/>
    <LinearGradientBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardButtonBackgroundPressedBrushKey}" StartPoint="0,0" EndPoint="0,1" PresentationOptions:Freeze="true" themes:ResourceWasher.WashGroup="HoverColor">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0" Color="#FFacbec9"/>
                <GradientStop Offset="0.07" Color="#FFacbec9"/>
                <GradientStop Offset="0.10" Color="#FF7f9aac"/>
                <GradientStop Offset="0.40" Color="#FF5a748a"/>
                <GradientStop Offset="0.40" Color="#FF203b52"/>
                <GradientStop Offset="0.53" Color="#FF1f445b"/>
                <GradientStop Offset="0.80" Color="#FF27c9c8"/>
                <GradientStop Offset="0.85" Color="#FF67e6e4"/>
                <GradientStop Offset="1" Color="#FF67e6e4"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardButtonBorderPressedBrushKey}" Color="#FF515e6c" PresentationOptions:Freeze="true"  themes:ResourceWasher.WashGroup="HoverColor"/>

    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardBackgroundBrushKey}" Color="#FFFFFFFF" PresentationOptions:Freeze="true"  themes:ResourceWasher.WashGroup="ThemeColor"/>
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardBorderBrushKey}" Color="#FF343434" PresentationOptions:Freeze="true"  themes:ResourceWasher.WashGroup="ThemeColor"/>
    <LinearGradientBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardChromeBorderBrushKey}" StartPoint="0,0" EndPoint="0,1" PresentationOptions:Freeze="true" themes:ResourceWasher.WashGroup="ThemeColor">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0" Color="#FFabc2db"/>
                <GradientStop Offset="0.74" Color="#FFd6e4f3"/>
                <GradientStop Offset="0.75" Color="#FFbad2ea"/>
                <GradientStop Offset="1" Color="#FFb9d1ea"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextNormalBrushKey}" Color="#FF343434" PresentationOptions:Freeze="true"  themes:ResourceWasher.WashGroup="ThemeColor"/>
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextActiveBrushKey}" Color="#FF343434" PresentationOptions:Freeze="true"  themes:ResourceWasher.WashGroup="ActiveColor"/>


    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardPanelBackgroundBrushKey}" Color="#FFFFFFFF" PresentationOptions:Freeze="true"  themes:ResourceWasher.WashGroup="ThemeColor"/>

    <LinearGradientBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundNormalBrushKey}" StartPoint="0,0" EndPoint="0,1" PresentationOptions:Freeze="true" themes:ResourceWasher.WashGroup="ThemeColor">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0" Color="#FFbfcddb"/>
                <GradientStop Offset="1" Color="#FFabc2db"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundActiveBrushKey}" StartPoint="0,0" EndPoint="0,1" PresentationOptions:Freeze="true" themes:ResourceWasher.WashGroup="ActiveColor">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0" Color="#FF9ab5d1"/>
                <GradientStop Offset="1" Color="#FFabc2db"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBorderNormalBrushKey}" StartPoint="0.5,0" EndPoint="0.76,0.99" PresentationOptions:Freeze="true" themes:ResourceWasher.WashGroup="ThemeColor">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0" Color="#FFffffff"/>
                <GradientStop Offset="1" Color="#FF28cfe4"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowHeaderTextBrushKey}" Color="#FFFFFFFF" PresentationOptions:Freeze="true" themes:ResourceWasher.WashGroup="ThemeColor"/>
    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowHeaderBrushKey}" Color="#FF2d73a3" PresentationOptions:Freeze="true" themes:ResourceWasher.WashGroup="ThemeColor"/>
    <LinearGradientBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowCardChromeBrushKey}" StartPoint="0.5,0" EndPoint="0.76,0.99" PresentationOptions:Freeze="true" themes:ResourceWasher.WashGroup="ThemeColor">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0" Color="#FF2d73a3"/>
                <GradientStop Offset="0.34" Color="#FF2d73a3"/>
                <GradientStop Offset="0.64" Color="#FF27A4CE"/>
                <GradientStop Offset="0.85" Color="#FF24c6eb"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderFilterRecordHeaderBrushKey}" Color="#FFb8432c" PresentationOptions:Freeze="true" themes:ResourceWasher.WashGroup="ThemeColor"/>
    <LinearGradientBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderFilterRecordCardChromeBrushKey}" StartPoint="0.5,0" EndPoint="0.76,0.99" PresentationOptions:Freeze="true" themes:ResourceWasher.WashGroup="ThemeColor">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0" Color="#FFb8432c"/>
                <GradientStop Offset="0.64" Color="#FFD78575"/>
                <GradientStop Offset="0.85" Color="#FFe19a8c"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>


    <SolidColorBrush x:Key="{x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackOuterBorderBrushKey}" Color="#FFC0EBFE" PresentationOptions:Freeze="true" themes:ResourceWasher.WashGroup="Hover"/>
    <LinearGradientBrush PresentationOptions:Freeze="true" x:Key="{x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackInnerBorderBrushKey}" themes:ResourceWasher.WashGroup="Hover" StartPoint="0.5,0" EndPoint="0.5,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF4FAFD" Offset="0"/>
                <GradientStop Color="#FFD6EFFC" Offset="1"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush PresentationOptions:Freeze="true" x:Key="{x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackFillBrushKey}" themes:ResourceWasher.WashGroup="Hover" StartPoint="0.5,0" EndPoint="0.5,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF4FAFD" Offset="0"/>
                <GradientStop Color="#FFD6EFFC" Offset="1"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="{x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackForegroundBrushKey}" themes:ResourceWasher.WashGroup="Text" Color="#FF1E395B" />
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="{x:Static igDP:DataPresenterBrushKeys.MenuItemForegroundBrushKey}" themes:ResourceWasher.WashGroup="Text" Color="#FF1E395B"/>



    <!-- _________________________ Converters ______________________________________ -->
    <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
    <Custom:TextAlignmentToHorizontalAlignmentConverter x:Key="textAlignmentToHorizontalAlignmentConverter" />

    <!--конвертер для ToolTip в строке с суммами (по умолчанию показывает имя поля класса а не то что в заголовке)-->
    <visualCompHelpers:SummaryToolTipConverter x:Key="summaryToolTipConverter"/>

    <!--стиль для показа даты и времени (по умолчанию показывается только дата)-->
    <Style TargetType="{x:Type igDP:XamDateTimeEditor}">
        <Setter Property="Format" Value="dd/MM/yy HH:mm:ss"/>
        <Setter Property="Mask" Value="dd/mm/yy hh:mm:ss"/>
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
    </Style>

    <Style TargetType="{x:Type igDP:XamTextEditor}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    </Style>
    <Style TargetType="{x:Type igDP:XamNumericEditor}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
    </Style>

    <igWindows:BoolToValueConverter x:Key="complementConverter" >
        <igWindows:BoolToValueConverter.TrueConvertValue>
            <System:Boolean>False</System:Boolean>
        </igWindows:BoolToValueConverter.TrueConvertValue>
        <igWindows:BoolToValueConverter.FalseConvertValue>
            <System:Boolean>True</System:Boolean>
        </igWindows:BoolToValueConverter.FalseConvertValue>
    </igWindows:BoolToValueConverter>

    <!-- _________________________кнопка экспорта_______________________ -->


	<!--<Style x:Key="ExportExcelXamGridButton" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0,0,1,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Viewbox Width="33.535" Stretch="Fill" Height="33.535" x:Name="viewbox">
                        <Grid Width="29.285" Height="29.285">
                            <Grid Margin="0,0,6.421,6.683">
                                <Path Stretch="Fill" Stroke="#FF000000" HorizontalAlignment="Stretch" Margin="0,0,-2.995,-0.98" Data="M0.5,1.5 C0.5,0.94771525 0.94771525,0.5 1.5,0.5 L25.094605,0.5 C25.407773,8.5661 17.985291,22.964324 0.5,23.107349 z" StrokeThickness="1" Fill="#FF00113D"/>
                                <Path Stretch="Fill" Stroke="#8CFFFFFF" HorizontalAlignment="Stretch" Margin="1,1,-1.897,0.02" Data="M0.5,1.5 C0.5,0.94771525 0.94771525,0.5 1.5,0.5 L25.454366,0.5 C25.767534,8.5661 17.985291,23.122916 0.5,23.265941 z" StrokeThickness="1" Fill="{x:Null}"/>
                                <Path Stretch="Fill" Stroke="{x:Null}" HorizontalAlignment="Stretch" Margin="0,0,-2.995,-0.98" Data="M0.5,1.5 C0.5,0.94771525 0.94771525,0.5 1.5,0.5 L24.964675,0.5 C25.277843,8.5661 17.985291,22.920815 0.5,23.06384 z" StrokeThickness="1">
                                    <Path.Fill>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" MappingMode="RelativeToBoundingBox">
                                            <GradientStop Color="#AA67EDBF" Offset="0.32"/>
                                            <GradientStop Offset="0"/>
                                        </LinearGradientBrush>
                                    </Path.Fill>
                                    <Path.OpacityMask>
                                        <LinearGradientBrush EndPoint="0.99,0.5" StartPoint="0.002,0.5">
                                            <GradientStop Color="#00000000" Offset="0"/>
                                            <GradientStop Color="#00FFFFFF" Offset="1"/>
                                            <GradientStop Color="#FF000000" Offset="0.506"/>
                                        </LinearGradientBrush>
                                    </Path.OpacityMask>
                                </Path>
                                <Path Stretch="Fill" Stroke="{x:Null}" HorizontalAlignment="Stretch" Margin="1,1,5,1" Data="M0.5,1.5 C0.5,0.94771525 0.94771525,0.5 1.5,0.5 L24.964675,0.5 C25.277843,8.5661 17.985291,22.920815 0.5,23.06384 z" StrokeThickness="1"  OpacityMask="{x:Null}">
                                    <Path.Fill>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" MappingMode="RelativeToBoundingBox">
                                            <GradientStop Color="#19FFFFFF" Offset="1"/>
                                            <GradientStop Color="#7FFFFFFF"/>
                                        </LinearGradientBrush>
                                    </Path.Fill>
                                </Path>
                                <Path Stretch="Fill" Stroke="{x:Null}" StrokeThickness="1" HorizontalAlignment="Stretch" Margin="1.151,0.904,-1.835,0" Opacity="1" Data="M2.4846412,6 C2.4846412,2.6862915 2.6862915,-0.44970874 6,-0.44970874 L51.264234,-1.1673603 C54.577942,-1.1673603 22.563331,26.527038 2.4846412,11.774726 z" OpacityMask="{x:Null}" VerticalAlignment="Top" Height="8.667">
                                    <Path.Fill>
                                    
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="#CCFFFFFF" Offset="0.085"/>
                                            <GradientStop Color="#2CFFFFFF" Offset="0.995"/>
                                        </LinearGradientBrush>

                                    </Path.Fill>
                                </Path>
                                <Grid HorizontalAlignment="Left" Margin="-1.621,0,0,-1.163" VerticalAlignment="Bottom" Width="21.832" Height="21.835">
                                    <Rectangle Margin="0,3.83,5.245,0" Stroke="{x:Null}" StrokeThickness="0" HorizontalAlignment="Right" VerticalAlignment="Top" Width="5.343" Height="5.557">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                <GradientStop Color="#FFF26969" Offset="0.604"/>
                                                <GradientStop Color="#FFD20505" Offset="0.604"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <Rectangle Margin="5.905,3.83,10.584,0" Stroke="{x:Null}" StrokeThickness="0" VerticalAlignment="Top" Height="5.557">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                <GradientStop Color="#FFFFFFFF" Offset="0.476"/>
                                                <GradientStop Color="#FFE2E2EA" Offset="0.484"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <Rectangle Stroke="{x:Null}" StrokeThickness="0" HorizontalAlignment="Right" Margin="0,9.377,5.245,7.328" Width="5.343">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                <GradientStop Color="#FFFFFFFF" Offset="0.476"/>
                                                <GradientStop Color="#FFE2E2EA" Offset="0.484"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <Rectangle Fill="{x:Null}" Stroke="Black" StrokeThickness="1" Margin="5.905,3.827,5.24,7.32"/>
                                    <Path Margin="6.265,3.683,10.201,7.546" Fill="#63FFFFFF" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="1" Data="M6.2649908,3.6824302 L10.631446,8.9223346 6.2649908,13.289368 6.2648691,3.682563"/>
                                    <Path HorizontalAlignment="Right" Margin="0,1.126,2.842,0" VerticalAlignment="Top" Width="4.366" Height="4.367" Fill="#FF000000" Stretch="Fill" Stroke="#54FFFFFF" StrokeThickness="0.5" Data="M0.25,0.25 L4.116,0.25 4.116,4.117 z"/>
                                </Grid>
                            </Grid>
                        </Grid>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="true"/>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Width" TargetName="viewbox" Value="35.25"/>
                            <Setter Property="Height" TargetName="viewbox" Value="35.25"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true"/>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <!--<Style x:Key="ExportExcelXamGridButton" TargetType="{x:Type Button}">
        <Setter Property="BorderBrush" Value="{StaticResource BaseDarkBlue}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid VerticalAlignment="Stretch" Background="{x:Null}" Width="21" Height="21"  HorizontalAlignment="Stretch" x:Name="grid" SnapsToDevicePixels="True">
                        <Border x:Name="border" Background="{DynamicResource BaseLightGray}" Visibility="Collapsed"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" >
                        </Border>
                        <Image Source="/Proryv.ElectroARM.Resources;Component/Image/ExportExelGrid.png"  Width="22" Height="21"
                         />
                        <Rectangle Fill="{StaticResource ExportGreedBrush}"  Stroke="{x:Null}"  Width="21" Height="21"  SnapsToDevicePixels="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true"/>
                        <Trigger Property="IsDefaulted" Value="true"/>
                        <Trigger Property="IsPressed" Value="true">
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.4"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="true"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
    

    <Style x:Key="SmallExportExcelXamGridButton" TargetType="{x:Type Button}">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid VerticalAlignment="Stretch" Background="{StaticResource BaseLightControlBackground}" Margin="0,0,0,0"   HorizontalAlignment="Stretch" x:Name="grid" SnapsToDevicePixels="True">
                        <Rectangle Fill="{StaticResource     ExportGreedBrush}"  Stroke="{x:Null}"  Width="18" Height="18"  SnapsToDevicePixels="True"/>
                        <Border x:Name="border"   BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" >
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource BaseMoreDarkBlue}"/>
                            <Setter Property="Background" TargetName="grid" Value="{StaticResource BaseDarkGray}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true"/>
                        <Trigger Property="IsDefaulted" Value="true"/>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style x:Key="SmallExportExcelXamGridButton" TargetType="{x:Type Button}">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid VerticalAlignment="Stretch" Background="{StaticResource BaseLightGray}"   HorizontalAlignment="Stretch" x:Name="grid" SnapsToDevicePixels="True">
                       
                        <Rectangle Fill="{StaticResource ExcelExportBrush}"  Stroke="{x:Null}"  Width="19" Height="19"  SnapsToDevicePixels="True"/>
                        <Border x:Name="border"   BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" >
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource BaseDarkBlue}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true"/>
                        <Trigger Property="IsDefaulted" Value="true"/>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->




    <ControlTemplate x:Key="ExportPanelXamDataGrid">
        <Grid Margin="0,1,0,0" VerticalAlignment="Top" x:Name="panel" HorizontalAlignment="Left" >
            <Button x:Name="Export"  HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Top" Loaded="ExportOnLoaded"
                    Style="{StaticResource ExportExcelXamGridButton}" ToolTip="Экспорт" Click="ButtonExportExcel_Click"/>
        </Grid>
    </ControlTemplate>

	 <ControlTemplate x:Key="SmallExportPanelXamDataGrid">
        <Grid Margin="0,1,0,0" VerticalAlignment="Top" x:Name="panel" HorizontalAlignment="Left">
            <Button x:Name="Export"  HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Top" Loaded="ExportOnLoaded"
                    Style="{StaticResource SmallExportExcelXamGridButton}" ToolTip="Экспорт" Click="ButtonExportExcel_Click"/>
        </Grid>
    </ControlTemplate>

   <Style x:Key="XamDataGridRecordSelectorExtentStyle" TargetType="{x:Type Custom:XamDataGrid}">
        <!--<Setter Property="RecordSelectorExtent" Value="50"/>-->
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="Background" Value="{StaticResource BaseLightBackground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Custom:XamDataGrid}">
                    <Grid>
                        <Border   BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"  BorderThickness="{TemplateBinding BorderThickness}" Margin="0,0,0,0">
                            <Grid x:Name="PART_ContentSiteGrid"/>
                        </Border>
                        <ContentControl Template="{StaticResource SmallExportPanelXamDataGrid}" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ ExpanderBar +++_________________________________________ -->
    <Style  TargetType="{x:Type Custom1:ExpanderBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Custom1:ExpanderBar}">
                    <Grid>
                        <Rectangle x:Name="bgRect" StrokeThickness="1" Fill="Transparent"/>
                        <Border BorderBrush="{StaticResource BaseDarkGray}" Background="{StaticResource BaseLightGray}" BorderThickness="0,1,0,1" Margin="0,0,0,0"/>
                        <Border x:Name="border" BorderBrush="{StaticResource BaseDarkGray}" Background="{StaticResource BaseDarkGray}" BorderThickness="0,1,0,1" Margin="0,1,0,0" Visibility="Collapsed"/>
                        <!--<Border BorderBrush="White" BorderThickness="0,1,0,0" Margin="0,1,0,0" VerticalAlignment="Top"/>-->
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="bgRect" Value="Transparent"/>
                            <Setter Property="Stroke" TargetName="bgRect" Value="Transparent"/>
                            <Setter Property="Visibility" TargetName="border" Value="Visible"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- _________________________ GroupByAreaMulti +++_________________________________________ -->
    <Style  TargetType="{x:Type Custom:GroupByAreaMulti}">
        <Setter Property="Background" Value="{StaticResource BaseDarkGray}">
        </Setter>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderThickness" Value="0"/>
        <!--<Setter Property="BorderBrush" Value="#FF83a3be"/>-->
        <Setter Property="Padding" Value="0,5"/>
    </Style>



    <!-- _________________________ FixedFieldSplitter +++_________________________________________ -->
    <Style  TargetType="{x:Type Custom:FixedFieldSplitter}">
        <Style.Triggers>
            <Trigger Property="IsInHeader"
                                 Value="False">
                <Setter Property="Background" Value="{StaticResource BaseLightBlue}">
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>


   





    <Style TargetType="{x:Type igDP:LabelPresenter}">
        <Setter Property="Padding" Value="0.5,2" />
        <Setter Property="Background" Value="{StaticResource BaseLightControlBackground}" />
        <Setter Property="LabelHighlight" Value="{StaticResource BaseLightGray}" />
        <Setter Property="InnerBorderBrush" Value="Transparent" />
        <Setter Property="OuterBorderBrush" Value="{StaticResource BaseDarkGray}" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelForeground}}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=Field.LabelTextAlignmentResolved, Converter={StaticResource textAlignmentToHorizontalAlignmentConverter}, RelativeSource={x:Static RelativeSource.Self}}" />
        <!--SSP 7/6/09 - Field Chooser - Added ToolTip property on the field.-->
        <Setter Property="ToolTip" Value="{Binding Path=Field.ToolTip, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:LabelPresenter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="sbHighlightOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="highlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00" />
                                <SplineDoubleKeyFrame Value="1" KeyTime="00:00:00.1750000" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="fishHeadHighlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00" />
                                <SplineDoubleKeyFrame Value="1" KeyTime="00:00:00.1750000" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="sbHighlightOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="highlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00.25" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="fishHeadHighlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00.25" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeInFilterButton">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeOutFilterButton">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="labelCntr"  Margin="{TemplateBinding Padding}" Background="#00000000">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition x:Name="fishColumn" Width="0" />
                        </Grid.ColumnDefinitions>
                        <!-- Background Bar -->
                        <Border Width="Auto" Height="Auto" RenderTransformOrigin="0.5,0.5" CornerRadius="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelCornerRadius}}" SnapsToDevicePixels="True" Background="{TemplateBinding Background}" x:Name="background" />
                        <!-- Highlight -->
                        <Border x:Name="highlight" Opacity="0" Width="Auto" Height="Auto" CornerRadius="0" Background="{TemplateBinding LabelHighlight}" SnapsToDevicePixels="True" />
                        <Border BorderBrush="{TemplateBinding OuterBorderBrush}" BorderThickness="1" CornerRadius="0" Background="Transparent" Margin="0,0,0,0" x:Name="lineOuter" Width="Auto" Height="Auto" SnapsToDevicePixels="True" />
                        <Border BorderBrush="{TemplateBinding InnerBorderBrush}" BorderThickness="1" CornerRadius="0" Background="Transparent" Margin="1,1,1,1" x:Name="lineInner" Width="Auto" Height="Auto" SnapsToDevicePixels="True" />
                        <Path x:Name="fishHeadOuterStroke" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{TemplateBinding OuterBorderBrush}" Grid.Column="1" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z" />
                        <Path x:Name="fishHead" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{TemplateBinding Background}" Grid.Column="1" Margin="0,1,1,1" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z" />
                        <Path x:Name="fishHeadHighlight" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{TemplateBinding LabelHighlight}" Opacity="0" Grid.Column="1" Margin="0,1,1,1" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z" />
                        <Path x:Name="fishHeadInnerStroke" Visibility="Collapsed" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,1 0,1 0,1 7,8 7,8 8,9 8,11 7,12 7,12 0,19 0,19 0,19 0,20 0,20 z" Fill="{TemplateBinding InnerBorderBrush}" Grid.Column="1" Margin="-1,1,1,1" SnapsToDevicePixels="True" />
                        <Grid HorizontalAlignment="Stretch" Margin="7,4" VerticalAlignment="Stretch" x:Name="sortIndicatorAndLabel">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="LabelContent" Focusable="False" Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" d:LayoutOverrides="Width, Height" VerticalAlignment="Center" />
                            <igWindows:SortIndicator x:Name="SortIndicator" SortStatus="{TemplateBinding SortStatus}" Visibility="Collapsed" HorizontalAlignment="Right" VerticalAlignment="Center" Width="Auto" Grid.Column="1" Margin="5,0,0,0" />
                            <!-- SSP 3/31/08 - Summaries Functionality -->
                            <igDP:SummaryButton x:Name="SummaryButton" Field="{TemplateBinding Field}" Visibility="{Binding Path=Field.AllowSummariesResolved, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Right" VerticalAlignment="Center" Width="Auto" Grid.Column="2" Margin="5,0,0,0" Opacity="0.4" />
                            <!-- JJD 1/06/09 - Filtering Functionality -->
                            <igDP:FilterButton x:Name="FilterButton" Field="{TemplateBinding Field}" Visibility="{TemplateBinding FilterButtonVisibility}" HorizontalAlignment="Left" VerticalAlignment="Center" Width="Auto" Grid.Column="3" Opacity="0.4" Margin="5,0,0,0" />
                            <!-- JM 1/14/09 - Fixed Fields Functionality -->
                            <igDP:FixedFieldButton x:Name="FixedButton" Field="{TemplateBinding Field}" Visibility="{TemplateBinding FixedButtonVisibility}" HorizontalAlignment="Left" VerticalAlignment="Center" Width="Auto" Grid.Column="4" Margin="2,0,2,0" Opacity="0.4" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!-- HighlightPrimary -->
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter TargetName="highlight" Property="Opacity" Value="1" />
                            <Setter TargetName="fishHeadHighlight" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="HorizontalAlignment" Value="Center">
                            <Setter Property="VerticalAlignment" TargetName="SortIndicator" Value="Top" />
                            <Setter Property="HorizontalAlignment" TargetName="SortIndicator" Value="Center" />
                            <Setter Property="Margin" TargetName="SortIndicator" Value="0,5,0,0" />
                        </Trigger>
                        <!-- Only animate highlight -->

                        <Trigger SourceName="FilterButton" Property="HasActiveFilters" Value="True">
                            <Setter TargetName="FilterButton" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="SortStatus" Value="Ascending">
                            <Setter TargetName="highlight" Property="Opacity" Value="1" />
                            <Setter TargetName="fishHeadHighlight" Property="Opacity" Value="1" />
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="SortStatus" Value="Descending">
                            <Setter TargetName="highlight" Property="Opacity" Value="1" />
                            <Setter TargetName="fishHeadHighlight" Property="Opacity" Value="1" />
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <DataTrigger Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="background" Property="CornerRadius" Value="0" />
                            <Setter TargetName="highlight" Property="CornerRadius" Value="0" />
                            <Setter TargetName="lineOuter" Property="CornerRadius" Value="0" />
                            <Setter TargetName="lineInner" Property="CornerRadius" Value="0" />
                            <Setter TargetName="background" Property="BorderThickness" Value="1,1,0,1" />
                            <Setter TargetName="lineOuter" Property="BorderThickness" Value="1,1,0,1" />
                            <Setter TargetName="lineInner" Property="BorderThickness" Value="1,1,0,1" />
                            <Setter TargetName="lineInner" Property="Margin" Value="1,1,0,1" />
                            <Setter TargetName="fishHeadOuterStroke" Property="Visibility" Value="Visible" />
                            <Setter TargetName="fishHead" Property="Visibility" Value="Visible" />
                            <Setter TargetName="fishHeadHighlight" Property="Visibility" Value="Visible" />
                            <Setter TargetName="fishHeadInnerStroke" Property="Visibility" Value="Visible" />
                            <Setter TargetName="fishColumn" Property="Width" Value="14" />
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.HasOffsetY), RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="labelCntr" Property="Margin" Value="-24,4,2,4" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.HasOffsetY), RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.IsFirstInList), RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Padding" Value="25,4,5,4" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.IsFirstInList), RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="labelCntr" Property="Margin" Value="2,4,2,4" />
                        </DataTrigger>

                        <Trigger Property="IsInFieldChooser" Value="true">
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="FilterButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="labelCntr" Property="Margin" Value="0,0,0,0" />
                        </Trigger>

                        <Trigger Property="IsDragIndicator" Value="True">
                            <Setter Property="Padding" Value="7,4" />
                            <Setter TargetName="labelCntr" Property="Margin" Value="2,4" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- _________________________ LabelContent Style______________________________________ -->
    <Style x:Key="LabelContentNoneMarginStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ContentPresenter
						Margin="{TemplateBinding Padding}"
						Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
						ContentTemplate="{TemplateBinding ContentTemplate}"
						ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- _________________________ LabelPresenter __________________________________________ -->
    <Style  x:Key="LabelPresenterStretchAndNonMargin" TargetType="{x:Type igDP:LabelPresenter}" >
        <Setter Property="Padding" Value="0,0,0,0"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:LabelPresenter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="sbHighlightOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="highlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
                                <SplineDoubleKeyFrame Value="1" KeyTime="00:00:00.1670000"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="fishHeadHighlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
                                <SplineDoubleKeyFrame Value="1" KeyTime="00:00:00.1670000"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="sbHighlightOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="highlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="fishHeadHighlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.4"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.4"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeInFilterButton">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeOutFilterButton">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.4"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="labelCntr" Margin="{TemplateBinding Padding}" Background="#00000000" prim:XamlHelper.SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition x:Name="fishColumn" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <!-- Background Bar -->
                        <Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								RenderTransformOrigin="0.5,0.5"
								CornerRadius="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelCornerRadius}}"
								SnapsToDevicePixels="True"
								Background="{TemplateBinding Background}"
								x:Name="background"
								BorderBrush="{TemplateBinding OuterBorderBrush}"
								BorderThickness="1,0,1,1"/>
                        <!-- End Background Bar -->
                        <!-- Highlight -->
                        <Border
								x:Name="highlight"
								Opacity="1"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								CornerRadius="0,0,0,0"
								Background="{TemplateBinding LabelHighlight}"
								Margin="0,0,0,0"
								BorderBrush="#FF96D9F9"
								BorderThickness="0"
								Visibility="Collapsed"/>
                        <Border
								x:Name="highlight_2"
								Opacity="1"
								Width="Auto"
								Height="Auto"
								CornerRadius="0,0,0,0"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelHighlight2}}"
								Visibility="Collapsed"
								Margin="0,0,0,0"
								BorderBrush="#FF96D9F9"
								BorderThickness="1,0,1,1"/>
                        <Border
								x:Name="WhiteInnerBorder"
								Background="{x:Null}"
								BorderThickness="1,0,1,0"
								BorderBrush="#FFFFFFFF"
								Margin="1,0,1,1"/>
                        <Path x:Name="fishHeadOuterStroke" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{TemplateBinding OuterBorderBrush}" Grid.Column="1" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z" />
                        <Path x:Name="fishHead" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{TemplateBinding Background}" Grid.Column="1" Margin="0,1,1,1" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z" />
                        <!-- JJD 04/16/12 - TFS109233
									Initialize the fishHeadHighlight Opacity to 0 so it won't be visible until the IsMouseOver MultiTrigger below -->
                        <Path x:Name="fishHeadHighlight" Opacity="0" SnapsToDevicePixels="True" Fill="{TemplateBinding LabelHighlight}" Visibility="Collapsed" Grid.Column="1" Margin="0,1,1,1" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z"/>
                        <Grid x:Name="sortIndicatorAndLabel">
                            <!-- End Label Text -->
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <igWindows:SortIndicator
								x:Name="SortIndicator"
								SortStatus="{TemplateBinding SortStatus}"
								Grid.Row="1"
								Grid.Column="1"
								Visibility="Collapsed"
								HorizontalAlignment="Right"
								VerticalAlignment="Center"
								Margin="0,0,5,0"/>
                            <!-- Label Text -->
                            <ContentControl
								Grid.Row="1"
								x:Name="LabelContent"
								Style="{StaticResource LabelContentNoneMarginStyle}"
								Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
								ContentTemplate="{TemplateBinding ContentTemplate}"
								ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="0"
                                Padding="0,0,2,0"
								VerticalAlignment="Stretch"             
								Grid.RowSpan="1"
								Grid.ColumnSpan="1"/>
                            <!-- SSP 3/31/08 - Summaries Functionality -->
                            <igDP:SummaryButton
								x:Name="SummaryButton"
								Field="{TemplateBinding Field}"
								Visibility="{Binding Path=Field.AllowSummariesResolved, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource TemplatedParent}}"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Grid.Column="2"
								Grid.Row="0"
								Margin="0,0,0,0"
								Grid.RowSpan="2"
								Opacity="0.4"
								/>
                            <!-- JJD 1/06/09 - Filtering Functionality -->
                            <igDP:FilterButton
								x:Name="FilterButton"
								Field="{TemplateBinding Field}"
								Visibility="{TemplateBinding FilterButtonVisibility}"
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								Width="Auto"
								Grid.Column="3"
								Grid.RowSpan="2"
								Opacity="0.4"
								Margin="0,0,3,0"/>
                            <!-- JM 1/14/09 - Fixed Fields Functionality -->
                            <igDP:FixedFieldButton
								x:Name="FixedButton"
								Field="{TemplateBinding Field}"
								Visibility="{TemplateBinding FixedButtonVisibility}"
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								Width="Auto"
								Grid.Column="4"
								Grid.RowSpan="2"
								Margin="2,0,2,0"
								Opacity="0.4"/>
                        </Grid>
                        <Border
							BorderThickness="1,1,1,0"
							x:Name="pressed_border2"
							BorderBrush="#FF7A9EB1"
							Width="Auto"
							Height="Auto"
							Margin="0,0,0,0"
							Visibility="Collapsed"/>
                        <Border
							BorderThickness="1,1,1,0"
							x:Name="pressed_border3"
							BorderBrush="#CC70B9DE"
							Width="Auto"
							Height="Auto"
							Margin="1,1,1,0"
							Visibility="Collapsed"/>
                        <!-- End Highlight -->
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Margin" TargetName="background" Value="-1,0,0,0" />
                            <Setter Property="Margin" TargetName="WhiteInnerBorder" Value="0,0,1,1" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=IsDragIndicator, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="Margin" TargetName="background" Value="0,0,0,0" />
                            <Setter Property="Margin" TargetName="WhiteInnerBorder" Value="1,0,1,1" />
                        </DataTrigger>
                        <!-- IsDragSource -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsDragSource, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="pressed_border2" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="pressed_border3" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="WhiteInnerBorder" Value="Collapsed"/>
                            <Setter Property="BorderThickness" TargetName="highlight" Value="1,0,1,0"/>
                            <Setter Property="Margin" TargetName="LabelContent" Value="1"/>
                            <Setter Property="Visibility" TargetName="highlight" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="highlight_2" Value="Visible"/>
                        </MultiDataTrigger>

                        <!-- IsPressed -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="pressed_border2" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="pressed_border3" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="WhiteInnerBorder" Value="Collapsed"/>
                            <Setter Property="BorderThickness" TargetName="highlight" Value="1,0,1,0"/>
                            <Setter Property="Margin" TargetName="LabelContent" Value="1"/>
                        </MultiDataTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="FilterButton" Property="HasActiveFilters" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <!-- JM 04-09-09 Comment these animations out for now to address TFS 16564.  This bug was discovered as we were getting ready to release
											 the April 2009 9.1 Hotfix and is caused by a bug in the WPF framework that we will need to work around by
											 replacing this MultiTrigger with a MultiDataTrigger. -->
                            <!--<MultiTrigger.EnterActions>
                                <BeginStoryboard x:Name="SigmaFadeIn_FB_BeginStoryboard" Storyboard="{StaticResource SigmaFadeInFilterButton}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource SigmaFadeOutFilterButton}" x:Name="SigmaFadeOut_FB_BeginStoryboard"/>
                                <RemoveStoryboard BeginStoryboardName="SigmaFadeIn_FB_BeginStoryboard"/>
                            </MultiTrigger.ExitActions>-->
                            <Setter TargetName="FilterButton" Property="Opacity" Value="1"/>
                        </MultiTrigger>
                        <Trigger SourceName="FilterButton" Property="HasActiveFilters" Value="True">
                            <Setter TargetName="FilterButton" Property="Opacity" Value="1"/>
                        </Trigger>
                        <!-- HighlightPrimary -->
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter Property="Visibility" TargetName="highlight" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="WhiteInnerBorder" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="SortStatus" Value="Ascending"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="highlight_2" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="WhiteInnerBorder" Value="Collapsed"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="SortStatus" Value="Descending"/>
                            </MultiTrigger.Conditions>
                            <!-- JJD 8/24/11 - TFS82886
                  Moved Setter for SortIndicator Visibility into separate trigger below
                  so that it is always visible when SortStatus is Descending
                  regardless if IsPressed is true or false -->
                            <!--<Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>-->
                            <Setter Property="Visibility" TargetName="highlight_2" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="WhiteInnerBorder" Value="Collapsed"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="SortStatus" Value="Ascending"/>
                            </MultiTrigger.Conditions>
                            <!-- JJD 8/24/11 - TFS82886
                  Moved Setter for SortIndicator Visibility into separate trigger below
                  so that it is always visible when SortStatus is Ascending
                  regardless if IsPressed is true or false -->
                            <!--<Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>-->
                            <Setter Property="Visibility" TargetName="highlight_2" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="WhiteInnerBorder" Value="Collapsed"/>
                        </MultiTrigger>

                        <!-- JJD 8/24/11 - TFS82886
                Created new trigger for setting SortIndicator Visibility
                so that it is always visible when SortStatus is Ascending  -->
                        <Trigger Property="SortStatus" Value="Ascending">
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>
                        </Trigger>

                        <!-- JJD 8/24/11 - TFS82886
                Created new trigger for setting SortIndicator Visibility
                so that it is always visible when SortStatus is Descending  -->
                        <Trigger Property="SortStatus" Value="Descending">
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="background" Property="BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="highlight" Property="BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="highlight_2" Property="BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="WhiteInnerBorder" Property="BorderThickness" Value="1,0,0,0"/>
                            <Setter TargetName="fishHeadOuterStroke" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="fishHead" Property="Visibility" Value="Visible"/>
                            <!-- JJD 04/16/12 - TFS109233
								set fishHeadHighlight element visible when in group by area since we are
							    now initializing its Opacity to 0 it won't be visible until the IsMouseOver MultiTrigger below -->
                            <Setter TargetName="fishHeadHighlight" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="fishColumn" Property="Width" Value="14"/>
                            <Setter TargetName="LabelContent" Property="Margin" Value="7,4"/>
                            <Setter Property="Visibility" TargetName="pressed_border2" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="pressed_border3" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="highlight_2" Value="Collapsed"/>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.HasOffsetY), RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="labelCntr" Property="Margin" Value="-24,0,0,0"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.HasOffsetY), RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.IsFirstInList), RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="sortIndicatorAndLabel" Property="Margin" Value="20,0,0,0"/>
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.IsFirstInList), RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="labelCntr" Property="Margin" Value="0"/>
                        </DataTrigger>

                        <!--IsMouseOver -->
                        <!--SSP 6/24/09 - NAS9.2 Field Chooser - Changed from Trigger to MultiTrigger-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <!--SSP 6/24/09 - NAS9.2 Field Chooser - We don't want to loose the selected highlight when mouse
								is hovered over a field in the field chooser. Especially this causes the field label to not
								appear selected when mouse is clicked over it while the mouse is still over the field label.-->
                                <Condition Property="IsSelectedInFieldChooser" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SigmaFadeIn}" x:Name="SigmaFadeIn_BeginStoryboard"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource SigmaFadeOut}" x:Name="SigmaFadeOut_BeginStoryboard"/>
                            </MultiTrigger.ExitActions>
                            <Setter Property="Visibility" TargetName="highlight" Value="Visible"/>
                            <!-- JJD 04/16/12 - TFS109233
								fishHeadHighlight element should only be visible in group by area so instead of
							    settung it Visible set its Opacity to 1. If it is in the group by area it will become visible
							<Setter Property="Visibility" TargetName="fishHeadHighlight" Value="Visible"/>-->
                            <Setter Property="Opacity" TargetName="fishHeadHighlight" Value="1"/>
                            <Setter Property="Visibility" TargetName="WhiteInnerBorder" Value="Collapsed"/>
                        </MultiTrigger>

                        <!--SSP 6/23/09 - NAS9.2 Field Chooser
							If the label is in a field chooser then hide the sort indicator, filter button and
							summary button. Note that the fixed button is collapsed in code in label presenter
							by coercing the FixedButtonVisibility property to be Collapsed.-->
                        <Trigger Property="IsInFieldChooser" Value="true">
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="FilterButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="IsDragIndicator" Value="True">
                            <Setter TargetName="sortIndicatorAndLabel" Property="Margin" Value="0"/>
                            <Setter TargetName="labelCntr" Property="Margin" Value="0"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="LabelHighlight" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelHighlight}}"/>
    </Style>











    <!-- _________________________ SummaryResultPresenter ____________________________________-->
    <Style TargetType="{x:Type Custom:SummaryResultPresenter}">
        <Setter Property="Padding" Value="1,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Custom:SummaryResultPresenter}">
                    <Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="1"
						Padding="{TemplateBinding Padding}"
                        ToolTip="{Binding SummaryResult, Converter={StaticResource summaryToolTipConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                        <TextBlock Text="{Binding SummaryResult.DisplayTextAsync, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="0,0,0,2"/>
    </Style>


    <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, BlackForegroundStyle}">
        <Setter Property="TextBlock.FontFamily" Value="{StaticResource BaseNormalFontFamily}"/>
        <Setter Property="TextBlock.Foreground" Value="{StaticResource BaseDarkFontColor}" />
        <Setter Property="TextBlock.FontSize" Value="{StaticResource BaseFontSizeM}"/>
    </Style>






    <!-- _________________________ CellValuePresenter +++_________________________________________ -->
    <Style  TargetType="{x:Type Custom:CellValuePresenter}">
        <Setter Property="TextBlock.FontFamily" Value="{StaticResource BaseNormalFontFamily}"/>
        <Setter Property="TextBlock.Foreground" Value="{StaticResource BaseDarkFontColor}" />
        <Setter Property="TextBlock.FontSize" Value="{StaticResource BaseFontSizeM}"/>
        <Setter Property="ForegroundFieldSelectedStyle" Value="{DynamicResource {ComponentResourceKey ResourceId=BlackForegroundStyle, TypeInTargetAssembly={x:Type Custom:XamDataGrid}}}"/>
        <Setter Property="ForegroundSelectedStyle" Value="{DynamicResource {ComponentResourceKey ResourceId=BlackForegroundStyle, TypeInTargetAssembly={x:Type Custom:XamDataGrid}}}"/>
        <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey ResourceId=BlackForegroundStyle, TypeInTargetAssembly={x:Type Custom:XamDataGrid}}}"/>
        <Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey ResourceId=BlackForegroundStyle, TypeInTargetAssembly={x:Type Custom:XamDataGrid}}}"/>
        <Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey ResourceId=BlackForegroundStyle, TypeInTargetAssembly={x:Type Custom:XamDataGrid}}}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="BackgroundHover" Value="{StaticResource BaseLightGray}"/>
        <Setter Property="BorderHoverBrush" Value="{StaticResource BaseLightGray}"/>
        <Setter Property="BackgroundActive" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="BorderActiveBrush" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="BackgroundSelected" Value="{StaticResource BaseLightGray}"/>
        <Setter Property="BorderSelectedBrush" Value="{StaticResource BaseLightGray}"/>
        <Setter Property="BackgroundFieldSelected" Value="#FFebf3f9"/>
        <Setter Property="BorderFieldSelectedBrush" Value="#FFebf3f9"/>
        <Setter Property="BackgroundPrimary" Value="#FFFFFFFF"/>
        <Setter Property="BorderPrimaryBrush" Value="#FFFFFFFF"/>
        <Setter Property="Padding" Value="3,0"/>
        <Setter Property="Template" Value="{DynamicResource CellValuePresenterControlTemplate}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Custom:CellValuePresenter}">
                    <Custom1:CardPanel>
                        <Border x:Name="MainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}"/>
                        <Rectangle x:Name="Active" Fill="{TemplateBinding BackgroundActive}" HorizontalAlignment="Stretch" Height="Auto" Width="Auto" Opacity="1" SnapsToDevicePixels="True" Stroke="{TemplateBinding BorderActiveBrush}" StrokeThickness="1" Visibility="Collapsed" VerticalAlignment="Stretch"/>
                        <ContentPresenter x:Name="PART_EditorSite" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Style="{TemplateBinding ForegroundStyle}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Custom1:CardPanel>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsAlternate, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Record.RecordType, RelativeSource={RelativeSource Self}}" Value="DataRecord"/>
                                <Condition Binding="{Binding Record.IsAddRecord, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Style" TargetName="PART_EditorSite" Value="{Binding ForegroundAlternateStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOverRecord" Value="True"/>
                        <Trigger Property="IsRecordSelected" Value="True">
                            <Setter Property="BorderThickness" Value="0,0,1,0"/>
                            <Setter Property="Margin" Value="0"/>
                            <Setter Property="Padding" Value="2,0"/>
                        </Trigger>
                        <Trigger Property="HighlightAsPrimary" Value="True">
                            <Setter Property="Background" Value="{Binding BackgroundPrimary, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding BorderPrimaryBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="Style" TargetName="PART_EditorSite" Value="{Binding ForegroundPrimaryStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="IsFieldSelected" Value="True">
                            <Setter Property="Background" Value="{Binding BackgroundFieldSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding BorderFieldSelectedBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="Style" TargetName="PART_EditorSite" Value="{Binding ForegroundFieldSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="CornerRadius" Value="0"/>
                            <Setter Property="BorderThickness" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{Binding BackgroundSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding BorderSelectedBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="Style" TargetName="PART_EditorSite" Value="{Binding ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="CornerRadius" Value="0"/>
                            <Setter Property="BorderThickness" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsActive" Value="True">
                            <Setter Property="Style" TargetName="PART_EditorSite" Value="{Binding ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Visibility" TargetName="Active" Value="Visible"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsFieldSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding BackgroundHover, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding BorderHoverBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="Style" TargetName="PART_EditorSite" Value="{Binding ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                        <!--<DataTrigger Binding="{Binding Field.IsFixedStateChanging, RelativeSource={RelativeSource Self}}" Value="True">
    			<Setter Property="Background" Value="#AA8DBAEB"/>
    			<Setter Property="BorderBrush" Value="#AA8DBAEB"/>
    		</DataTrigger>-->
                        <Trigger Property="IsDataErrorTemplateActive" Value="True">
                            <Setter Property="ContentTemplate" TargetName="PART_EditorSite" Value="{DynamicResource DataPresenterBase.DataErrorContentTemplateKey}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- _________________________ DataRecordPresenter __________________________________________ -->
    <Style TargetType="{x:Type igDP:DataRecordPresenter}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="HeaderAreaBackground" Value="{StaticResource BaseLightBackground}" />
        <Setter Property="NestedContentBackground" Value="Transparent" />
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="BorderBrush" Value="#FFCCCCCC" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:DataRecordPresenter}">
                    <igWindows:CardPanel x:Name="baseGrid" Background="{TemplateBinding Background}">
                        <Border Visibility="Collapsed" Background="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, AddRowBackground}}" BorderBrush="{TemplateBinding BorderBrush}" HorizontalAlignment="Stretch" x:Name="addRowFooter" VerticalAlignment="Stretch" Width="Auto" Height="Auto" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Grid Margin="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <!-- SSP 5/6/08 - Record Separators - Added two col defs-->
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <!-- SSP 5/6/08 - Record Separators - Added two row defs-->
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <!-- Expansion Checkbox -->
                            <!-- SSP 5/6/08 - Record Separators - changed grid.row to 2 from 1-->
                            <!-- AS 1/27/09 NA 2009 Vol 1 - Set ZIndex and RenderTransform for fixed fields -->
                            <!-- AS 6/3/09 NA 2009 Vol 2 - Added Command(Parameter) & ToggleMode to support undo/redo -->
                            <Border x:Name="OrientationHorizontalSep" BorderThickness="0,0,1,0" Grid.ColumnSpan="5" Background="#FFFAFAFA" BorderBrush="{StaticResource BaseDarkGray}" Visibility="Visible" />
                            <igWindows:ExpansionIndicator x:Name="ExpansionIndicator" Panel.ZIndex="1" RenderTransform="{TemplateBinding FixedNearElementTransform}" Grid.Row="2" Grid.Column="0" Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}" Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}" CommandParameter="{TemplateBinding Record}" ToggleMode="Manual" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                            <!-- Header Background -->
                            <!-- Added 8/2/2006 GH -->
                            <!-- SSP 5/6/08 - Record Separators - changed grid.colspan to 5 from 3-->
                            <!-- AS 2/10/09 TFS13798 - Set RenderTransform for fixed fields -->
                            <igWindows:CardPanel x:Name="SpacerFill" RenderTransform="{TemplateBinding FixedNearElementTransform}" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="5" Visibility="Visible">
                                <Rectangle x:Name="fill" Margin="0,0,0,0" Fill="{TemplateBinding HeaderAreaBackground}" />
                                <Rectangle x:Name="lightLine" Fill="#3FFFFFFF" VerticalAlignment="Top" Margin="0,1,0,0" Width="Auto" Height="1" />
                                <Rectangle x:Name="darkLine" Fill="#66000000" VerticalAlignment="Top" Margin="0,0,0,0" Width="Auto" Height="1" />
                            </igWindows:CardPanel>
                            <!-- End Added 8/2/2006 GH -->
                            <!-- Header Content -->
                            <!-- SSP 5/6/08 - Record Separators - changed grid.col to 2 from 1-->
                            <ContentPresenter x:Name="PART_HeaderContentSite" Grid.Row="0" Grid.Column="2" Content="{TemplateBinding HeaderContent}" Visibility="Visible" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" d:IsHidden="True" />
                            <!-- SSP 5/6/08 - Record Separators - Added separator rectangle -->
                            <Border x:Name="RecordSeparator" Grid.Row="1" Grid.Column="0" Visibility="Collapsed" Style="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, RecordSeparatorStyle}}" Grid.ColumnSpan="5" />
                            <!-- Record Content -->
                            <!-- SSP 5/6/08 - Record Separators - changed grid.row to 2 from 1 and grid.col to 2 from 1-->
                            <ContentPresenter x:Name="PART_RecordContentSite" Grid.Row="2" Grid.Column="2" Content="{TemplateBinding DataContext}" ContentTemplate="{TemplateBinding RecordContentAreaTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <!-- Nested Content -->
                            <!-- SSP 5/6/08 - Record Separators - changed grid.row to 4 from 2 and grid.col to 2 from 1-->
                            <!-- AS 3/25/09 TFS15801 - Set RenderTransform for fixed fields -->
                            <Border x:Name="PART_NestedContentSite" Grid.Row="4" Grid.Column="2" Visibility="Visible" HorizontalAlignment="Left" VerticalAlignment="Top" RenderTransform="{TemplateBinding FixedNearElementTransform}" Background="{TemplateBinding NestedContentBackground}">
                                <!-- AS 11/14/07 BR26035 
								The namescope was broken because the recordlistcontrol was not in the logical tree. We 
								need to use a ContentControl instead so the content	is made a logical child. -->
                                <ContentControl RenderTransform="{TemplateBinding ScrollableElementTransform}" Content="{TemplateBinding NestedContent}" Margin="2,0,0,0" x:Name="contentControl" />
                                <!--Margin="10,10,0,0" />-->
                            </Border>
                        </Grid>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="2" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Column" Value="0" />
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="2" />
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="4" />
                            <Setter TargetName="PART_RecordContentSite" Property="VerticalAlignment" Value="Top" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Margin" Value="0,2" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="2" />
                            <Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="5" />
                            <!--<Setter TargetName="RecordSeparator" Property="Grid.Row" Value="2"/>
							<Setter TargetName="RecordSeparator" Property="Grid.Column" Value="1"/>-->
                            <Setter TargetName="RecordSeparator" Property="Width" Value="10" />
                            <Setter TargetName="RecordSeparator" Property="Height" Value="Auto" />
                            <Setter TargetName="RecordSeparator" Property="BorderThickness" Value="1,0" />
                            <Setter TargetName="OrientationHorizontalSep" Property="Visibility" Value="Visible" />
                            <!-- END SSP 5/6/08 - Record Separators -->
                        </Trigger>
                        <Trigger Property="ShouldDisplayRecordContent" Value="False">
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShouldDisplayRecordContent" Value="False" />
                                <Condition Property="IsHeaderRecord" Value="False" />
                                <Condition Property="ExpansionIndicatorVisibility" Value="Visible" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Horizontal" />
                                <Condition Property="ShouldDisplayRecordContent" Value="False" />
                            </MultiTrigger.Conditions>
                            <!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="3" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical" />
                                <Condition Property="ShouldDisplayRecordContent" Value="False" />
                            </MultiTrigger.Conditions>
                            <!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="3" />
                        </MultiTrigger>
                        <Trigger Property="IsHeaderRecord" Value="True">
                            <!--JJD 9/4/07 - BR26153 -->
                            <!--Only set ExpansionIndicator Visibility to Hidden if is was Visible (see new MultiTrigger below) -->
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="0" />
                        </Trigger>
                        <!--JJD 9/4/07 - BR26153 -->
                        <!--Only set ExpansionIndicator Visibility to Hidden if is was Visible -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHeaderRecord" Value="True" />
                                <Condition Property="ExpansionIndicatorVisibility" Value="Visible" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />
                        </MultiTrigger>
                        <Trigger Property="HasHeaderContent" Value="False">
                            <Setter Property="Visibility" TargetName="SpacerFill" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_HeaderContentSite" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasNestedContent" Value="true">
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible" />
                            <Setter TargetName="baseGrid" Property="Background" Value="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="HasNestedContent" Value="False">
                            <Setter Property="Visibility" TargetName="PART_NestedContentSite" Value="Collapsed" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSpecialRecord}" Value="true" />
                                <Condition Binding="{Binding Path=IsFixedOnTop, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="addRowFooter" Value="Visible" />
                            <Setter Property="Background" TargetName="addRowFooter" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, FixedRecord}}" />
                            <Setter Property="BorderThickness" TargetName="addRowFooter" Value="0,0,0,1" />
                            <Setter Property="Margin" Value="0,0,0,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSpecialRecord}" Value="true" />
                                <Condition Binding="{Binding Path=IsFixedOnBottom, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="addRowFooter" Value="Visible" />
                            <Setter Property="BorderThickness" TargetName="addRowFooter" Value="0,1,0,0" />
                            <Setter Property="Background" TargetName="addRowFooter" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, FixedRecord}}" />
                            <Setter Property="Margin" Value="0,1,0,0" />
                        </MultiDataTrigger>
                        <Trigger Property="HasSeparatorBefore" Value="true">
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <!-- For HasSeparatorAfter, we have to set grid.row and grid.col based on the orientation-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSeparatorAfter" Value="true" />
                                <Condition Property="Orientation" Value="Vertical" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible" />
                            <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="3" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSeparatorAfter" Value="true" />
                                <Condition Property="Orientation" Value="Horizontal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible" />
                            <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="3" />
                            <Setter TargetName="RecordSeparator" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="0" />
                            <Setter TargetName="RecordSeparator" Property="Grid.RowSpan" Value="5" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSeparatorBefore" Value="true" />
                                <Condition Property="Orientation" Value="Horizontal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="1" />
                            <Setter TargetName="RecordSeparator" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="0" />
                            <Setter TargetName="RecordSeparator" Property="Grid.RowSpan" Value="5" />
                        </MultiTrigger>
                        <!-- END SSP 5/6/08 - Record Separators -->
                        <!-- Changing opacity of Content to differentiate between filtered records with IsFilteredOut trigger property -->
                        <Trigger Property="IsFilteredOut" Value="True">
                            <Setter TargetName="PART_RecordContentSite" Property="Opacity" Value="0.35" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TemplateCardView">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:DataRecordPresenter}">
                    <igWindows:CardPanel x:Name="baseGrid" Background="{TemplateBinding Background}">
                        <!-- Record Content -->
                        <Rectangle Fill="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, CardBackground}}" />
                        <ContentPresenter x:Name="PART_RecordContentSite" Content="{TemplateBinding DataContext}" ContentTemplate="{TemplateBinding RecordContentAreaTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </igWindows:CardPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{DynamicResource DataRecordPresenterControlTemplate}"/>
    </Style>





    <!-- _________________________ SummaryButton +++_________________________________________ -->
    <!--<Style  TargetType="{x:Type igDP:SummaryButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:SummaryButton}">
                    <Grid x:Name="grid" Visibility="Visible">
                        <StackPanel x:Name="stackPanel" Background="Transparent" HorizontalAlignment="Center" Margin="0,0,3,0" Orientation="Horizontal" Visibility="Visible" VerticalAlignment="Stretch">
                            <Path x:Name="path" Data="M0,0C0,0 5,0 5,0 5,0 5,1 5,1 5,1 2,1 2,1 2,1 4,3.5 4,3.5 4,3.5 2,6 2,6 2,6 5,6 5,6 5,6 5,7 5,7 5,7 0,7 0,7 0,7 0,6 0,6 0,6 2,3.5625 2,3.5625 2,3.5625 0,1 0,1 0,1 0,0 0,0z" HorizontalAlignment="Stretch" Height="7" Margin="3,0,0,0" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" Width="5" Fill="#FFACA899"/>
                        </StackPanel>
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" HorizontalOffset="0" IsOpen="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" SnapsToDevicePixels="True" StaysOpen="False" VerticalOffset="1">
                            <Border x:Name="border" BorderBrush="#FF8eb4d5" BorderThickness="1" Background="{DynamicResource {ComponentResourceKey ResourceId=SummaryButtonPopupBackground, TypeInTargetAssembly={x:Type igDP:XamDataGrid}}}" CornerRadius="0" KeyboardNavigation.DirectionalNavigation="Contained" FocusManager.IsFocusScope="True" KeyboardNavigation.TabNavigation="Contained">
                                <Grid Height="Auto" Width="Auto">
                                    <Border BorderBrush="#FF8eb4d5" BorderThickness="0,0,1,0" Background="White" CornerRadius="3,0,0,0" HorizontalAlignment="Left" Width="28"/>
                                    <Rectangle Fill="White" HorizontalAlignment="Left" Margin="28,0,0,0" Stroke="{x:Null}" StrokeThickness="0" Width="1"/>
                                    <StackPanel Margin="5">
                                        <igDP:SummaryCalculatorSelectionControl x:Name="CalculatorSelectionControl" Foreground="#FF99A1AC"/>
                                        <Grid Height="Auto" Width="Auto">
                                            <Border Background="White" CornerRadius="0,0,3,3" Margin="-5,0,-5,-5"/>
                                            <Rectangle x:Name="rectangle1" Fill="#FFC5DBE7" Height="1" Margin="-5,0" Stroke="{x:Null}" VerticalAlignment="Top" Width="Auto"/>
                                            <StackPanel HorizontalAlignment="Right" Margin="0,5,0,0" Orientation="Horizontal">
                                                <Button x:Name="RowSummaryOkButton" Content="Ok" Height="12" IsDefault="True" Margin="0,0,5,0" Style="{DynamicResource {ComponentResourceKey ResourceId=RowSummaryOkButton, TypeInTargetAssembly={x:Type igDP:XamDataGrid}}}" Width="13" Background="#FFACCCDE" BorderBrush="#FF8eb4d5"/>
                                                <Button x:Name="RowSummaryCancelButton" Content="Cancel" Height="12" IsCancel="True" Style="{DynamicResource {ComponentResourceKey ResourceId=RowSummaryCancelButton, TypeInTargetAssembly={x:Type igDP:XamDataGrid}}}" Width="13" BorderBrush="#FF8eb4d5" Background="#FFACCCDE"/>
                                            </StackPanel>
                                        </Grid>
                                    </StackPanel>
                                </Grid>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
    </Style>-->

    <!-- _________________________ SortIndicator +++_________________________________________ -->
    <Style  TargetType="{x:Type Custom1:SortIndicator}">
        <Setter Property="Visibility" Value="Visible"/>
        <Setter Property="Background" Value="#ff666666"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Custom1:SortIndicator}">
                    <Polygon x:Name="Arrow" Fill="{TemplateBinding Background}" HorizontalAlignment="Stretch" Height="Auto" Points="0,0 10,0 5,5" StrokeStartLineCap="Round" StrokeEndLineCap="Round" StrokeLineJoin="Round" VerticalAlignment="Center" Width="Auto"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SortStatus" Value="Descending">
                            <Setter Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="SortStatus" Value="Ascending">
                            <Setter Property="Points" TargetName="Arrow" Value="0,5 10,5 5,0"/>
                            <Setter Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>


    <!-- _________________________ ExpansionIndicator +++_________________________________________ -->
    <Style TargetType="{x:Type Custom1:ExpansionIndicator}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="ClipToBounds" Value="False"/>
        <Setter Property="Margin" Value="5,0,3,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Custom1:ExpansionIndicator}">
                    <Grid Background="Transparent">
                        <Grid x:Name="grdExpansionIndicatorClosed" Height="9" RenderTransformOrigin="0.5,0.5" SnapsToDevicePixels="True" Width="9">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Border x:Name="outerBorder" CornerRadius="0" RenderTransformOrigin="0.5,0.5" Background="{StaticResource BaseDarkBlue}"/>
                            <Border x:Name="innerFill" CornerRadius="0" Height="Auto" Margin="1" Background="{StaticResource BaseLightGray}" RenderTransformOrigin="0.5,0.5" Width="Auto"/>
                            <Rectangle x:Name="plusHorizontal" Fill="{StaticResource BaseMoreDarkBlue}" HorizontalAlignment="Stretch" Height="1" Margin="2,4" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Stretch" Width="Auto"/>
                            <Rectangle x:Name="plusVert" Fill="{StaticResource BaseMoreDarkBlue}" Height="Auto" Margin="4,2" RenderTransformOrigin="0.5,0.5" Width="1"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="innerFill" Property="Background" Value="{StaticResource BaseDarkGray}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="plusVert" Value="Collapsed"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>









    <Style  TargetType="{x:Type igDP:ValueEditorCheckBox}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        
        
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Border>
                                    <Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:ValueEditorCheckBox}">
                    <ControlTemplate.Resources>
                        <!--<Storyboard x:Key="ExitCheckBoxAnimation">
                            <DoubleAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="CheckMark">
                                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="CheckMark">
                                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckBoxAnimation">
                            <DoubleAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="CheckMark">
                                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="1.5"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="CheckMark">
                                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="1.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>-->
                    </ControlTemplate.Resources>
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="19"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid HorizontalAlignment="Center" Margin="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Rectangle x:Name="rechtangle2" HorizontalAlignment="Center" Height="14" Margin="0" Opacity="1" OpacityMask="{x:Null}" RadiusY="0" RadiusX="0" Stroke="{x:Null}" StrokeThickness="1" Visibility="Visible" VerticalAlignment="Center" Width="14">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FF3E5870" Offset="0.444"/>
                                        <GradientStop Color="#FF204B80" Offset="0.458"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="rechtangle1" HorizontalAlignment="Center" Height="12" Margin="0" Opacity="1" RadiusY="0" RadiusX="0" Stroke="{x:Null}" StrokeThickness="1" Visibility="Visible" VerticalAlignment="Center" Width="12" >
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
                                        <GradientStop Color="#7F53E8FB" Offset="0.827"/>
                                        <GradientStop Offset="0.565"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                                <Rectangle.OpacityMask>
                                    <LinearGradientBrush EndPoint="0.99,0.5" StartPoint="0.002,0.5">
                                        <GradientStop Color="#00000000" Offset="0"/>
                                        <GradientStop Color="Transparent" Offset="1"/>
                                        <GradientStop Color="Black" Offset="0.506"/>
                                    </LinearGradientBrush>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <Path Data="M1.2591564,6C1.2591564,2.6862915,2.6862915,-0.44970874,6,-0.44970874L57.302,-0.44970874C60.615708,-0.44970874,62.042842,2.6862915,62.042842,6L62.042842,17.23176C41.964152,31.707288,21.337846,31.984072,1.2591564,17.23176z" HorizontalAlignment="Stretch" Height="4.25" Margin="1,0,1,7" Opacity="1" OpacityMask="{x:Null}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="1" VerticalAlignment="Center" Width="12">
                                <Path.Fill>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="White" Offset="0"/>
                                        <GradientStop Color="#60FFFFFF" Offset="0.991"/>
                                    </LinearGradientBrush>
                                </Path.Fill>
                            </Path>
                            <Rectangle x:Name="rectangle" Fill="#CCFFFFFF" HorizontalAlignment="Center" Height="12" Margin="0" RadiusY="0" RadiusX="0" Stroke="White" StrokeThickness="1" Visibility="Visible" VerticalAlignment="Center" Width="12" />
                            <Grid Name="CheckMark" HorizontalAlignment="Center" Height="13" Margin="0" Visibility="Visible"  RenderTransformOrigin="0.5,0.5" SnapsToDevicePixels="False" VerticalAlignment="Center" Width="13">
                                <Grid.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleY="1" ScaleX="1"/>
                                        <SkewTransform AngleY="0" AngleX="0"/>
                                        <RotateTransform Angle="0"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Grid.RenderTransform>
                                <Path Data="M276.97535,-468.22956L286.36118,-467.17671 286.36118,-473.2005 283.78267,-470.78317C284.2983,-469.58409,280.74105,-470.17637,279.51481,-470.61028z" HorizontalAlignment="Stretch" Height="Auto" Margin="3.117,1.877,1.118,5.123" RenderTransformOrigin="0.5,0.5" Stretch="Fill" StrokeEndLineCap="Round" Stroke="Black" StrokeThickness="0.2" StrokeLineJoin="Round" VerticalAlignment="Stretch" Width="Auto">
                                    <Path.Fill>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="#FFD00202" Offset="0.596"/>
                                            <GradientStop Color="Red" Offset="0.462"/>
                                        </LinearGradientBrush>
                                    </Path.Fill>
                                    <Path.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleY="1" ScaleX="-1"/>
                                            <SkewTransform AngleY="0" AngleX="0"/>
                                            <RotateTransform Angle="-45"/>
                                            <TranslateTransform X="-0.40492487500959751" Y="0.97757512499040145"/>
                                        </TransformGroup>
                                    </Path.RenderTransform>
                                </Path>
                            </Grid>
                        </Grid>
                        <ContentPresenter Grid.ColumnSpan="1" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Fill" TargetName="rectangle" Value="{x:Null}"/>
                            <Setter Property="Visibility" TargetName="CheckMark" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="rechtangle1">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
                                        <GradientStop Color="#7F53E8FB" Offset="0.652"/>
                                        <GradientStop Offset="0"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="Black"/>
    </Style>

    <!--пока не используются-->

    <Style x:Key="CellValuePresenter" TargetType="{x:Type Custom:CellValuePresenter}">
        <Style.Triggers>
            <Trigger Property="IsFixed"
                                 Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0"
                                                         EndPoint="1,0">
                            <GradientStop Offset="0"
                                                      Color="red" />
                            <GradientStop Offset="1"
                                                      Color="Red" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <!--<DataTrigger Binding="{Binding Field.IsFixedStateChanging, RelativeSource={RelativeSource Self}}"
                                     Value="True">
                <Setter Property="Background"
                                    Value="green" />
            </DataTrigger>-->
        </Style.Triggers>
    </Style>

   
    


    <!-- _________________________ ExpandableFieldRecordPresenter ______________________________________ -->
    <Style TargetType="{x:Type igDP:ExpandableFieldRecordPresenter}">
        <Setter Property="Foreground" Value="#FFFFFFFF"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="Padding" Value="0,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:ExpandableFieldRecordPresenter}">
                    <ControlTemplate.Resources>
                        <!-- JM 06-04-09 TFS14198 - Changed FillBehavior to Stop now that we are initializing the Opacity to 1 in the element. -->
                        <Storyboard x:Key="sbDisplayNested">
                            <DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="ncpVisual"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="Stop">
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:0.75"/>
                            </DoubleAnimationUsingKeyFrames>

                            <!-- JM 06-04-09 TFS14198 - Added Opacity animation for the NestedContentSite -->
                            <DoubleAnimationUsingKeyFrames
							  BeginTime="00:00:00"
							  Storyboard.TargetName="PART_NestedContentSite"
							  Storyboard.TargetProperty="Opacity"
							  FillBehavior="HoldEnd">
                                <DiscreteDoubleKeyFrame Value="1" KeyTime="00:00:00" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <!-- JM 06-04-09 TFS14198 - No longer need to fade ncpVisual to Opacity 0 - we just collapse the containing PART_NestedContentSite -->
                        <!--<Storyboard x:Key="sbHideNested">
							<DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="ncpVisual"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="HoldEnd">
								<SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="0" KeyTime="00:00:00.15"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>-->
                    </ControlTemplate.Resources>
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <!-- Row for nested content -->
                        <!-- Expansion Checkbox -->
                        <!-- AS 6/3/09 NA 2009 Vol 2 - Added Command(Parameter) & ToggleMode to support undo/redo -->
                        <igWindows:ExpansionIndicator x:Name="ExpansionIndicator"
                                                      RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                                      Panel.ZIndex="1"
                                                      Visibility="{TemplateBinding ExpansionIndicatorVisibility}"
                                                      Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}"
                                                      CommandParameter="{TemplateBinding Record}"
                                                      ToggleMode="Manual"
                                                      IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <!-- Expandable Field Title -->
                        <!-- AS 1/27/09 NA 2009 Vol 1 - Set RenderTransform for fixed fields -->
                        <Grid
							x:Name="PART_RecordContentSite"
                            RenderTransform="{TemplateBinding FixedNearElementTransform}"
							Margin="0,1,0,0"
							Grid.Row="0"
							Grid.Column="1"
							Visibility="{TemplateBinding HeaderVisibility}">
                            <Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								RenderTransformOrigin="0.5,0.5"
								CornerRadius="0"
								SnapsToDevicePixels="True"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}"
								x:Name="borderBackground">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle
										Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelOuterBorder}}"
										StrokeThickness="1"
										RadiusX="0"
										RadiusY="0"
										Fill="Transparent"/>
                                    <Rectangle
										Margin="1"
										Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelInnerBorder}}"
										StrokeThickness="1"
										RadiusX="0"
										RadiusY="0"
										Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								CornerRadius="0"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelHighlight}}"
								x:Name="borderBackgroundHighlight">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle
										Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelOuterBorder}}"
										StrokeThickness="1"
										RadiusX="0"
										RadiusY="0"
										Fill="Transparent"/>
                                    <Rectangle
										Margin="1"
										Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelInnerBorder}}"
										StrokeThickness="1"
										RadiusX="0"
										RadiusY="0"
										Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <ContentPresenter
                                Content="{Binding Path=(igDP:RecordPresenter.Record).Description, RelativeSource={RelativeSource TemplatedParent}}"
                                TextBlock.Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"
                                Margin="10,3,10,3"/>
                        </Grid>
                        <!-- Nested Content -->
                        <!-- AS 2/10/09 TFS13798 - Set RenderTransform for fixed fields -->
                        <Grid
							x:Name="PART_NestedContentSite"
                            RenderTransform="{TemplateBinding FixedNearElementTransform}"
							Grid.Row="1"
							Grid.Column="1"
							Visibility="Collapsed">
                            <Border
								CornerRadius="0"
								BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=NestedContentBackgroundBorder}}"
								BorderThickness="1"
								Background="{TemplateBinding NestedContentBackground}">
                                <!-- JM 06-04-09 TFS14198 - Initialize the Opacity property to 1 instead of zero -->
                                <!-- AS 11/14/07 BR26035
								The namescope was broken because the recordlistcontrol was not in the logical tree. We
								need to use a ContentControl instead so the content	is made a logical child. -->
                                <ContentControl
									x:Name="ncpVisual"
                                    RenderTransform="{TemplateBinding ScrollableElementTransform}"
									Opacity="1"
									Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}"
									TextBlock.Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"
									Margin="{TemplateBinding Padding}"/>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- JM 06-04-09 TFS14198 - Use EventTriggers instead of property Triggers to avoid the rooting issue in the WPF framework -->
                        <!--<Trigger Property="HasNestedContent" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource sbDisplayNested}" x:Name="NestedOn"/>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource sbHideNested}" x:Name="NestedOff"/>
								<StopStoryboard BeginStoryboardName="NestedOn"/>
							</Trigger.ExitActions>
							<Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
						</Trigger>-->

                        <Trigger Property="HasNestedContent" Value="True">
                            <Setter TargetName="PART_NestedContentSite" Property="Opacity" Value="0" />
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature-->
                        <DataTrigger Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent">
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="1" />
                        </DataTrigger>

                        <!-- MD 8/3/10 - TFS35609 -->
                        <DataTrigger Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached">
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="1" />
                        </DataTrigger>

                        <EventTrigger  RoutedEvent="igDP:RecordPresenter.ShowNestedContent">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource sbDisplayNested}" x:Name="NestedOn"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TemplateCardView">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:ExpandableFieldRecordPresenter}">
                    <ControlTemplate.Resources>
                        <!-- JM 06-04-09 TFS14198 - Changed FillBehavior to Stop now that we are initializing the Opacity to 1 in the element. -->
                        <Storyboard x:Key="sbDisplayNested">
                            <DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="ncpVisual"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="Stop">
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:0.75"/>
                            </DoubleAnimationUsingKeyFrames>
                            <!-- JM 06-04-09 TFS14198 - Added Opacity animation for the NestedContentSite -->
                            <DoubleAnimationUsingKeyFrames
							  BeginTime="00:00:00"
							  Storyboard.TargetName="PART_NestedContentSite"
							  Storyboard.TargetProperty="Opacity"
							  FillBehavior="HoldEnd">
                                <DiscreteDoubleKeyFrame Value="1" KeyTime="00:00:00" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <!-- JM 06-04-09 TFS14198 - No longer need to fade ncpVisual to Opacity 0 - we just collapse the containing PART_NestedContentSite -->
                        <!--<Storyboard x:Key="sbHideNested">
							<DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="ncpVisual"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="HoldEnd">
								<SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="0" KeyTime="00:00:00.15"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>-->
                    </ControlTemplate.Resources>
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <!-- Row for nested content -->
                        <!-- Expandable Field Title -->
                        <Grid
							x:Name="PART_RecordContentSite"
							Margin="0"
							Grid.Row="0"
							Grid.Column="0"
							Visibility="{TemplateBinding HeaderVisibility}">
                            <Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								RenderTransformOrigin="0.5,0.5"
								CornerRadius="2,2,2,2"
								SnapsToDevicePixels="True"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}"
								x:Name="borderBackground">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle
										Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelOuterBorder}}"
										StrokeThickness="1"
										RadiusX="1.55015910897703"
										RadiusY="1.55015910897703"
										Fill="Transparent"/>
                                    <Rectangle
										Margin="1"
										Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelInnerBorder}}"
										StrokeThickness="1"
										RadiusX="0.550159108977027"
										RadiusY="0.550159108977027"
										Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								CornerRadius="2,2,2,2"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelHighlight}}"
								x:Name="borderBackgroundHighlight">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle
										Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelOuterBorder}}"
										StrokeThickness="1"
										RadiusX="1.55015910897703"
										RadiusY="1.55015910897703"
										Fill="Transparent"/>
                                    <Rectangle
										Margin="1"
										Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelInnerBorder}}"
										StrokeThickness="1"
										RadiusX="0.550159108977027"
										RadiusY="0.550159108977027"
										Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <ContentPresenter Content="{Binding Path=(igDP:RecordPresenter.Record).Description, RelativeSource={RelativeSource TemplatedParent}}" TextBlock.Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}" Margin="10,3,10,3"/>
                        </Grid>
                        <!-- Nested Content -->
                        <Grid
							x:Name="PART_NestedContentSite"
							Grid.Row="1"
							Grid.Column="0"
							Visibility="Collapsed">
                            <Border
								CornerRadius="0,0,3,3"
								BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=NestedContentBackgroundBorder}}"
								BorderThickness="1"
								Background="{TemplateBinding NestedContentBackground}">
                                <!-- JM 06-04-09 TFS14198 - Initialize the Opacity property to 1 instead of zero -->
                                <!-- AS 11/14/07 BR26035
								The namescope was broken because the recordlistcontrol was not in the logical tree. We
								need to use a ContentControl instead so the content	is made a logical child. -->
                                <ContentControl
									x:Name="ncpVisual"
									Opacity="1"
									Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}"
									TextBlock.Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"
									Margin="{TemplateBinding Padding}"/>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- JM 06-04-09 TFS14198 - Use EventTriggers instead of property Triggers to avoid the rooting issue in the WPF framework -->
                        <!--<Trigger Property="HasNestedContent" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource sbDisplayNested}" x:Name="NestedOn"/>
								<StopStoryboard BeginStoryboardName="NestedOff"/>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource sbHideNested}" x:Name="NestedOff"/>
								<StopStoryboard BeginStoryboardName="NestedOn"/>
							</Trigger.ExitActions>
							<Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
						</Trigger>-->

                        <Trigger Property="HasNestedContent" Value="True">
                            <Setter TargetName="PART_NestedContentSite" Property="Opacity" Value="0" />
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <EventTrigger  RoutedEvent="igDP:RecordPresenter.ShowNestedContent">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource sbDisplayNested}" x:Name="NestedOn"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>














    <Style x:Key="FieldChooser"   TargetType="{x:Type Custom:FieldChooser}">
        <!--<Style.Resources>
            <DataTemplate x:Key="{DataTemplateKey DataType={x:Type igDP:FieldChooserEntry}}" DataType="{x:Type igDP:FieldChooserEntry}">
                <DockPanel>
                    <igDP:XamCheckEditor x:Name="checkBox" DockPanel.Dock="Left" Value="{Binding IsVisible, Mode=TwoWay}"/>
                    <igDP:LabelPresenter x:Name="label" DockPanel.Dock="Left" Field="{Binding Field}" HorizontalContentAlignment="Left" Margin="5,0,0,0" igWindows:SimpleTextBlock.OptimizeWidthMeasurement="True" ValueType="{x:Null}" VerticalContentAlignment="Center"/>
                </DockPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding DisplayHiddenFieldsOnly, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type igDP:FieldChooser}}}" Value="true">
                        <Setter Property="Visibility" TargetName="checkBox" Value="Collapsed"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
            <DataTemplate x:Key="{DataTemplateKey DataType={x:Type igDP:FieldChooserGroup}}" DataType="{x:Type igDP:FieldChooserGroup}">
                <StackPanel x:Name="panel" ToolTip="{Binding FieldLayout.ToolTip}">
                    <TextBlock x:Name="fieldLayoutDescription" Text="{Binding FieldLayout.Description}"/>
                    <StackPanel x:Name="filterPanel" Orientation="Horizontal" Visibility="Collapsed">
                        <Rectangle Width="20"/>
                        <TextBlock Text="{Binding FieldFilter.Description}"/>
                    </StackPanel>
                </StackPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding HasFieldFilter}" Value="true">
                        <Setter Property="ToolTip" TargetName="panel" Value="{Binding FieldFilter.ToolTip}"/>
                        <Setter Property="Visibility" TargetName="filterPanel" Value="Visible"/>
                        <Setter Property="Visibility" TargetName="fieldLayoutDescription" Value="Collapsed"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
        </Style.Resources>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Custom:FieldChooser}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="Red" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <DockPanel Visibility="{TemplateBinding FieldGroupSelectorVisibilityResolved}">
                                <igDP:XamCheckEditor x:Name="toggleAllCheckBox" DockPanel.Dock="Left" Margin="4,0,0,0" Value="{Binding AllCurrentFieldsVisible, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                    <igDP:XamCheckEditor.Visibility>
                                        <Binding Mode="OneWay" Path="DisplayHiddenFieldsOnly" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <Custom1:NotBoolToVisibilityConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </igDP:XamCheckEditor.Visibility>
                                </igDP:XamCheckEditor>
                                <igDP:XamComboEditor x:Name="fieldGroupSelector" DockPanel.Dock="Right" DisplayValueSource="Value" HorizontalAlignment="Stretch" Value="{Binding CurrentFieldGroup, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ValueType="{x:Type Custom:FieldChooserGroup}" Style="{DynamicResource XamComboEditorStyle1}"/>
                            </DockPanel>
                            <Custom1:CardPanel Grid.Row="1">
                                <ListBox x:Name="PART_FieldsListBox" HorizontalContentAlignment="Stretch" SelectionMode="Single">
                                    <ListBox.ItemContainerStyle>
                                        <Style TargetType="{x:Type ListBoxItem}">
                                            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                        <Border BorderBrush="red" BorderThickness="5" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ListBox.ItemContainerStyle>
                                </ListBox>
                                <Border x:Name="highlightBorder" BorderBrush="Transparent" BorderThickness="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                            </Custom1:CardPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDraggingItem" Value="True">
                            <Setter Property="BorderBrush" TargetName="highlightBorder" Value="{DynamicResource DataPresenterBrushKeys.FieldChooserDragBorderBrushKey}"/>
                        </Trigger>
                        <Trigger Property="IsDraggingItemFromDataPresenter" Value="True">
                            <Setter Property="BorderBrush" TargetName="highlightBorder" Value="{DynamicResource DataPresenterBrushKeys.FieldChooserDragBorderBrushKey}"/>
                        </Trigger>
                        <Trigger Property="IsDragItemOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="highlightBorder" Value="{DynamicResource DataPresenterBrushKeys.FieldChooserDragBorderBrushKey}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding CurrentFields.Count, RelativeSource={RelativeSource Self}}" Value="0">
                            <Setter Property="IsEnabled" TargetName="toggleAllCheckBox" Value="False"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="multiLineColumn" TargetType="{x:Type Custom:LabelPresenter}">
        <Setter Property="Padding" Value="5,4,5,4" />
        <Setter Property="Background" Value="White"/>
        <Setter Property="LabelHighlight" >
            <Setter.Value>
                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#FFE3F7FF" Offset="0"/>
                    <GradientStop Color="#FFE3F7FF" Offset="0.35"/>
                    <GradientStop Color="#FFBDEDFF" Offset="0.35"/>
                    <GradientStop Color="#FFB7E7FB" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="InnerBorderBrush" Value="#00E9EEF1" />
        <Setter Property="OuterBorderBrush" Value="#FFBCCBD5" />
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding Field.LabelTextAlignmentResolved, Converter={StaticResource textAlignmentToHorizontalAlignmentConverter}, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}" TextWrapping="Wrap" TextAlignment="Center" VerticalAlignment="Center"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:LabelPresenter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="sbHighlightOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="highlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
                                <SplineDoubleKeyFrame Value="1" KeyTime="00:00:00.1750000"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="sbHighlightOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="highlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Margin="2,4,2,4"  Background="#00000000">
                        <!-- Background Bar -->
                        <Border
							Width="Auto"
							Height="Auto"
							RenderTransformOrigin="0.5,0.5"
							CornerRadius="0"
							SnapsToDevicePixels="True"
							Background="{TemplateBinding Background}"
							x:Name="background"/>
                        <!-- Highlight -->
                        <Border
							x:Name="highlight"
							Opacity="0"
							Width="Auto"
							Height="Auto"
							CornerRadius="0"
							Background="{TemplateBinding LabelHighlight}"/>
                        <Rectangle
							StrokeThickness="1"
							RadiusX="1.55015910897703"
							RadiusY="1.55015910897703"
							Fill="Transparent"
							Margin="0,0,0,0"
							x:Name="lineOuter"
							Width="Auto"
							Height="Auto" Stroke="#B2779CC1"/>
                        <Rectangle
							Stroke="{TemplateBinding InnerBorderBrush}"
							StrokeThickness="1"
							RadiusX="0.550159108977027"
							RadiusY="0.550159108977027"
							Fill="Transparent"
							Margin="1,1,1,1"
							x:Name="lineInner"
							Width="Auto"
							Height="Auto"/>
                        <Grid
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							x:Name="sortIndicatorAndLabel">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <ContentPresenter
								x:Name="LabelContent"
								Focusable="False"
								Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
								ContentTemplate="{TemplateBinding ContentTemplate}"
								ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" 
							HorizontalAlignment="Stretch" 
							Margin="7,0" 
							Grid.Row="0" 
							Grid.RowSpan="2" 
							VerticalAlignment="Center"/>
                            <igWindows:SortIndicator 
							x:Name="SortIndicator" 
							Grid.Column="1" 
							HorizontalAlignment="Right" 
							Margin="0,0,5,0" 
							Grid.Row="1" 
							SortStatus="{TemplateBinding SortStatus}" 
							Visibility="Collapsed" 
							VerticalAlignment="Center"/>
                            <!-- SSP 3/31/08 - Summaries Functionality -->
                            <igDP:SummaryButton
								x:Name="SummaryButton"
								Field="{TemplateBinding Field}"
								Visibility="{Binding Path=Field.AllowSummariesResolved, RelativeSource={RelativeSource TemplatedParent}}"
								Grid.Column="2" 
				 				HorizontalAlignment="Stretch" 
				 				Margin="0" 
				 				Opacity="0.4" 
				 				Grid.Row="0" 
				 				Grid.RowSpan="2" 
				 				VerticalAlignment="Stretch" 
				 				Width="Auto" Foreground="#FF587E96"/>
                            <!-- JJD 1/06/09 - Filtering Functionality -->
                            <igDP:FilterButton
								x:Name="FilterButton"
								Field="{TemplateBinding Field}"
								Visibility="{TemplateBinding FilterButtonVisibility}"
								Grid.Column="3" 
								HorizontalAlignment="Left"
								Margin="0,0,3,0" 
							 	Opacity="0.4" 
				 				Grid.RowSpan="2" 
				 	 			VerticalAlignment="Center" 
				 				Width="Auto"/>
                            <!-- JM 1/14/09 - Fixed Fields Functionality -->
                            <igDP:FixedFieldButton
								x:Name="FixedButton"
								Field="{TemplateBinding Field}"
								Visibility="{TemplateBinding FixedButtonVisibility}"
								Grid.Column="4" 
								HorizontalAlignment="Left" 
								Margin="2,0" Opacity="0.4"
				 				Grid.RowSpan="2" 
								VerticalAlignment="Center" 
								 Width="Auto" Foreground="#FF587E96"/>
                            <Button VerticalContentAlignment="Top" 
                                        HorizontalContentAlignment="Right"
                                        Visibility="Collapsed"></Button>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<DataTrigger Binding="{Binding Path=Field.LabelTextAlignmentResolved, RelativeSource={RelativeSource Self}}" Value="Center">
                            <Setter Property="HorizontalAlignment" TargetName="sortIndicatorAndLabel" Value="Center"/>
                        </DataTrigger>-->
                        <Trigger Property="IsDragSource" Value="True">
                            <Setter TargetName="highlight" Property="Opacity" Value="1"/>
                        </Trigger>
                        <!-- HighlightPrimary -->
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter TargetName="highlight" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="HorizontalAlignment" Value="Center">
                            <Setter Property="VerticalAlignment" TargetName="SortIndicator" Value="Top"/>
                            <Setter Property="HorizontalAlignment" TargetName="SortIndicator" Value="Center"/>
                            <Setter Property="Margin" TargetName="SortIndicator" Value="0,5,0,0"/>
                        </Trigger>
                        <!-- Only animate highlight -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <!--<Condition Property="SortStatus" Value="NotSorted"/>-->
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource sbHighlightOn}" x:Name="sbHighlightOn_BeginStoryboard"/>
                                <BeginStoryboard Storyboard="{StaticResource SigmaFadeOut}" x:Name="SigmaFadeIn_BeginStoryboard"/>
                                <BeginStoryboard x:Name="SigmaFadeIn_BeginStoryboard1" Storyboard="{StaticResource SigmaFadeIn}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource sbHighlightOff}" x:Name="sbHighlightOff_BeginStoryboard"/>
                                <BeginStoryboard Storyboard="{StaticResource SigmaFadeOut}" x:Name="SigmaFadeOut_BeginStoryboard"/>
                                <StopStoryboard BeginStoryboardName="SigmaFadeIn_BeginStoryboard1"/>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="SortStatus" Value="Ascending">
                            <Setter TargetName="highlight" Property="Opacity" Value="1"/>
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="SortStatus" Value="Descending">
                            <Setter TargetName="highlight" Property="Opacity" Value="1"/>
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>


    </Style>
    <ControlTemplate x:Key="DataRecordPresenterControlTemplate" TargetType="{x:Type Custom:DataRecordPresenter}">
    	<Custom1:CardPanel x:Name="baseGrid" Background="{TemplateBinding Background}" RenderTransform="{TemplateBinding FixedNearElementTransform}">
            <Border x:Name="addRowFooter" BorderBrush="DarkGray" BorderThickness="0,0,0,1" Background="{StaticResource BaseLightControlBackground}" HorizontalAlignment="Stretch" Height="Auto" Visibility="Collapsed" VerticalAlignment="Stretch" Width="Auto"/>
    		<Grid Margin="0" RenderTransform="{TemplateBinding ScrollableElementTransform}">
    			<Grid.ColumnDefinitions>
    				<ColumnDefinition Width="Auto"/>
    				<ColumnDefinition Width="Auto"/>
    				<ColumnDefinition Width="21"/>
    				<ColumnDefinition Width="Auto"/>
    				<ColumnDefinition Width="Auto"/>
    				<ColumnDefinition Width="*"/>
    			</Grid.ColumnDefinitions>
    			<Grid.RowDefinitions>
    				<RowDefinition Height="Auto"/>
    				<RowDefinition Height="Auto"/>
    				<RowDefinition Height="Auto"/>
    				<RowDefinition Height="Auto"/>
    				<RowDefinition Height="Auto"/>
    				<RowDefinition Height="Auto"/>
    			</Grid.RowDefinitions>
                <Border BorderBrush="{StaticResource BaseDarkGray}" BorderThickness="0,0,0,1" Grid.ColumnSpan="6" HorizontalAlignment="Stretch" Margin="0" Grid.Row="0" Grid.RowSpan="6" VerticalAlignment="Stretch" Background="Transparent"/>
    			<Border x:Name="OrientationHorizontalSep" BorderBrush="#FFE7E7E7" BorderThickness="0,0,1,0" Background="#FFFAFAFA" Grid.ColumnSpan="6" Visibility="Collapsed"/>
    			<Custom1:ExpansionIndicator x:Name="ExpansionIndicator" Grid.Column="1" CommandParameter="{TemplateBinding Record}" Command="Custom:DataPresenterCommands.ToggleRecordIsExpanded" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="3" RenderTransform="{TemplateBinding FixedNearElementTransform}" ToggleMode="Manual" Visibility="{Binding ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}" Panel.ZIndex="1"/>
    			<Custom1:CardPanel x:Name="SpacerFill" Grid.ColumnSpan="6" Grid.Column="1" Grid.Row="1" RenderTransform="{TemplateBinding FixedNearElementTransform}" Visibility="Visible">
    				<Border x:Name="fill" BorderBrush="{DynamicResource {ComponentResourceKey ResourceId=LabelOuterBorder, TypeInTargetAssembly={x:Type Custom:XamDataGrid}}}" BorderThickness="0,0,0,1" Background="{TemplateBinding HeaderAreaBackground}" Margin="0"/>
    			</Custom1:CardPanel>
    			<ContentPresenter x:Name="PART_HeaderContentSite" Content="{TemplateBinding HeaderContent}" Grid.Column="3" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="1" Visibility="Visible" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
    			<Border x:Name="RecordSeparator" Grid.ColumnSpan="6" Grid.Column="1" Grid.Row="2" RenderTransform="{TemplateBinding FixedNearElementTransform}" Style="{DynamicResource {ComponentResourceKey ResourceId=RecordSeparatorStyle, TypeInTargetAssembly={x:Type Custom:XamDataGrid}}}" Visibility="Collapsed"/>
    			<ContentPresenter x:Name="PART_RecordContentSite" ContentTemplate="{TemplateBinding RecordContentAreaTemplate}" Content="{TemplateBinding DataContext}" Grid.Column="3" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="3" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
    			<Border x:Name="PART_NestedContentSite" Background="{TemplateBinding NestedContentBackground}" Grid.Column="3" HorizontalAlignment="Left" Grid.Row="5" RenderTransform="{TemplateBinding FixedNearElementTransform}" Visibility="Visible" VerticalAlignment="Top">
    				<ContentControl Content="{TemplateBinding NestedContent}" Margin="2,2,0,0" RenderTransform="{TemplateBinding ScrollableElementTransform}"/>
    			</Border>
    		</Grid>
    	</Custom1:CardPanel>
    	<ControlTemplate.Triggers>
    		<MultiDataTrigger>
    			<MultiDataTrigger.Conditions>
    				<Condition Binding="{Binding FieldLayout.AutoFitToWidth, RelativeSource={RelativeSource Self}}" Value="True"/>
    				<Condition Binding="{Binding Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
    			</MultiDataTrigger.Conditions>
    			<Setter Property="Grid.ColumnSpan" TargetName="PART_HeaderContentSite" Value="3"/>
    			<Setter Property="Grid.ColumnSpan" TargetName="PART_RecordContentSite" Value="3"/>
    			<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    		</MultiDataTrigger>
    		<Trigger Property="Orientation" Value="Horizontal">
    			<Setter Property="Grid.Row" TargetName="PART_HeaderContentSite" Value="3"/>
    			<Setter Property="Grid.Column" TargetName="PART_HeaderContentSite" Value="1"/>
    			<Setter Property="Grid.Row" TargetName="PART_NestedContentSite" Value="3"/>
    			<Setter Property="Grid.Column" TargetName="PART_NestedContentSite" Value="5"/>
    			<Setter Property="VerticalAlignment" TargetName="PART_RecordContentSite" Value="Top"/>
    			<Setter Property="Grid.Row" TargetName="ExpansionIndicator" Value="1"/>
    			<Setter Property="Margin" TargetName="ExpansionIndicator" Value="0,2"/>
    			<Setter Property="Grid.Column" TargetName="ExpansionIndicator" Value="3"/>
    			<Setter Property="Grid.ColumnSpan" TargetName="SpacerFill" Value="1"/>
    			<Setter Property="Grid.RowSpan" TargetName="SpacerFill" Value="6"/>
    			<Setter Property="Visibility" TargetName="OrientationHorizontalSep" Value="Visible"/>
    			<Setter Property="Width" TargetName="RecordSeparator" Value="10"/>
    			<Setter Property="Height" TargetName="RecordSeparator" Value="Auto"/>
    			<Setter Property="BorderThickness" TargetName="RecordSeparator" Value="1,0"/>
    		</Trigger>
    		<Trigger Property="ShouldDisplayRecordContent" Value="False">
    			<Setter Property="Visibility" TargetName="PART_RecordContentSite" Value="Collapsed"/>
    		</Trigger>
    		<MultiTrigger>
    			<MultiTrigger.Conditions>
    				<Condition Property="ShouldDisplayRecordContent" Value="False"/>
    				<Condition Property="IsHeaderRecord" Value="False"/>
    				<Condition Property="ExpansionIndicatorVisibility" Value="Visible"/>
    			</MultiTrigger.Conditions>
    			<Setter Property="Visibility" TargetName="ExpansionIndicator" Value="Hidden"/>
    		</MultiTrigger>
    		<MultiTrigger>
    			<MultiTrigger.Conditions>
    				<Condition Property="Orientation" Value="Horizontal"/>
    				<Condition Property="ShouldDisplayRecordContent" Value="False"/>
    			</MultiTrigger.Conditions>
    			<Setter Property="Grid.Column" TargetName="ExpansionIndicator" Value="5"/>
    		</MultiTrigger>
    		<MultiTrigger>
    			<MultiTrigger.Conditions>
    				<Condition Property="Orientation" Value="Vertical"/>
    				<Condition Property="ShouldDisplayRecordContent" Value="False"/>
    			</MultiTrigger.Conditions>
    			<Setter Property="Grid.Row" TargetName="ExpansionIndicator" Value="5"/>
    		</MultiTrigger>
    		<Trigger Property="IsHeaderRecord" Value="True">
    			<Setter Property="Grid.Row" TargetName="ExpansionIndicator" Value="1"/>
    			<Setter Property="Grid.Column" TargetName="ExpansionIndicator" Value="1"/>
    		</Trigger>
    		<MultiTrigger>
    			<MultiTrigger.Conditions>
    				<Condition Property="IsHeaderRecord" Value="True"/>
    				<Condition Property="ExpansionIndicatorVisibility" Value="Visible"/>
    			</MultiTrigger.Conditions>
    			<Setter Property="Visibility" TargetName="ExpansionIndicator" Value="Hidden"/>
    		</MultiTrigger>
    		<Trigger Property="HasHeaderContent" Value="False">
    			<Setter Property="Visibility" TargetName="SpacerFill" Value="Collapsed"/>
    			<Setter Property="Visibility" TargetName="PART_HeaderContentSite" Value="Collapsed"/>
    		</Trigger>
    		<Trigger Property="HasNestedContent" Value="True">
    			<Setter Property="Visibility" TargetName="PART_NestedContentSite" Value="Visible"/>
    			<Setter Property="Background" TargetName="baseGrid" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
    		</Trigger>
    		<Trigger Property="HasNestedContent" Value="False">
    			<Setter Property="Visibility" TargetName="PART_NestedContentSite" Value="Collapsed"/>
    		</Trigger>
    		<MultiDataTrigger>
    			<MultiDataTrigger.Conditions>
    				<Condition Binding="{Binding IsSpecialRecord}" Value="true"/>
    				<Condition Binding="{Binding IsFixedOnTop, RelativeSource={RelativeSource Self}}" Value="true"/>
    			</MultiDataTrigger.Conditions>
    			<Setter Property="Visibility" TargetName="addRowFooter" Value="Visible"/>
    		</MultiDataTrigger>
    		<MultiDataTrigger>
    			<MultiDataTrigger.Conditions>
    				<Condition Binding="{Binding IsSpecialRecord}" Value="true"/>
    				<Condition Binding="{Binding IsFixedOnBottom, RelativeSource={RelativeSource Self}}" Value="true"/>
    			</MultiDataTrigger.Conditions>
    			<Setter Property="Visibility" TargetName="addRowFooter" Value="Visible"/>
    			<Setter Property="BorderThickness" TargetName="addRowFooter" Value="0,1,0,0"/>
    		</MultiDataTrigger>
    		<Trigger Property="HasSeparatorBefore" Value="True">
    			<Setter Property="Visibility" TargetName="RecordSeparator" Value="Visible"/>
    		</Trigger>
    		<MultiTrigger>
    			<MultiTrigger.Conditions>
    				<Condition Property="HasSeparatorAfter" Value="True"/>
    				<Condition Property="Orientation" Value="Vertical"/>
    			</MultiTrigger.Conditions>
    			<Setter Property="Visibility" TargetName="RecordSeparator" Value="Visible"/>
    			<Setter Property="Grid.Row" TargetName="RecordSeparator" Value="4"/>
    		</MultiTrigger>
    		<MultiTrigger>
    			<MultiTrigger.Conditions>
    				<Condition Property="HasSeparatorAfter" Value="True"/>
    				<Condition Property="Orientation" Value="Horizontal"/>
    			</MultiTrigger.Conditions>
    			<Setter Property="Visibility" TargetName="RecordSeparator" Value="Visible"/>
    			<Setter Property="Grid.Column" TargetName="RecordSeparator" Value="4"/>
    			<Setter Property="Grid.ColumnSpan" TargetName="RecordSeparator" Value="1"/>
    			<Setter Property="Grid.Row" TargetName="RecordSeparator" Value="1"/>
    			<Setter Property="Grid.RowSpan" TargetName="RecordSeparator" Value="6"/>
    		</MultiTrigger>
    		<MultiTrigger>
    			<MultiTrigger.Conditions>
    				<Condition Property="HasSeparatorBefore" Value="True"/>
    				<Condition Property="Orientation" Value="Horizontal"/>
    			</MultiTrigger.Conditions>
    			<Setter Property="Grid.Column" TargetName="RecordSeparator" Value="2"/>
    			<Setter Property="Grid.ColumnSpan" TargetName="RecordSeparator" Value="1"/>
    			<Setter Property="Grid.Row" TargetName="RecordSeparator" Value="1"/>
    			<Setter Property="Grid.RowSpan" TargetName="RecordSeparator" Value="6"/>
    		</MultiTrigger>
    		<Trigger Property="IsOpacityReduced" Value="True">
    			<Setter Property="Opacity" TargetName="PART_RecordContentSite" Value="0.35"/>
    		</Trigger>
    		<MultiDataTrigger>
    			<MultiDataTrigger.Conditions>
    				<Condition Binding="{Binding FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent"/>
    				<Condition Binding="{Binding Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
    			</MultiDataTrigger.Conditions>
    			<Setter Property="Grid.Row" TargetName="PART_NestedContentSite" Value="0"/>
    		</MultiDataTrigger>
    		<MultiDataTrigger>
    			<MultiDataTrigger.Conditions>
    				<Condition Binding="{Binding FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent"/>
    				<Condition Binding="{Binding Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal"/>
    			</MultiDataTrigger.Conditions>
    			<Setter Property="Grid.Column" TargetName="PART_NestedContentSite" Value="0"/>
    		</MultiDataTrigger>
    		<MultiDataTrigger>
    			<MultiDataTrigger.Conditions>
    				<Condition Binding="{Binding FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached"/>
    				<Condition Binding="{Binding Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
    			</MultiDataTrigger.Conditions>
    			<Setter Property="Grid.Row" TargetName="PART_NestedContentSite" Value="0"/>
    		</MultiDataTrigger>
    		<MultiDataTrigger>
    			<MultiDataTrigger.Conditions>
    				<Condition Binding="{Binding FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached"/>
    				<Condition Binding="{Binding Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal"/>
    			</MultiDataTrigger.Conditions>
    			<Setter Property="Grid.Column" TargetName="PART_NestedContentSite" Value="0"/>
    		</MultiDataTrigger>
    	</ControlTemplate.Triggers>
    </ControlTemplate>

   

    <!-- _________________________ LabelContent Style______________________________________ -->
    <Style x:Key="LabelContentStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Padding" Value="10,3,10,3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ContentPresenter
						Margin="{TemplateBinding Padding}"
						Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
						ContentTemplate="{TemplateBinding ContentTemplate}"
						ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- _________________________ GroupByRecordPresenter ______________________________________ -->
    <Style TargetType="{x:Type igDP:GroupByRecordPresenter}">
        <!--<EventSetter Event="Loaded" Handler="EventGroupByRecordLoaded"/>-->
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Margin" Value="0,0,0,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:GroupByRecordPresenter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="sbDisplayNested">
                            <DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="ncpVisual"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="HoldEnd">
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:0.75"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpVisual" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="00:00:00"/>
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="00:00:0.75"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpMask" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="00:00:00"/>
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="00:00:0.75"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="sbHideNested">
                            <DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="NestedContentPresenter"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="HoldEnd">
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:00.15"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="row0" Height="Auto"/>
                            <RowDefinition x:Name="row1" Height="Auto"/>
                            <RowDefinition x:Name="row2" Height="*"/>
                        </Grid.RowDefinitions>
                        <!-- Row for nested content -->
                        <!-- Expansion Checkbox -->
                        <!-- AS 1/27/09 NA 2009 Vol 1 - Set ZIndex and RenderTransform for fixed fields -->
                        <!-- AS 6/3/09 NA 2009 Vol 2 - Added Command(Parameter) & ToggleMode to support undo/redo -->
                        <igDP:ExpansionIndicator x:Name="ExpansionIndicator"
                                                      RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                                      Panel.ZIndex="1"
 							                          Grid.Row="1"
                                                      Visibility="{TemplateBinding ExpansionIndicatorVisibility}"
                                                      Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}"
                                                      CommandParameter="{TemplateBinding Record}"
                                                      ToggleMode="Manual"
                                                      IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>

                        <!-- JJD 10/10/12 - TFS123036 
								Added HeaderContentBackground so that the header area would span the entire width of the GroupByPresenter -->
                        <Rectangle 
							x:Name="HeaderContentBackground"
								Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}"
								Grid.Row="0"
								Grid.Column="0"
								Grid.ColumnSpan="2"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
							/>
                        <!-- JJD 6/4/09 - TFS17060 - Added Header site to support HeaderPlacementInGroupBy 'OnTop' in reporting -->
                        <ContentPresenter
								x:Name="PART_HeaderContentSite"
								Grid.Row="0"
								Grid.Column="1"
								Content="{TemplateBinding HeaderContent}"
								Visibility="{Binding Path=HasHeaderContent, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource TemplatedParent}}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                        <!-- Record content site -->
                        <!-- AS 1/27/09 NA 2009 Vol 1 - Set RenderTransform for fixed fields -->
                        <Grid
							x:Name="PART_RecordContentSite"
                            RenderTransform="{TemplateBinding FixedNearElementTransform}"
							Margin="0"
							Grid.Row="1"
							Grid.Column="1"
							Visibility="Collapsed">
                            <!-- Background Bar -->
                            <Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								RenderTransformOrigin="0.5,0.5"
								CornerRadius="0"
								SnapsToDevicePixels="True"
								Background="{StaticResource BaseDarkGray}">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle
										Stroke="{StaticResource BaseLightGray}"
										StrokeThickness="0"
										RadiusX="0"
										RadiusY="0"
										Fill="Transparent"/>
                                    <Rectangle
										Margin="1"
										Stroke="#00FFFFFF"
										StrokeThickness="0"
										RadiusX="0"
										RadiusY="0"
										Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <!-- End Added 8/1/2006 GH -->
                            <!-- End Background Bar -->
                            <Border
								x:Name="highlight"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								CornerRadius="0"
								Background="{StaticResource BaseLightGray}">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle
										Stroke="{StaticResource BaseLightGray}"
										StrokeThickness="0"
										RadiusX="0"
										RadiusY="0"
										Fill="Transparent"/>
                                    <Rectangle
										Margin="1"
										Stroke="#00FFFFFF"
										StrokeThickness="0"
										RadiusX="0"
										RadiusY="0"
										Fill="Transparent"/>
                                </Grid>
                            </Border>

                            <StackPanel Orientation="Horizontal">
                                <ContentControl
									Style="{StaticResource LabelContentStyle}"
									Content="{Binding Path=Description, RelativeSource={RelativeSource TemplatedParent}}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>

                                <igDP:GroupBySummariesPresenter
                                                    RenderTransform="{TemplateBinding ScrollableElementTransform}"
									                HorizontalAlignment="Left"
									                x:Name="GroupBySummariesPresenter"
									                Visibility="Collapsed"
									                GroupByRecord="{TemplateBinding Record}"/>
                            </StackPanel>

                        </Grid>
                        <!-- Nested Content -->
                        <Grid
							x:Name="PART_NestedContentSite"
							Grid.Row="2"
							Grid.Column="1"
							Visibility="Collapsed">
                            <!-- AS 2/13/09 TFS13978 - Set RenderTransform for fixed fields -->
                            <Border
                                CornerRadius="0,0,3,3"
                                BorderBrush="#44102975"
                                BorderThickness="1"
                                RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                >
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Color="#FFFFFFFF" Offset="0.25"/>
                                        <GradientStop Color="#FFEEEEEE" Offset="1.2"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <!-- AS 3/25/09 TFS15801 -->
                                <ContentControl
                                    RenderTransform="{TemplateBinding ScrollableElementTransform}"
                                    x:Name="NestedContentPresenter"
                                    Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}"
                                    Margin="0,0,0,5"/>
                            </Border>
                            <!-- AS 11/14/07 BR26035
								The namescope was broken because the recordlistcontrol was not in the logical tree. We
								need to use a ContentControl instead so the content	is made a logical child. -->
                            <!-- AS 3/25/09 TFS15801
                                This should be nested within the Border above.
							<ContentControl x:Name="NestedContentPresenter" Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,0,5"/>-->
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- AS 11/8/11 TFS88111 -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.AutoFitToWidth, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.ColumnSpan" Value="2"/>
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.ColumnSpan" Value="2"/>
                            <Setter TargetName="GroupBySummariesPresenter" Property="HorizontalAlignment" Value="Stretch"/>
                        </MultiDataTrigger>

                        <Trigger Property="ShouldDisplayGroupByRecordContent" Value="true">
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ShouldDisplayGroupByRecordContent" Value="false">
                            <Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <!-- SSP 4/3/08 - Summaries Functionality -->
                        <Trigger Property="ShouldDisplaySummaryCells" Value="true">
                            <Setter TargetName="GroupBySummariesPresenter" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical"/>
                                <Condition Property="ShouldDisplayGroupByRecordContent" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="2"/>
                        </MultiTrigger>

                        <!-- JJD 1/20/09 - In horizontal mode we need to leave the height on the content area visible -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Horizontal"/>
                                <Condition Property="ShouldDisplayGroupByRecordContent" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>

                        <Trigger Property="HasNestedContent" Value="true">
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
                        </Trigger>

                        <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="1" />
                            <!-- JJD 10/10/12 - TFS123036 
																Added HeaderContentBackground so that the header area would span the entire width of the GroupByPresenter -->
                            <Setter TargetName="HeaderContentBackground" Property="Grid.Row" Value="1" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="2" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="2" />
                            <Setter TargetName="row0" Property="Height" Value="*" />
                            <Setter TargetName="row2" Property="Height" Value="Auto" />
                        </MultiDataTrigger>

                        <!-- MD 8/3/10 - TFS35609 -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="1" />
                            <!-- JJD 10/10/12 - TFS123036 
																Added HeaderContentBackground so that the header area would span the entire width of the GroupByPresenter -->
                            <Setter TargetName="HeaderContentBackground" Property="Grid.Row" Value="1" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="2" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="2" />
                            <Setter TargetName="row0" Property="Height" Value="*" />
                            <Setter TargetName="row2" Property="Height" Value="Auto" />
                        </MultiDataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TemplateCardView">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:GroupByRecordPresenter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="sbDisplayNested">
                            <DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="ncpVisual"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="HoldEnd">
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:0.75"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpVisual" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="00:00:00"/>
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="00:00:0.75"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpMask" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="00:00:00"/>
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="00:00:0.75"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="sbHideNested">
                            <DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="NestedContentPresenter"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="HoldEnd">
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:00.15"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" MinWidth="20"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <!-- Row for nested content -->
                        <!-- Record content site -->
                        <Grid
							x:Name="PART_RecordContentSite"
							Margin="0"
							Grid.Row="1"
							Grid.Column="0"
							Visibility="Collapsed">
                            <!-- Background Bar -->
                            <Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								RenderTransformOrigin="0.5,0.5"
								CornerRadius="0"
								SnapsToDevicePixels="True"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle
										Stroke="{StaticResource BaseDarkGray}"
										StrokeThickness="0"
										RadiusX="0"
										RadiusY="0"
										Fill="Transparent"/>
                                    <Rectangle
										Margin="1"
										Stroke="#00FFFFFF"
										StrokeThickness="0"
										RadiusX="0"
										RadiusY="0"
										Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <!-- End Background Bar -->
                            <Border
								x:Name="highlight"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								CornerRadius="0"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelHighlight}}">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle
										Stroke="{StaticResource BaseLightGray}"
										StrokeThickness="0"
										RadiusX="0"
										RadiusY="0"
										Fill="Transparent"/>
                                    <Rectangle
										Margin="1"
										Stroke="#00FFFFFF"
										StrokeThickness="0"
										RadiusX="0"
										RadiusY="0"
										Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <!-- End Add 8/1/2006 GH-->
                            <!-- Label Text -->
                            <StackPanel Orientation="Vertical">
                                <ContentControl
									Style="{StaticResource LabelContentStyle}"
									Content="{Binding Path=Description, RelativeSource={RelativeSource TemplatedParent}}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                                <!-- SSP 4/3/08 - Summaries Functionality -->
                                <igDP:GroupBySummariesPresenter
									Grid.Row="1"
									HorizontalAlignment="Left"
									x:Name="GroupBySummariesPresenter"
									Visibility="Collapsed"
									GroupByRecord="{TemplateBinding Record}"/>
                            </StackPanel>
                        </Grid>
                        <!-- Nested Content -->
                        <Grid
							x:Name="PART_NestedContentSite"
							Grid.Row="1"
							Grid.Column="0"
							Visibility="Collapsed">
                            <!--<igWindows:NestedContentBackground/>-->
                            <Border CornerRadius="0,0,3,3" BorderBrush="#44102975" BorderThickness="1">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Color="#FFFFFFFF" Offset="0.25"/>
                                        <GradientStop Color="#FFEEEEEE" Offset="1.2"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <!-- AS 3/25/09 TFS15801 -->
                                <ContentControl x:Name="NestedContentPresenter" Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,0,5"/>
                            </Border>
                            <!-- AS 11/14/07 BR26035
								The namescope was broken because the recordlistcontrol was not in the logical tree. We
								need to use a ContentControl instead so the content	is made a logical child. -->
                            <!-- AS 3/25/09 TFS15801
                                This should be nested within the Border above.
                            <ContentControl x:Name="NestedContentPresenter" Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,0,5"/>-->
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ShouldDisplayGroupByRecordContent" Value="true">
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <!--<Trigger Property="ShouldDisplayGroupByRecordContent" Value="false"/>-->
                        <!-- SSP 4/3/08 - Summaries Functionality -->
                        <Trigger Property="ShouldDisplaySummaryCells" Value="true">
                            <Setter TargetName="GroupBySummariesPresenter" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="HasNestedContent" Value="true">
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!-- _________________________ RecordScrollTip __________________________________________ -->
    <Style TargetType="{x:Type igDP:RecordScrollTip}">
        <!-- BasedOn="{StaticResource {x:Type ToolTip}}"> -->
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:RecordScrollTip}">
                    <Grid SnapsToDevicePixels="True">
                        <Border
							x:Name="outerBorder"
							Opacity="1"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							CornerRadius="0"
							BorderBrush="#ff83a4c4"
                            Background="{StaticResource BaseLightBackground}"
							BorderThickness="1">
                        </Border>
                        <Border
							x:Name="innerBorder"
							Opacity="1"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							Margin="1,1,1,1"
							CornerRadius="0"
							BorderBrush="#00ffffff"
							BorderThickness="1"/>
                        <ContentPresenter Margin="5,5,5,5"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Source={x:Static interop:BrowserInteropHelper.IsBrowserHosted}}" Value="True">
                            <Setter Property="CornerRadius" TargetName="outerBorder" Value="0"/>
                            <Setter Property="CornerRadius" TargetName="innerBorder" Value="0"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TreeView ItemsSource="{Binding}">
                        <TreeView.Style>
                            <Style TargetType="{x:Type TreeView}">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="BorderThickness" Value="0"/>
                                <Setter Property="VerticalContentAlignment" Value="Top"/>
                                <Setter Property="Foreground" Value="#767676"/>
                            </Style>
                        </TreeView.Style>
                        <TreeView.ItemContainerStyle>
                            <Style TargetType="{x:Type TreeViewItem}">
                                <Setter Property="IsExpanded" Value="true"/>
                                <Setter Property="Focusable" Value="false"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <StackPanel Orientation="Vertical">
                                                <ContentPresenter
													ContentSource="Header"
													HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
													x:Name="PART_Header"
													ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
													Content="{TemplateBinding HeaderedContentControl.Header}"
													Grid.ColumnSpan="2"/>
                                                <StackPanel Orientation="Horizontal" x:Name="ItemsHostPanel">
                                                    <FrameworkElement MinWidth="10" Height="0"/>
                                                    <ItemsPresenter
														x:Name="ItemsHost"
														Grid.Column="1"
														Grid.Row="1"
														Grid.ColumnSpan="2"/>
                                                </StackPanel>
                                            </StackPanel>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </TreeView.ItemContainerStyle>
                    </TreeView>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--This is the style for the data error icon itself. Here you can change the appearance of the
                error icon.-->
    <Style x:Key="{x:Static Custom:DataPresenterBase.DataErrorIconStyleKey}"
                       TargetType="{x:Type Control}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Grid>
                        <Path x:Name="textBlock" 
                              Data="M3.2813087,7.0727873 L4.5391436,7.0727873 L4.3295045,9.8436708 L6.7266827,8.9413109 L7.1095018,10.080654 L4.6120615,10.59108 L6.343863,12.805964 L5.3412414,13.498684 L3.9193408,11.083276 L2.4792109,13.498684 L1.4765888,12.805964 L3.2083907,10.59108 L0.69272071,10.080654 L1.1028843,8.9413109 L3.4909477,9.8436708 z" Fill="#FFDE2B29" HorizontalAlignment="Center" Height="6"  RenderTransformOrigin="0.5,0.5" Stretch="Fill" VerticalAlignment="Center" Width="6" Stroke="#FFDE2B29" StrokeThickness="0.25">
                        </Path>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- _________________________ DataRecordCellArea +++_________________________________________ -->
    <Style  TargetType="{x:Type Custom:DataRecordCellArea}">
        <Setter Property="BorderBrush" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="BorderThickness" Value="1,0,1,1"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="BackgroundHover" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="BorderHoverBrush" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="BackgroundActive" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="BorderActiveBrush" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="BackgroundAlternate" Value="#00FFFFFF"/>
        <Setter Property="BackgroundSelected" Value="{StaticResource BaseLightGray}"/>
        <Setter Property="BorderSelectedBrush" Value="{StaticResource BaseLightGray}"/>
        <Setter Property="IsSelected" Value="{Binding DataItem.IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Style.Triggers>
            <Trigger Property="HasDataError"
                                 Value="true">
                <Setter Property="Background"
                                    Value="#ffefefd6" />
                <Setter Property="ToolTip"
                                    Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=DataError}" />
            </Trigger>
        </Style.Triggers>
    </Style>



   




    <!-- _________________________FieldGroupLabelPresenter +++_________________________________________ -->
    <Style x:Key="FieldGroupLabelPresenter"  TargetType="{x:Type igDP:FieldGroupLabelPresenter}">

        <Setter Property="Background" Value="{StaticResource BaseLightControlBackground}" />
        <Setter Property="InnerBorderBrush" Value="Transparent" />
        <Setter Property="OuterBorderBrush" Value="{StaticResource BaseDarkGray}" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelForeground}}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=FieldGroup.LabelTextAlignmentResolved, Converter={StaticResource textAlignmentToHorizontalAlignmentConverter}, RelativeSource={x:Static RelativeSource.Self}}" />
        <!--SSP 7/6/09 - Field Chooser - Added ToolTip property on the field.-->
        <Setter Property="ToolTip" Value="{Binding Path=FieldGroup.ToolTip, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="Padding" Value="7,4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:FieldGroupLabelPresenter}">
                    <Grid x:Name="labelCntr" Background="#00000000">
                        <!-- Background Bar -->
                        <Border
							Width="Auto"
							Height="Auto"
							RenderTransformOrigin="0.5,0.5"
							CornerRadius="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelCornerRadiusKey}}"
							SnapsToDevicePixels="True"
							Background="{TemplateBinding Background}"
							x:Name="background"/>
                        <Border
							BorderBrush="{TemplateBinding OuterBorderBrush}"
							BorderThickness="0,0,1,1"
							CornerRadius="0"
							Background="Transparent"
							Margin="0,0,0,0"
							x:Name="lineOuter"
							Width="Auto"
							Height="Auto"
							SnapsToDevicePixels="True"/>
                        <Border
							BorderBrush="{TemplateBinding InnerBorderBrush}"
							BorderThickness="1"
							CornerRadius="0"
							Background="Transparent"
							Margin="0,0,0,0"
							x:Name="lineInner"
							Width="Auto"
							Height="Auto"
							SnapsToDevicePixels="True"/>
                        <Grid
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							x:Name="labelAndFixedButton">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <igWindows:ExpansionIndicator
								x:Name="ExpansionIndicator"
								Grid.Column="0"
								Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
                                Command="{x:Static igDP:DataPresenterCommands.ToggleFieldGroupIsCollapsed}"
                                CommandParameter="{TemplateBinding FieldGroup}"
                                ToggleMode="Manual"
								IsChecked="{Binding Path=FieldGroup.IsCollapsed, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}"/>
                            <ContentPresenter
								x:Name="LabelContent"
								Focusable="False"
								Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
								ContentTemplate="{TemplateBinding ContentTemplate}"
								ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
								Grid.Column="1"
								VerticalAlignment="Center"/>
                            <!-- JM 1/14/09 - Fixed Fields Functionality -->
                            <igDP:FixedFieldButton
								x:Name="FixedButton"
								Field="{TemplateBinding FieldGroup}"
								Visibility="{TemplateBinding FixedButtonVisibility}"
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								Width="Auto"
								Grid.Column="2"
								Margin="2,0,2,0"
								Opacity="0.7"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!--SSP 6/23/09 - NAS9.2 Field Chooser
							If the label is in a field chooser then hide the sort indicator, filter button and
							summary button. Note that the fixed button is collapsed in code in label presenter
							by coercing the FixedButtonVisibility property to be Collapsed.-->
                        <Trigger Property="IsInFieldChooser" Value="true">
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="labelCntr" Property="Margin" Value="0,0,0,0"/>
                        </Trigger>

                        <Trigger Property="IsDragIndicator" Value="True">
                            <Setter Property="Padding" Value="7,4"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>








    <!-- _________________________ RecordFilterTreeItem [AS NA 11.2 Excel Style Filtering] _______________________________________ -->
    <!-- SSP 3/27/13 TFS135571-->
    <DataTemplate x:Key="stringTemplate" DataType="{x:Type System:String}">
        <TextBlock Text="{Binding}" />
    </DataTemplate>

    <HierarchicalDataTemplate DataType="{x:Type igDP:RecordFilterTreeItem}" ItemsSource="{Binding Items}">
        <!-- SSP 3/27/13 TFS135571 - Added ContentTemplate setter. -->
        <CheckBox Background="{Binding Path=Background, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" 
                  Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" 
                  Focusable="False" IsChecked="{Binding IsChecked, Mode=TwoWay}" Content="{Binding DisplayText}" 
                  ContentTemplate="{StaticResource stringTemplate}"
              />
    </HierarchicalDataTemplate>


    <Style x:Key="filterTreeScopesComboToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border x:Name="outerBorder"
							BorderBrush="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnNormalOuterBorderFillKey}}"
							BorderThickness="1"
							Background="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnNormalCenterFillKey}}">
                        <Border x:Name="innerBorder"
								BorderBrush="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnNormalInnerBorderFillKey}}"
								BorderThickness="1"
								Padding="{TemplateBinding Padding}">
                            <Path x:Name="glyph"
								  HorizontalAlignment="Center"
								  VerticalAlignment="Center"
								  Fill="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnGlyphNormalForegroundFillKey}}"
								  Stretch="None"
								  Data="M0,0 L7,0 3.5,4z" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnPressedOuterBorderFillKey}}"/>
                            <Setter Property="Background" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnPressedCenterFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="innerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnPressedInnerBorderFillKey}}"/>
                            <Setter Property="Fill" TargetName="glyph" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnGlyphHottrackForegroundFillKey}}"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="innerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackInnerBorderFillKey}}"/>
                            <Setter Property="Background" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackCenterFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackOuterBorderFillKey}}"/>
                            <Setter Property="Fill" TargetName="glyph" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnGlyphHottrackForegroundFillKey}}"/>
                        </MultiTrigger>

                        <!-- when not dropped down but the combo has the keyboard focus the button should appear as it does when hottracked -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="innerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackInnerBorderFillKey}}"/>
                            <Setter Property="Background" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackCenterFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackOuterBorderFillKey}}"/>
                            <Setter Property="Fill" TargetName="glyph" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnGlyphHottrackForegroundFillKey}}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="filterTreeScopesComboStyle" TargetType="ComboBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid Background="Transparent">
                        <ToggleButton
							x:Name="PART_DropDownButton"
							Grid.ColumnSpan="3"
							Style="{StaticResource filterTreeScopesComboToggleButtonStyle}"
							IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							/>
                        <Popup
							x:Name="PART_Popup"
							AllowsTransparency="True"
							Placement="Bottom"
							IsOpen="{TemplateBinding IsDropDownOpen}"
							Focusable="False"
							PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
							MaxHeight="{TemplateBinding MaxDropDownHeight}">
                            <Border
								x:Name="Shdw"
								Background="Transparent">
                                <Border Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}">
                                    <ScrollViewer x:Name="ScrollViewer">
                                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </Border>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
                            <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shdw" Property="Background" Value="#71000000" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ RecordFilterTreeControl [AS NA 11.2 Excel Style Filtering] _______________________________________ -->
    <Style TargetType="igDP:RecordFilterTreeControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igDP:RecordFilterTreeControl">
                    <Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}"
						SnapsToDevicePixels="True">
                        <igWindows:CardPanel>
                            <Grid x:Name="gridContent" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Border
									Grid.Row="0"
									BorderThickness="1"
									BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.RecordFilterTreeSearchBorderBrushKey}}"
									Margin="0,1,0,3">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition />
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <TextBox
											x:Name="PART_SearchTextBox"
											Grid.Column="0"
											BorderThickness="0"
											Text="{Binding Path=SearchText, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
											/>
                                        <TextBlock
											x:Name="txtSearchPrompt"
											Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
											Grid.Column="0"
											Margin="2,0"
											Text="{TemplateBinding SearchTextPrompt}"
											Visibility="Collapsed"
											IsHitTestVisible="False" />
                                        <Grid Grid.Column="1">
                                            <Rectangle x:Name="MagnifyingGlass"
												Margin="2,2,1,2" Fill="{StaticResource SearchActionBrush}"  Stroke="{x:Null}"  Width="20" Height="20" VerticalAlignment="Center" HorizontalAlignment="Center"  SnapsToDevicePixels="True"/>

                                            <!--<Image
												x:Name="MagnifyingGlass"
												Margin="2,2,1,2"
												Stretch="None"
												HorizontalAlignment="Center"
												VerticalAlignment="Center"
												Source="..\..\Images\MagnifyingGlass.png" />-->
                                            <Button
												x:Name="btnClearSearchText"
												Visibility="Hidden"
                                                Style="{StaticResource DeleteFieldButtonStyle}"
												Command="{Binding ClearSearchTextCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </Grid>
                                        <ComboBox
											x:Name="PART_SearchScopeCombo"
											Grid.Column="2"
											IsEditable="False"
											Style="{StaticResource filterTreeScopesComboStyle}"
											SelectedValuePath="Value"
											SelectedValue="{Binding Path=SearchScope, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
											ItemsSource="{Binding Path=AvailableSearchScopes, RelativeSource={RelativeSource TemplatedParent}}"
											Visibility="Collapsed"
											/>
                                    </Grid>
                                </Border>
                                <TreeView
									Grid.Row="1"
									x:Name="PART_Tree"
									ItemsSource="{Binding Nodes, RelativeSource={RelativeSource TemplatedParent}}"
									BorderThickness="1"
									BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemSeparatorBrushKey}}"
									/>
                                <TextBlock
									x:Name="txtNoMatch"
									Grid.Row="1"
									Text="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.RecordFilterTreeNoSearchMatches}}"
									Visibility="Collapsed"
									TextAlignment="Center"
									VerticalAlignment="Center"
									TextWrapping="Wrap" />
                                <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,15,0,3">
                                    <Button Style="{StaticResource BaseLightButtonStyle}" Tag="{StaticResource ApplyBrush}"  Content="Применить" MinWidth="73" Margin="0,0,11,0" Command="{Binding UpdateRecordFilterCommand, RelativeSource={RelativeSource TemplatedParent}}" MinHeight="0" Padding="2"/>
                                    <Button Style="{StaticResource BaseLightButtonStyle}" Tag="{StaticResource UnselectActionBrush}"  Content="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.CustomFilterSelectionControlCancelButtonLabel}}" MinWidth="73" Command="{Binding CancelChangesCommand, RelativeSource={RelativeSource TemplatedParent}}" MinHeight="0" Padding="2"/>
                                </StackPanel>
                            </Grid>
                            <ContentControl x:Name="LoadingIndicator" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </igWindows:CardPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsLoadingItems" Value="True">
                            <Setter TargetName="LoadingIndicator" Property="ContentTemplate" Value="{StaticResource BaseFilterDropDownLoadingTemplate}" />
                            <Setter TargetName="LoadingIndicator" Property="Visibility" Value="Visible" />
                            <Setter TargetName="gridContent" Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="HasSearchText" Value="True">
                            <Setter TargetName="btnClearSearchText" Property="Visibility" Value="Visible" />
                            <Setter TargetName="MagnifyingGlass" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="HasEmptySearchResults" Value="True">
                            <Setter TargetName="PART_Tree" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="txtNoMatch" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="HasMultipleSearchScopes" Value="True">
                            <Setter TargetName="PART_SearchScopeCombo" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_SearchTextBox" Property="IsFocused" Value="False" />
                                <Condition Property="HasSearchText" Value="False" />
                            </MultiTrigger.Conditions>
                            <!-- Show the watermark when there is no search text and the textbox isn't focused -->
                            <Setter TargetName="txtSearchPrompt" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


















</ResourceDictionary>