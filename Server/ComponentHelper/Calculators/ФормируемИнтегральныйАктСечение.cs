using FlexCel.Core;
using Proryv.AskueARM2.Server.DBAccess.Internal;
using Proryv.AskueARM2.Server.DBAccess.Internal.TClasses;
using Proryv.AskueARM2.Server.DBAccess.Public.Utils;
using Proryv.AskueARM2.Server.VisualCompHelpers.Calculators;
using Proryv.AskueARM2.Server.VisualCompHelpers.Data;
using Proryv.AskueARM2.Server.VisualCompHelpers.Section.Data;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace Proryv.AskueARM2.Server.VisualCompHelpers
{
    public partial class ExcelReportFreeHierarchyAdapter
    {
        public MemoryStream ФормируемИнтегральныйАктСечение(int sectionId)
        {
            var integralAct = _integralActSectionList.Result_Values.FirstOrDefault(r => r.SectionId == sectionId);
            if (integralAct == null) return null;

            var channelNames = new Dictionary<byte, string>
            {
                { 1, "ПРИЕМ"},
                { 2, "ОТДАЧА"}
            };

            var xls = InitIntegralAct(new Data.XlsFileParamIntegralAct
            {
                DoublePrecisionProfile = _doublePrecisionProfile,
                DTStart = _dtStart,
                DTEnd = _dtEnd,
                IsInterval = _isInterval,
                TimeZoneId = _timeZoneId,
                UnitDigit = DBAccess.Internal.EnumUnitDigit.Kilo,
                ChannelNames = channelNames,
            });

            if (integralAct.SectionName != null)
            {
                xls.SheetName = ExcelAutoGeneratedByAPIMate.removeBadChar(integralAct.SectionName.Substring(0, integralAct.SectionName.Length > 20 ? 20 : integralAct.SectionName.Length)) + "{" + integralAct.SectionId + "}";
            }

            var analiser = new ExcelAnaliser(xls, xls.StartCol + 9, xls.StartCol + 10, xls.StartCol + xls.Col + 1,
                (double)_unitDigit / (double)_unitDigitIntegrals, IsAnalisIntegral, AdapterType, _errors, _dts == null ? 1 : _dts.Count);

            bool showAnnotateOvRepl = false;

            for (byte channel = 1; channel <= 2; channel++) // chanel - 1 : Прием; 2 : Отдача
            {
                byte resultChannel = channel;
                if (_invertChannels)
                {
                    switch (channel)
                    {
                        case 1:
                            resultChannel = 2;
                            break;
                        case 2:
                            resultChannel = 1;
                            break;
                        case 3:
                            resultChannel = 4;
                            break;
                        case 4:
                            resultChannel = 3;
                            break;
                    }
                }

                var strPeretok = channelNames[channel];
                var valPeretok = 0.0;

                //fLeftAlign == xls.BoldLeftFormat

                xls.SetCellValue(xls.Row, xls.StartCol + 1, strPeretok, xls.BoldLeftFormatThin);
                xls.Row++;


                if (integralAct.Result_PS_Values != null && integralAct.Result_PS_Values.Count > 0)
                {
                    using (var tpRowBuilder = new IntegralActTpRowBuilder(xls, _integralActSectionList,
                        integralAct.ReplaceActUndercountOvs,
                        resultChannel, channel, analiser, _footerType, _invertChannels, _isInterval))
                    {
                        tpRowBuilder.CalculatePeretok(integralAct.Result_PS_Values, ref valPeretok);

                        tpRowBuilder.CalculateDirectConsumers(integralAct.Result_PS_Values_ByDirectConsumer, ref valPeretok);
                    }
                }

                #region ВСЕГО по перетоку

                xls.SetCellValue(xls.Row, xls.StartCol + 1, "ВСЕГО " + strPeretok, xls.BoldLeftFormatThin);
                xls.MergeCells(xls.Row, xls.StartCol + 1, xls.Row, 8);
                xls.SetCellFormat(xls.Row, xls.StartCol + 1, xls.Row, 8, xls.BoldLeftFormatThin);

                //Вывод формулы по перетоку
                analiser.WriteFormula(channel.ToString(), xls.Row);

                #endregion

                //Добавляем для сальдо
                analiser.AddToFormula("saldo", xls.Row, isMinus: channel == 2);

                xls.Row++;
            }

            //--------------------------------

            //вывод подитога по запрошеной подгруппе
            if (!analiser.WriteFooters(ref xls.Row))
            {
                xls.Row++;
            }

            //Вывод сальдо

            xls.SetCellValue(xls.Row, xls.StartCol + 1, "ВСЕГО САЛЬДО", xls.BoldLeftFormatThin);
            xls.MergeCells(xls.Row, xls.StartCol + 1, xls.Row, 8);
            xls.SetCellFormat(xls.Row, xls.StartCol + 1, xls.Row, 8, xls.BoldLeftFormatThin);

            analiser.WriteFormula("saldo", xls.Row);


            if (analiser != null)
            {
                analiser.Dispose();
            }

            xls.WriteAnnotate(showAnnotateOvRepl, _ovReplacedColor);

            string monthName = null;

            try
            {
                var ci = new System.Globalization.CultureInfo("ru-RU");
                if (ci != null)
                {
                    monthName = ci.DateTimeFormat.GetMonthName(_dtStart.Month).ToLower();
                }
            }
            catch
            {
            }

            if (string.IsNullOrEmpty(monthName)) monthName = _dtStart.ToString("MMMM").ToLower();

            xls.SetCellValue(1, xls.StartCol, "Интегральный акт учета ЭЭ по: " +
                                           (integralAct.SectionName ?? "") + " за " + monthName +
                                          " " + _dtStart.ToString("dd.MM.yyyy HH:mm") + "  -  " + _dtEnd.AddMinutes(30).ToString("dd.MM.yyyy HH:mm") + "", xls.CenterBoldRow);
            xls.SetRowHeight(1, 600);
            xls.MergeCells(1, xls.StartCol, 1, xls.ColCount);

            #region Код сечения

            var busRelation = _integralActSectionList.BusRelation;

            if (busRelation != enumBusRelation.None)
            {
                var busDescription = busRelation == enumBusRelation.PPI_Station ||
                                     busRelation == enumBusRelation.PSI_Station || _invertChannels
                    ? integralAct.ATSSubjORECOde + "-" + integralAct.ATSSectionCode
                    : integralAct.ATSSectionCode + "-" + integralAct.ATSSubjORECOde;
                xls.SetCellValue(2, xls.StartCol, busDescription, xls.CenterBoldThinFormat);
                xls.MergeCells(2, xls.StartCol, 2, xls.ColCount);
                //SetCellFontStyle(xls, 2, startCol, TFlxFontStyles.Bold);
            }

            int maxWidthCol = (int)(400 * FlxConsts.ColMult);
            int c = xls.GetColWidth(xls.StartCol + 1); // FlxConsts.ColMult;
            if (xls.GetColWidth(xls.StartCol + 1) > maxWidthCol)
            {
                xls.SetColWidth(xls.StartCol + 1, maxWidthCol);
                for (int i = xls.StartRow; i < xls.RowCount; i++)
                {
                    xls.SetCellWrapText(i, xls.StartCol + 1, true);
                }
            }

            #endregion

            bool isSignatured = false;

            #region Пытаемся подписать

            if (AdapterType == TExportExcelAdapterType.toXLSx)
            {
                try
                {
                    var sectionSignatures = DbHelper.GetSectionSignatures(sectionId, _dtStart, _dtEnd);

                    isSignatured = sectionSignatures != null && sectionSignatures.Count > 0;

                    xls.StartRow = ++xls.Row;
                    int i = 0;

                    //defaultFormat.Font.Style = TFlxFontStyles.Bold;
                    //defaultFormat.Font.Size20 = 13 * 17;
                    ////f.Font.Color = Color.Blue;
                    //defaultFormat.VAlignment = TVFlxAlignment.top;
                    //defaultFormat.HAlignment = THFlxAlignment.left;

                    foreach (TSection_Signatures signature in sectionSignatures)
                    {
                        xls.Row = xls.StartRow;

                        xls.SetCellValue(++xls.Row, i + xls.StartCol + 1, "СОГЛАСОВАНО", xls.LeftFormat);
                        xls.MergeCells(xls.Row, i + xls.StartCol + 1, xls.Row, i + xls.StartCol + 3);

                        xls.SetCellValue(++xls.Row, i + xls.StartCol + 1, signature.OrganizationName, xls.LeftFormat);
                        xls.MergeCells(xls.Row, i + xls.StartCol + 1, xls.Row, i + xls.StartCol + 3);

                        xls.SetCellValue(++xls.Row, i + xls.StartCol + 1, signature.PostName, xls.LeftFormat);
                        xls.SetCellWrapText(xls.Row, i + xls.StartCol + 1, true);
                        xls.MergeCells(xls.Row, i + xls.StartCol + 1, xls.Row, i + xls.StartCol + 3);

                        xls.Row++;

                        xls.SetCellValue(++xls.Row, i + xls.StartCol + 1, "______________________ " + signature.FIO, xls.LeftFormat);
                        xls.MergeCells(xls.Row, i + xls.StartCol + 1, xls.Row, i + xls.StartCol + 3);

                        xls.SetCellValue(++xls.Row, i + xls.StartCol + 1, "\"___\"_________________ " + _dtEnd.Year.ToString() + "г.", xls.LeftFormat);
                        xls.MergeCells(xls.Row, i + xls.StartCol + 1, xls.Row, i + xls.StartCol + 3);

                        xls.AutofitRow(xls.StartRow + 1, xls.StartRow + 6, true, true, (float)0.82);

                        i += 4;
                    }

                    xls.Row++;
                }
                catch
                {
                }

            }

            #endregion

            return Export(xls);
        }
    }
}
