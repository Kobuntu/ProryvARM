<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:ig="http://schemas.infragistics.com/xaml" xmlns:igPrim="http://schemas.infragistics.com/xaml/primitives" xmlns:System="clr-namespace:System;assembly=mscorlib" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/BrushResource.xaml"/>
    </ResourceDictionary.MergedDictionaries>


    <igPrim:ValueConverterGroup x:Key="boolToFontBold">
        <!-- if true sets FontWeight to Bold -->
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.SourceValue>
                <System:Boolean>True</System:Boolean>
            </igPrim:FixedValueConverter.SourceValue>
            <igPrim:FixedValueConverter.DestinationValue>
                <FontWeight>Bold</FontWeight>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>
        <!-- if false sets TextWrapping to Wrap -->
        <!--
		<igPrim:FixedValueConverter>
			<igPrim:FixedValueConverter.DestinationValue>
				<TextWrapping>Wrap</TextWrapping>
			</igPrim:FixedValueConverter.DestinationValue>
		</igPrim:FixedValueConverter>-->
    </igPrim:ValueConverterGroup>
    
    <igPrim:ValueConverterGroup x:Key="visibilityTo52Converter">
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.SourceValue>
                <Visibility>Visible</Visibility>
            </igPrim:FixedValueConverter.SourceValue>
            <igPrim:FixedValueConverter.DestinationValue>
                <System:Int32>52</System:Int32>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>

        <igPrim:FixedValueConverter DestinationValue="{x:Null}">
            <igPrim:FixedValueConverter.SourceValue>
                <Visibility>Collapsed</Visibility>
            </igPrim:FixedValueConverter.SourceValue>
        </igPrim:FixedValueConverter>

    </igPrim:ValueConverterGroup>


    <Style x:Key="BorderlessButtonStyle" TargetType="Button">
        <!--<Setter Property="OverridesDefaultStyle" Value="True" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent">
                        <ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TodayButton" TargetType="Button">
		<Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Background" Value="#FFffffff"/>
        <Setter Property="Foreground" Value="#ff006bc5"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="BackgroundAnimation">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="BackgroundAnimation">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement">
                                            <SplineDoubleKeyFrame KeyTime="0" Value=".55"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused"/>
                                <VisualState x:Name="Unfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Background" Background="White" Margin="-1">
                            <Grid Background="{TemplateBinding Background}" Margin="0">
                                <Rectangle x:Name="BackgroundGradient" Fill="#FFEBF3F9" StrokeThickness="0"/>
                            	<Border x:Name="BackgroundAnimation" Background="#FFCBE5FF" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Hidden"/>
                        <TextBlock HorizontalAlignment="Center" TextDecorations="Underline" Margin="0" TextWrapping="Wrap" Text="{Binding DataContext, ElementName=contentPresenter}" VerticalAlignment="Center"/>
                        <Rectangle x:Name="DisabledVisualElement" Fill="#FFFFFFFF" IsHitTestVisible="false" Opacity="0" RadiusY="3" RadiusX="3"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    
    
    
    
    
    <Style x:Key="CalendarItemBase"  TargetType="igPrim:CalendarItem">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="igPrim:CalendarItem">
                	
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused">
                                    <Storyboard Storyboard.TargetProperty="Visibility" Storyboard.TargetName="focusRect">
                                        <ObjectAnimationUsingKeyFrames>
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="InnerBorder">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unselected"/>
                                <VisualState x:Name="SelectedUnfocused"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="OuterBorder">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Active"/>
                                <VisualState x:Name="Inactive"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CalendarStates">
                                <VisualState x:Name="Day"/>
                                <VisualState x:Name="Month">

                                </VisualState>
                                <VisualState x:Name="Year"/>
                                <VisualState x:Name="Decade"/>
                                <VisualState x:Name="Century"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="InnerBorder"
                    		CornerRadius="0"
                    		BorderBrush="{StaticResource BaseDarkGray}"
                    		BorderThickness="1" Margin="1" Background="#FFCBE5FF" Opacity="0"/>
                    	<Border x:Name="OuterBorder"
                    		igPrim:XamlHelper.SnapsToDevicePixels="True"
                    		HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                    		VerticalAlignment="{TemplateBinding VerticalAlignment}"
                    		BorderThickness="{TemplateBinding BorderThickness}"
                    		BorderBrush="#FFA4C7EA"
                    		CornerRadius="0" Background="#FFEBF3F9" Opacity="0"/>
                    	<Rectangle x:Name="focusRect" Visibility="Collapsed" Stroke="#D0000000" StrokeThickness="1" StrokeDashArray="1 2" />
                    	<TextBlock x:Name="textBlock"
                    		Text="{TemplateBinding Content}"
                    		HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    		VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    		igPrim:XamlHelper.SnapsToDevicePixels="{TemplateBinding igPrim:XamlHelper.SnapsToDevicePixels}"
                    		Padding="5,2,5,2"
                    		FontStyle="Normal"
                    		FontSize="{StaticResource BaseFontSizeM}"
                    		FontWeight="{Binding IsHighlighted, Converter={StaticResource boolToFontBold}, RelativeSource={RelativeSource TemplatedParent}}"
                    		Margin="5,2" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="igPrim:CalendarItem" BasedOn="{StaticResource CalendarItemBase}">

        <!--  JJD 4/18/11 - TFS72229
				Leave a half pixel margin on the right and bottom which prevents clipping of the border in SL due to layout rounding -->
        <Setter Property="Margin" Value="0,0,.5,.5"/>

    </Style>

    <!-- _________________________ CalendarDay ______________________________________ -->
    <Style x:Key="CalendarDayBase" TargetType="igPrim:CalendarDay" BasedOn="{StaticResource CalendarItemBase}">
    </Style>
    <Style TargetType="igPrim:CalendarDay" BasedOn="{StaticResource CalendarDayBase}"/>



    <!-- _________________________ CalendarDayOfWeek ______________________________________ -->
    <Style x:Key="CalendarDayOfWeekBase" TargetType="igPrim:CalendarDayOfWeek">
        <Setter Property="igPrim:XamlHelper.Focusable" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <!-- JJD 3/4/13 - TFS134569 - added computed fore and back brushes to easily support the color changes when the control is disabled
		<Setter Property="Background" Value="Transparent" />-->
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igPrim:CalendarDayOfWeek">
                    <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                      VerticalAlignment="{TemplateBinding VerticalAlignment}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      CornerRadius="0"
                      Background="{TemplateBinding Background}"
                      Padding="{TemplateBinding Padding}">
                        <!-- JJD 3/4/13 - TFS134569 - added computed fore and back brushes to easily support the color changes when the control is disabled
                            Foreground="{Binding Path=(igEditors:CalendarBase.Calendar).ResourceProviderResolved[DayOfWeekForegroundBrush], RelativeSource={RelativeSource TemplatedParent} }"-->
                        <TextBlock
							Text="{TemplateBinding DisplayText}"
                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
						   Padding="7,0,7,2"
                          igPrim:XamlHelper.SnapsToDevicePixels="{TemplateBinding igPrim:XamlHelper.SnapsToDevicePixels}"
                          >
                        </TextBlock>

                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="igPrim:CalendarDayOfWeek" BasedOn="{StaticResource CalendarDayOfWeekBase}"/>



    <!-- _________________________ CalendarWeekNumber ______________________________________ -->
    <Style x:Key="CalendarWeekNumberBase" TargetType="igPrim:CalendarWeekNumber">
        <Setter Property="igPrim:XamlHelper.Focusable" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="1,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igPrim:CalendarWeekNumber">
                    <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalAlignment}"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          CornerRadius="0"
                          Background="{TemplateBinding ComputedBackground}">
                        <TextBlock
								Margin="{TemplateBinding Padding}"
												MinWidth="6"
                          Foreground="{TemplateBinding ComputedForeground}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            igPrim:XamlHelper.SnapsToDevicePixels="{TemplateBinding igPrim:XamlHelper.SnapsToDevicePixels}"
                            Text="{Binding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="igPrim:CalendarWeekNumber" BasedOn="{StaticResource CalendarWeekNumberBase}" />
    <Style x:Key="PreviousMonthButtonStyle" TargetType="RepeatButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Grid Margin="0" Width="30" Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates1">
                                <VisualState x:Name="Normal1"/>
                                <VisualState x:Name="MouseOver1"/>
                                <VisualState x:Name="Pressed1"/>
                                <VisualState x:Name="Disabled1"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates1">
                                <VisualState x:Name="Focused1"/>
                                <VisualState x:Name="Unfocused1"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="path" d:IsOptimized="True"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Path x:Name="path" Data="M9.3691406,4.0503902 L9.3691406,13.448828 L0.96679693,8.749609 z" Fill="Black" HorizontalAlignment="Center" Height="8.4" Margin="0" RenderTransformOrigin="0.5,0.5" Stretch="Fill" VerticalAlignment="Center" Width="4.402" UseLayoutRounding="False"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NextMonthButtonStyle" TargetType="RepeatButton">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Grid Margin="0" Width="30" Background="Transparent" VerticalAlignment="Center">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates1">
                                <VisualState x:Name="Normal1"/>
                                <VisualState x:Name="MouseOver1"/>
                                <VisualState x:Name="Pressed1"/>
                                <VisualState x:Name="Disabled1"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates1">
                                <VisualState x:Name="Focused1"/>
                                <VisualState x:Name="Unfocused1"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="path1" d:IsOptimized="True"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Path x:Name="path1" Data="M9.3691406,4.0503902 L9.3691406,13.448828 L0.96679693,8.749609 z" Fill="Black" HorizontalAlignment="Center" Height="8.4" Margin="0" RenderTransformOrigin="0.5,0.5" Stretch="Fill" VerticalAlignment="Center" Width="4.402" UseLayoutRounding="False">
                            <Path.RenderTransform>
                                <ScaleTransform ScaleX="-1"/>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- _________________________ CalendarItemGroupTitle _________________________________ -->
    <Style x:Key="CalendarItemGroupTitleBase" TargetType="igPrim:CalendarItemGroupTitle">
        <Setter Property="igPrim:XamlHelper.Focusable" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igPrim:CalendarItemGroupTitle">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalAlignment}"
                          CornerRadius="0"
                          Background="#ffebf3f9"
                          igPrim:XamlHelper.SnapsToDevicePixels="True"
                          Padding="{TemplateBinding Padding}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width ="Auto"/>
                                <ColumnDefinition Width ="*"/>
                                <ColumnDefinition Width ="Auto"/>
                            </Grid.ColumnDefinitions>

                            <!--
								JJD 12//21/12 - TFS129404
								Changed to colum 0 with a span of 3 so that the title will always be centered even
								if only one of the prev/next buttons are visible
							<Button x:Name="headerContent"  Grid.Column="1" -->
                            <Button x:Name="headerContent" MinHeight="28" FontSize="14" Grid.Column="0" Grid.ColumnSpan="3"
														Foreground="Black"
                               HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
																IsTabStop="False"
                                igPrim:XamlHelper.Focusable="False"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Style="{StaticResource BorderlessButtonStyle}"
                                igPrim:XamlHelper.SnapsToDevicePixels="{TemplateBinding igPrim:XamlHelper.SnapsToDevicePixels}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Content="{TemplateBinding Content}">
                                <ig:Commanding.Command>
                                    <igPrim:CalendarCommandSource EventName="Click" CommandType="ZoomOutCalendarMode" ParameterBinding="{Binding Path=Group, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </ig:Commanding.Command>

                            </Button>

                            <RepeatButton Grid.Column="0" x:Name="previousMonth"
														IsTabStop="False"
                            igPrim:XamlHelper.Focusable="False"
                            Visibility="{Binding Path=Group.ScrollPreviousButtonVisibility, 
                                    RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource PreviousMonthButtonStyle}"
														Content="&lt;" Margin="0">
                                <ig:Commanding.Command>
                                    <igPrim:CalendarCommandSource EventName="Click" CommandType="ScrollPreviousGroup"/>
                                </ig:Commanding.Command>
                            </RepeatButton>
                            <RepeatButton   Grid.Column="2" x:Name="nextMonth"
																IsTabStop="False"
                               igPrim:XamlHelper.Focusable="False"
                                Visibility="{Binding Path=Group.ScrollNextButtonVisibility, 
                                    RelativeSource={RelativeSource TemplatedParent}}"
                                Style="{StaticResource NextMonthButtonStyle}"
                                Content="&gt;">

                                <ig:Commanding.Command>
                                    <igPrim:CalendarCommandSource EventName="Click" CommandType="ScrollNextGroup"/>
                                </ig:Commanding.Command>
                            </RepeatButton>

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="0,0,0,0"/>
    </Style>
    <Style TargetType="igPrim:CalendarItemGroupTitle" BasedOn="{StaticResource CalendarItemGroupTitleBase}">
    </Style>

    <!-- _________________________ CalendarItemGroup ______________________________________ -->
    <Style TargetType="igPrim:CalendarItemGroup">
        <Setter Property="igPrim:XamlHelper.Focusable" Value="False"/>
        <Setter Property="Background" Value="Transparent" />
        <!--<Setter Property="ScrollNextButtonVisibility" Value="{Binding Path=(igEditors:CalendarBase.Calendar).ScrollButtonVisibility, RelativeSource={RelativeSource Self}}" />
		<Setter Property="ScrollPreviousButtonVisibility" Value="{Binding Path=(igEditors:CalendarBase.Calendar).ScrollButtonVisibility, RelativeSource={RelativeSource Self}}" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igPrim:CalendarItemGroup">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      Background="{TemplateBinding Background}"
                      igPrim:XamlHelper.SnapsToDevicePixels="True"
                      Padding="{TemplateBinding Padding}">
                        <Grid igPrim:XamlHelper.SnapsToDevicePixels="{TemplateBinding igPrim:XamlHelper.SnapsToDevicePixels}">

                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <!--Title-->
                            <igPrim:CalendarItemGroupTitle x:Name="groupTitle" 
																									 Content="{TemplateBinding Title}"/>

                            <igPrim:CalendarItemAreaPanel Grid.Row="1" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
















    <!-- _________________________ CalendarItemArea ______________________________________ -->
    <Style x:Key="CalendarItemAreaBase" TargetType="igPrim:CalendarItemArea">
        <Setter Property="igPrim:XamlHelper.Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igPrim:CalendarItemArea">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}"
							igPrim:XamlHelper.SnapsToDevicePixels="True"
							Padding="{TemplateBinding Padding}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <!--week numbers-->
                                <ColumnDefinition Width="*" />
                                <!--Calendar-->
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <!--Days of Week-->
                                <RowDefinition />
                                <!--Calendar-->
                            </Grid.RowDefinitions>

                            <!--Day Of Week Header-->
                            <igPrim:CalendarDayOfWeekPanel
									x:Name="DayOfWeekPanel"
										Grid.Column="1"
										Visibility="{TemplateBinding DayOfWeekHeaderVisibility}"
										igPrim:XamlHelper.Focusable="False"
										Background="{Binding Path=(ig:CalendarBase.Calendar).ResourceProviderResolved[DayOfWeekBackgroundBrush], RelativeSource={RelativeSource TemplatedParent}}"/>

                            <!--Week Numbers-->
                            <Grid
									Grid.Column="0"
									Grid.Row="1"
									x:Name="weekNumbers"
									Visibility="{TemplateBinding WeekNumberVisibility}"
                                    >
                                <!--This is there to ensure the column is wide enough-->
                                <igPrim:CalendarWeekNumber 
										DataContext="{Binding Path=(ig:CalendarBase.Calendar).WeekNumberVisibility, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource visibilityTo52Converter}}" 
										Opacity="0" IsHitTestVisible="False"/>

                                <igPrim:CalendarWeekNumberPanel
												x:Name="WeekNumberPanel"
												FirstRow="{TemplateBinding Property=FirstItemRowOffset}"/>
                            </Grid>

                            <!--Items of Group - e.g. Days Of Month-->
                            <Border
										x:Name="itemsList"
										Grid.Column="1"
										Grid.Row="1"
										BorderBrush="{Binding Path=(ig:CalendarBase.Calendar).ResourceProviderResolved[DayOfWeekSeparatorBrush], RelativeSource={RelativeSource TemplatedParent}}"
										BorderThickness="{TemplateBinding ComputedItemsBorderThickness}"
									>
                                <igPrim:UniformGrid
										x:Name="ItemPanel"
											igPrim:XamlHelper.Focusable="False"
											FirstColumn="{TemplateBinding FirstItemColumnOffset}"
											FirstRow="{TemplateBinding FirstItemRowOffset}"
											Rows="{TemplateBinding ItemRows}"
											Columns="{TemplateBinding ItemColumns}"
											/>
                            </Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="igPrim:CalendarItemArea" BasedOn="{StaticResource CalendarItemAreaBase}">
        <Setter Property="Margin" Value="0,5,0,0" />
    </Style>










    <Style x:Key="DroupButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="#FF333333"/>
        <Setter Property="BorderBrush" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="BackgroundOverlay">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Highlight">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="DisabledVisualElement">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.55"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BtnArrowDisabled">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BackgroundOverlay3">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Highlight">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked"/>
                                <VisualState x:Name="Indeterminate"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Visibility" Storyboard.TargetName="FocusVisualElement">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid"/>
                                <VisualState x:Name="InvalidFocused"/>
                                <VisualState x:Name="InvalidUnfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <Border x:Name="Background" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0"/>
                            <Border x:Name="BackgroundOverlay" BorderBrush="{x:Null}" BorderThickness="{TemplateBinding BorderThickness}" Background="#FFEBF3F9" CornerRadius="0" Opacity="0"/>
                            <Border x:Name="BackgroundOverlay3" BorderBrush="{x:Null}" BorderThickness="{TemplateBinding BorderThickness}" Background="#FFCBE5FF" CornerRadius="0" Opacity="0" Margin="0"/>
                            <Border x:Name="Highlight" BorderBrush="{StaticResource BaseDarkGray}" CornerRadius="0" IsHitTestVisible="False" Margin="{TemplateBinding BorderThickness}" Opacity="0" BorderThickness="1"/>
                            <Border x:Name="FocusVisualElement" BorderBrush="{StaticResource BaseDarkGray}" BorderThickness="1" CornerRadius="0" IsHitTestVisible="False" Margin="1" Visibility="Collapsed" d:IsHidden="True"/>
                            <Rectangle x:Name="DisabledVisualElement" Fill="White" HorizontalAlignment="Stretch" IsHitTestVisible="False" Opacity="0" RadiusY="3" RadiusX="3" VerticalAlignment="Stretch"/>
                        </Grid>
                        <Grid HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center">
                            <Path x:Name="BtnArrowBackground" Data="M0,0C0,0 7,0 7,0 7,0 3.5,3.5 3.5,3.5 3.5,3.5 0,0 0,0z" Fill="White" Height="4" Margin="0,2,0,0" Stretch="Fill" Width="7"/>
                            <Path x:Name="BtnArrowForeground" Data="M0,0C0,0 7,0 7,0 7,0 3.5,3.5 3.5,3.5 3.5,3.5 0,0 0,0z" Fill="#FF333333" Height="4" Stretch="Fill" Width="7"/>
                            <Path x:Name="BtnArrowDisabled" Data="M0,0C0,0 7,0 7,0 7,0 3.5,3.5 3.5,3.5 3.5,3.5 0,0 0,0z" Fill="#FF8D8D8D" Height="4" Opacity="0" Stretch="Fill" Width="7"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Background" TargetName="Background" Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style  TargetType="{x:Type ig:XamDateTimeInput}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderBrush" Value="{StaticResource BaseLightBorder}"/>
        <Setter Property="DropDownButtonStyle" Value="{StaticResource DroupButtonStyle}"/>
        <Setter Property="SpinButtonStyle">
            <Setter.Value>
                <Style TargetType="{x:Type RepeatButton}">
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Padding" Value="3,1"/>
                    <Setter Property="IsTabStop" Value="False"/>
                    <Setter Property="Focusable" Value="False"/>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinHeight" Value="22"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ig:XamDateTimeInput}">
                    <igPrim:ValidationDecorator x:Name="MainGrid">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="FocusedDropDown"/>
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="OverBorder">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="OverBorder">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PART_InputTextBox">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="ReadOnly"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="BgBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="0" Margin="0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Border x:Name="OverBorder" BorderBrush="{StaticResource BaseDarkGray}" BorderThickness="1" CornerRadius="0" Margin="0,0,1,0" Opacity="0"/>
                                <Grid x:Name="PART_SpinButtons" Grid.Column="1" Margin="0,1,1,1" Visibility="{TemplateBinding SpinButtonVisibilityResolved}">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="1"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <RepeatButton x:Name="spinUp" Style="{TemplateBinding SpinButtonStyle}">
                                        <RepeatButton.ContentTemplate>
                                            <DataTemplate>
                                                <Path Data="M0,3C0,3 0,4 0,4 0,4 3,4 3,4 3,4 3,3 3,3 3,3 4,3 4,3 4,3 4,4 4,4 4,4 7,4 7,4 7,4 7,3 7,3 7,3 6,3 6,3 6,3 6,2 6,2 6,2 5,2 5,2 5,2 5,1 5,1 5,1 4,1 4,1 4,1 4,0 4,0 4,0 3,0 3,0 3,0 3,1 3,1 3,1 2,1 2,1 2,1 2,2 2,2 2,2 1,2 1,2 1,2 1,3 1,3 1,3 0,3 0,3z" Fill="Black" Height="4" Width="7"/>
                                            </DataTemplate>
                                        </RepeatButton.ContentTemplate>
                                        <ig:Commanding.Command>
                                            <igPrim:MaskedInputCommandSource AllowEventHandling="True" CommandId="SpinUp" EventName="Click" Handled="False" ParameterBinding="{x:Null}" ParameterBindingDataContext="SourceElementDataContext" Target="{x:Null}" TargetName="{x:Null}"/>
                                        </ig:Commanding.Command>
                                    </RepeatButton>
                                    <RepeatButton x:Name="spinDown" Grid.Row="2" Style="{TemplateBinding SpinButtonStyle}">
                                        <RepeatButton.ContentTemplate>
                                            <DataTemplate>
                                                <Path Data="M0,1C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1z" Fill="Black" Height="4" Width="7"/>
                                            </DataTemplate>
                                        </RepeatButton.ContentTemplate>
                                        <ig:Commanding.Command>
                                            <igPrim:MaskedInputCommandSource AllowEventHandling="True" CommandId="SpinDown" EventName="Click" Handled="False" ParameterBinding="{x:Null}" ParameterBindingDataContext="SourceElementDataContext" Target="{x:Null}" TargetName="{x:Null}"/>
                                        </ig:Commanding.Command>
                                    </RepeatButton>
                                </Grid>
                                <igPrim:MaskedInputTextBox x:Name="PART_InputTextBox" Focusable="{TemplateBinding Focusable}" FlowDirection="LeftToRight" HorizontalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsTabStop="{TemplateBinding IsTabStop}" Margin="{TemplateBinding Padding}" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}" VerticalAlignment="Stretch" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <igPrim:MaskedInputTextBox.Style>
                                        <Style TargetType="{x:Type TextBox}">
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                            <Setter Property="BorderThickness" Value="0"/>
                                        </Style>
                                    </igPrim:MaskedInputTextBox.Style>
                                    <igPrim:MaskedInputTextBox.TextAlignment>
                                        <Binding Mode="OneWay" Path="HorizontalContentAlignment" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <igPrim:ValueConverterGroup>
                                                    <igPrim:FixedValueConverter>
                                                        <igPrim:FixedValueConverter.DestinationValue>
                                                            <TextAlignment>Left</TextAlignment>
                                                        </igPrim:FixedValueConverter.DestinationValue>
                                                        <igPrim:FixedValueConverter.SourceValue>
                                                            <HorizontalAlignment>Left</HorizontalAlignment>
                                                        </igPrim:FixedValueConverter.SourceValue>
                                                    </igPrim:FixedValueConverter>
                                                    <igPrim:FixedValueConverter>
                                                        <igPrim:FixedValueConverter.DestinationValue>
                                                            <TextAlignment>Center</TextAlignment>
                                                        </igPrim:FixedValueConverter.DestinationValue>
                                                        <igPrim:FixedValueConverter.SourceValue>
                                                            <HorizontalAlignment>Center</HorizontalAlignment>
                                                        </igPrim:FixedValueConverter.SourceValue>
                                                    </igPrim:FixedValueConverter>
                                                    <igPrim:FixedValueConverter>
                                                        <igPrim:FixedValueConverter.DestinationValue>
                                                            <TextAlignment>Right</TextAlignment>
                                                        </igPrim:FixedValueConverter.DestinationValue>
                                                        <igPrim:FixedValueConverter.SourceValue>
                                                            <HorizontalAlignment>Right</HorizontalAlignment>
                                                        </igPrim:FixedValueConverter.SourceValue>
                                                    </igPrim:FixedValueConverter>
                                                    <igPrim:FixedValueConverter>
                                                        <igPrim:FixedValueConverter.DestinationValue>
                                                            <TextAlignment>Left</TextAlignment>
                                                        </igPrim:FixedValueConverter.DestinationValue>
                                                        <igPrim:FixedValueConverter.SourceValue>
                                                            <HorizontalAlignment>Stretch</HorizontalAlignment>
                                                        </igPrim:FixedValueConverter.SourceValue>
                                                    </igPrim:FixedValueConverter>
                                                </igPrim:ValueConverterGroup>
                                            </Binding.Converter>
                                        </Binding>
                                    </igPrim:MaskedInputTextBox.TextAlignment>
                                </igPrim:MaskedInputTextBox>
                                <ToggleButton x:Name="PART_DropDownButton" ClickMode="Press" Grid.Column="2" Focusable="False" IsTabStop="False" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,1,1,1" Grid.RowSpan="3" Style="{TemplateBinding DropDownButtonStyle}" Visibility="{TemplateBinding DropDownButtonVisibility}">
                                    <ToggleButton.IsEnabled>
                                        <Binding Path="IsReadOnly" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <igPrim:ValueConverterGroup>
                                                    <igPrim:FixedValueConverter>
                                                        <igPrim:FixedValueConverter.DestinationValue>
                                                            <System:Boolean>False</System:Boolean>
                                                        </igPrim:FixedValueConverter.DestinationValue>
                                                        <igPrim:FixedValueConverter.SourceValue>
                                                            <System:Boolean>True</System:Boolean>
                                                        </igPrim:FixedValueConverter.SourceValue>
                                                    </igPrim:FixedValueConverter>
                                                    <igPrim:FixedValueConverter>
                                                        <igPrim:FixedValueConverter.DestinationValue>
                                                            <System:Boolean>True</System:Boolean>
                                                        </igPrim:FixedValueConverter.DestinationValue>
                                                        <igPrim:FixedValueConverter.SourceValue>
                                                            <System:Boolean>False</System:Boolean>
                                                        </igPrim:FixedValueConverter.SourceValue>
                                                    </igPrim:FixedValueConverter>
                                                </igPrim:ValueConverterGroup>
                                            </Binding.Converter>
                                        </Binding>
                                    </ToggleButton.IsEnabled>
                                </ToggleButton>
                                <Popup x:Name="PART_Popup">
                                    <Border BorderThickness="1" Padding="1" Background="White" BorderBrush="#FF83A4C4">
                                        <ig:XamCalendar x:Name="PART_Calendar" ActiveDate="2014-07-18" MinCalendarMode="{TemplateBinding ComputedMinCalendarMode}" MinDate="{TemplateBinding ComputedMinDate}" MaxDate="{TemplateBinding ComputedMaxDate}" ReferenceDate="2014-07-01" SelectionMode="SingleDate" SelectedDate="{Binding DateValue, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>
                    </igPrim:ValidationDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>






    <!-- _________________________ XamCalendar ______________________________________ -->
    <Style TargetType="ig:XamCalendar">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <!--<Setter Property="igPrim:XamlHelper.Focusable" Value="True"/>-->
        <Setter Property="Background" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ig:XamCalendar">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Background="{TemplateBinding Background}"
						igPrim:XamlHelper.SnapsToDevicePixels="True"
						Padding="{TemplateBinding Padding}">
                        <Grid x:Name="RootPanel" igPrim:XamlHelper.SnapsToDevicePixels="{TemplateBinding igPrim:XamlHelper.SnapsToDevicePixels}">

                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition MinHeight="5" Height="Auto"/>
                            </Grid.RowDefinitions>
                            <!--Today button-->
                            <Button Grid.Row="1"
									IsTabStop="False"
									Content="{TemplateBinding TodayButtonCaption}"
									Style="{StaticResource TodayButton}"
									Visibility="{TemplateBinding TodayButtonVisibility}">
                                <ig:Commanding.Command>
                                    <igPrim:CalendarCommandSource EventName="Click" CommandType="Today"/>
                                </ig:Commanding.Command>
                            </Button>

                            <!--Months-->
                            <igPrim:CalendarItemGroupPanel
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>


                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>






</ResourceDictionary>