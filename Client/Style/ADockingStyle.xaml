<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	
	xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
    xmlns:presentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:productsDocking="clr-namespace:ActiproSoftware.Products.Docking;assembly=ActiproSoftware.Docking.Wpf"
                    xmlns:primitives="clr-namespace:ActiproSoftware.Windows.Controls.Docking.Primitives;assembly=ActiproSoftware.Docking.Wpf"
                    xmlns:docking3="clr-namespace:ActiproSoftware.Windows.Controls.Docking;assembly=ActiproSoftware.Docking.Wpf"
                    mc:Ignorable="d">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/BrushResource.xaml"/>
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/DrawingBrushResource.xaml"/>
    </ResourceDictionary.MergedDictionaries>



    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <primitives:DockingScrollingVisibilityConverter x:Key="DockingScrollingVisibilityConverter" />
    <shared:ThicknessConverter x:Key="ThicknessConverter" />






    <ControlTemplate x:Key="TabbedMdiContainerControlTemplate" TargetType="{x:Type docking3:TabbedMdiContainer}">
        <ControlTemplate.Resources>
            <shared:IsTypeConverter x:Key="IsTypeConverter"/>
        </ControlTemplate.Resources>
        <Grid x:Name="rootGrid" SnapsToDevicePixels="True">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <shared:PixelSnapper x:Name="tabContainer" TextElement.Foreground="{DynamicResource {ComponentResourceKey ResourceId=TabbedMdiContainerTabControlForegroundNormalBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" Margin="0,0,0,-2" Grid.Row="0" Panel.ZIndex="-1">
                <primitives:ReverseMeasureDockPanel>
                    <ScrollViewer x:Name="scrollViewer" CanContentScroll="True" DockPanel.Dock="Left" HorizontalScrollBarVisibility="Disabled" Style="{DynamicResource {ComponentResourceKey ResourceId=DockingTabScrollViewerStyleKey, TypeInTargetAssembly={x:Type themes:DockingResourceKeys}}}" VerticalScrollBarVisibility="Disabled">
                        <ItemsPresenter/>
                    </ScrollViewer>
                    <Button x:Name="closeButton" ContentTemplate="{DynamicResource {ComponentResourceKey ResourceId=CloseGlyphTemplateKey, TypeInTargetAssembly={x:Type themes:SharedResourceKeys}}}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Right" Focusable="False" Margin="1,2" AutomationProperties.Name="Close" Padding="1" Style="{DynamicResource {ComponentResourceKey ResourceId=EmbeddedButtonBaseOverrideStyleKey, TypeInTargetAssembly={x:Type themes:SharedResourceKeys}}}" ToolTip="Close">
                        <Button.Command>
                            <RoutedUICommand Text="Close"/>
                        </Button.Command>
                    </Button>
                    <shared:PopupButton x:Name="documentsButton" Command="{x:Static docking3:DockingCommands.OpenOptionsMenu}" CommandParameter="{Binding RelativeSource={RelativeSource Self}}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"    DisplayMode="PopupOnly" DockPanel.Dock="Right" Focusable="False" Margin="1,2" AutomationProperties.Name="Documents" Padding="1" PopupIndicatorTemplate="{DynamicResource {ComponentResourceKey ResourceId=DropDownArrowGlyphTemplateKey, TypeInTargetAssembly={x:Type themes:SharedResourceKeys}}}" Style="{DynamicResource {ComponentResourceKey ResourceId=EmbeddedPopupButtonOverrideStyleKey, TypeInTargetAssembly={x:Type themes:SharedResourceKeys}}}" ToolTip="Active Files">
                        <shared:PopupButton.Foreground>
                            <SolidColorBrush Color="#FF4D6778" themes:TintGroup.Name="Control"/>
                        </shared:PopupButton.Foreground>
                        <!--<shared:PopupButton.Command>
    							<RoutedUICommand Text="Active Files"/>
    						</shared:PopupButton.Command>-->
                    </shared:PopupButton>
                </primitives:ReverseMeasureDockPanel>
            </shared:PixelSnapper>
            <shared:TintableBorder Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" Grid.Row="1" TintColor="{TemplateBinding TintColor}">
                <Border Background="{Binding Path=SelectedItem.(docking3:DockingWindow.Background), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True" BorderBrush="#FF4D6778" BorderThickness="1">
                    <ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                </Border>
            </shared:TintableBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasWindows" Value="False">
                <Setter Property="Visibility" TargetName="rootGrid" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="AllTabsVisible" Value="False">
                <Setter Property="PopupIndicatorTemplate" TargetName="documentsButton" Value="{DynamicResource {ComponentResourceKey ResourceId=OverflowDropDownArrowGlyphTemplateKey, TypeInTargetAssembly={x:Type themes:SharedResourceKeys}}}"/>
            </Trigger>
            <Trigger Property="docking3:TabbedMdiHost.IsCloseButtonOnTab" Value="True">
                <Setter Property="Visibility" TargetName="closeButton" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="docking3:TabbedMdiHost.TabPlacement" Value="Bottom">
                <Setter Property="Grid.Row" TargetName="tabContainer" Value="2"/>
                <Setter Property="Margin" TargetName="tabContainer" Value="0,-2,0,0"/>
            </Trigger>
            <Trigger Property="TabOverflowBehavior" Value="None">
                <Setter Property="Visibility" TargetName="documentsButton" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="TabOverflowBehavior" Value="Shrink">
                <Setter Property="primitives:DockingWindowTabPanel.IsStretched" TargetName="scrollViewer" Value="True"/>
                <Setter Property="Visibility" TargetName="documentsButton" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="TabOverflowBehavior" Value="ShrinkWithMenu">
                <Setter Property="primitives:DockingWindowTabPanel.IsStretched" TargetName="scrollViewer" Value="True"/>
            </Trigger>
            <Trigger Property="TabOverflowBehavior" Value="Scroll">
                <Setter Property="HorizontalScrollBarVisibility" TargetName="scrollViewer" Value="Visible"/>
                <Setter Property="Visibility" TargetName="documentsButton" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="TabOverflowBehavior" Value="ScrollWithMenu">
                <Setter Property="HorizontalScrollBarVisibility" TargetName="scrollViewer" Value="Visible"/>
            </Trigger>
            <DataTrigger Binding="{Binding Path=SelectedItem.CanCloseResolved, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="Visibility" TargetName="closeButton" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <Binding ConverterParameter="{x:Type docking3:DockingWindow}" Path="SelectedItem" RelativeSource="{RelativeSource Self}">
                        <Binding.Converter>
                            <shared:IsTypeConverter/>
                        </Binding.Converter>
                    </Binding>
                </DataTrigger.Binding>
                <Setter Property="TintColor" Value="{Binding Path=SelectedItem.(docking3:DockingWindow.TabTintColor), RelativeSource={RelativeSource Self}}"/>
            </DataTrigger>
            <Trigger Property="docking3:Workspace.IsActive" Value="True">
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey ResourceId=TabbedMdiContainerTabControlBackgroundActiveNormalBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}"/>
            </Trigger>
            <Trigger Property="docking3:DockingWindowContainer.IsActive" Value="True">
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey ResourceId=TabbedMdiContainerTabControlBackgroundActiveFocusedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--<DrawingBrush presentationOptions:Freeze="True" x:Key="{x:Static themes:AssetResourceKeys.DockingWindowContainerTitleBarBackgroundActiveBrushKey}" Viewbox="0,0,276.383,20.851" ViewboxUnits="Absolute">
        <DrawingBrush.Drawing>
            <DrawingGroup>
                <GeometryDrawing>
                    <GeometryDrawing.Brush>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="#FFEBF5FB" Offset="0.009"/>
                            <GradientStop Color="#FFA0C1DF" Offset="0.138"/>
                            <GradientStop Color="#FFDDE8EF" Offset="0.924"/>
                        </LinearGradientBrush>
                    </GeometryDrawing.Brush>
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="0,0,276.383,20.851"/>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing>
                    <GeometryDrawing.Brush>
                        <LinearGradientBrush EndPoint="0.504,0.815" StartPoint="0.504,0.148">
                            <GradientStop Color="#72FFFFFF" Offset="0.44"/>
                            <GradientStop Color="#009292B1" Offset="0.467"/>
                            <GradientStop Color="#A5FFFFFF" Offset="0"/>
                        </LinearGradientBrush>
                    </GeometryDrawing.Brush>
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="0,0,276.383,20.851"/>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing>
                    <GeometryDrawing.Brush>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="Transparent" Offset="0.778"/>
                            <GradientStop Color="#9CFFFFFF" Offset="0.938"/>
                        </LinearGradientBrush>
                    </GeometryDrawing.Brush>
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="0,0,276.383,20.851"/>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>
    <DrawingBrush presentationOptions:Freeze="True"  x:Key="{x:Static themes:AssetResourceKeys.DockingWindowContainerTitleBarBackgroundInactiveBrushKey}"  Viewbox="0,0,276.383,20.851" ViewboxUnits="Absolute">
        <DrawingBrush.Drawing>
            <DrawingGroup>
                <GeometryDrawing>
                    <GeometryDrawing.Brush>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="#FFEBF5FB" Offset="0.009"/>
                            <GradientStop Color="#FFBBC5D9" Offset="0.138"/>
                            <GradientStop Color="#FFDDE8EF" Offset="0.924"/>
                        </LinearGradientBrush>
                    </GeometryDrawing.Brush>
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="0,0,276.383,20.851"/>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing>
                    <GeometryDrawing.Brush>
                        <LinearGradientBrush EndPoint="0.504,0.815" StartPoint="0.504,0.148">
                            <GradientStop Color="#72FFFFFF" Offset="0.44"/>
                            <GradientStop Color="#009292B1" Offset="0.467"/>
                            <GradientStop Color="#A5FFFFFF" Offset="0"/>
                        </LinearGradientBrush>
                    </GeometryDrawing.Brush>
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="0,0,276.383,20.851"/>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing>
                    <GeometryDrawing.Brush>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="Transparent" Offset="0.778"/>
                            <GradientStop Color="#9CFFFFFF" Offset="0.938"/>
                        </LinearGradientBrush>
                    </GeometryDrawing.Brush>
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="0,0,276.383,20.851"/>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>-->


    <!--<SolidColorBrush PresentationOptions:Freeze="True" x:Key="{x:Static themes:AssetResourceKeys.AutoHideTabControlBackgroundNormalBrushKey}" themes:TintGroup.Name="AutoHideTabControl" 
		Color="red" />-->

    <SolidColorBrush presentationOptions:Freeze="True" x:Key="{x:Static themes:AssetResourceKeys.DockingWindowContainerTitleBarBackgroundActiveBrushKey}" Color="{StaticResource BaseLightGrayColor}" />
    <SolidColorBrush presentationOptions:Freeze="True" x:Key="{x:Static themes:AssetResourceKeys.DockingWindowContainerTitleBarBackgroundInactiveBrushKey}"  Color="{StaticResource BaseLightGrayColor}" />

    <SolidColorBrush presentationOptions:Freeze="True" x:Key="{x:Static themes:AssetResourceKeys.DockingWindowContainerTitleBarForegroundActiveBrushKey}"
Color="#FF282828" />
    <SolidColorBrush presentationOptions:Freeze="True" x:Key="{x:Static themes:AssetResourceKeys.DockingWindowContainerTitleBarForegroundInactiveBrushKey}" 
Color="#FF282828" />
    <SolidColorBrush presentationOptions:Freeze="True" x:Key="{x:Static themes:AssetResourceKeys.DockingWindowContainerTitleBarGlyphBackgroundActiveBrushKey}" 
Color="#FF282828" />
    <SolidColorBrush presentationOptions:Freeze="True" x:Key="{x:Static themes:AssetResourceKeys.DockingWindowContainerTitleBarGlyphBackgroundInactiveBrushKey}"
Color="#FF282828" />



    <CornerRadius presentationOptions:Freeze="True" x:Key="{x:Static themes:AssetResourceKeys.DockingWindowContainerTitleBarBorderNormalCornerRadiusKey}">0</CornerRadius>



    <SolidColorBrush presentationOptions:Freeze="True" x:Key="{x:Static themes:AssetResourceKeys.WorkspaceVeryDarkBackgroundNormalBrushKey}" themes:TintGroup.Name="Workspace" 
		Color="#ff4d6778" />


    <SolidColorBrush presentationOptions:Freeze="True" x:Key="{x:Static themes:AssetResourceKeys.AutoHideTabItemBackgroundHoverBrushKey}"  themes:TintGroup.Name="AutoHideTabItem"
		Color="{StaticResource BaseDarkGrayColor}" />
    <SolidColorBrush presentationOptions:Freeze="True" x:Key="{x:Static themes:AssetResourceKeys.AutoHideTabItemBackgroundNormalBrushKey}"  themes:TintGroup.Name="AutoHideTabItem"
		Color="{StaticResource BaseLightGrayColor}" />

    <SolidColorBrush presentationOptions:Freeze="True" x:Key="{x:Static themes:AssetResourceKeys.AutoHideTabItemBorderHoverBrushKey}" themes:TintGroup.Name="AutoHideTabItem" 
		Color="{StaticResource BaseLightBlueColor}" />
    <SolidColorBrush presentationOptions:Freeze="True" x:Key="{x:Static themes:AssetResourceKeys.AutoHideTabItemBorderNormalBrushKey}" themes:TintGroup.Name="AutoHideTabItem" 
		Color="{StaticResource BaseLightBlueColor}" />
    <SolidColorBrush presentationOptions:Freeze="True" x:Key="{x:Static themes:AssetResourceKeys.AutoHideTabItemForegroundHoverBrushKey}" themes:TintGroup.Name="AutoHideTabItem" 
		Color="#FF282828" />
    <SolidColorBrush presentationOptions:Freeze="True" x:Key="{x:Static themes:AssetResourceKeys.AutoHideTabItemForegroundNormalBrushKey}" themes:TintGroup.Name="AutoHideTabItem" 
		Color="#FF282828" />

    <Thickness x:Key="{x:Static themes:AssetResourceKeys.AutoHideTabItemMarginNormalThicknessKey}">5,0,0,0</Thickness>

    <CornerRadius x:Key="{x:Static themes:AssetResourceKeys.AutoHideTabItemBorderNormalCornerRadiusKey}">0,0,0,0</CornerRadius>

    
    
    <SolidColorBrush presentationOptions:Freeze="True"  x:Key="{x:Static themes:AssetResourceKeys.TabbedMdiContainerTabControlBackgroundActiveFocusedBrushKey}" 
Color="#fffafafa" />

    <SolidColorBrush presentationOptions:Freeze="True"  x:Key="{x:Static themes:AssetResourceKeys.TabbedMdiContainerTabControlBackgroundActiveNormalBrushKey}"
Color="#fffafafa" />

    <SolidColorBrush presentationOptions:Freeze="True"  x:Key="{x:Static themes:AssetResourceKeys.TabbedMdiContainerTabControlBackgroundInactiveNormalBrushKey}"
Color="#fffafafa" />



    <SolidColorBrush presentationOptions:Freeze="True" x:Key="{x:Static themes:AssetResourceKeys.TabbedMdiContainerTabControlForegroundNormalBrushKey}" themes:TintGroup.Name="AutoHideTabItem" 
		Color="#FF282828" />

 
    <CornerRadius x:Key="{x:Static themes:AssetResourceKeys.TabbedMdiContainerTabItemBorderNormalCornerRadiusKey}">0,0,0,0</CornerRadius>
    <!--<LinearGradientBrush presentationOptions:Freeze="True"  x:Key="{x:Static themes:AssetResourceKeys.TabbedMdiContainerTabControlBackgroundActiveFocusedBrushKey}"  EndPoint="0.5,1" StartPoint="0.5,0">
        	<GradientStop Color="#FFEEF2F8" />
        <GradientStop Color="White" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush presentationOptions:Freeze="True"  x:Key="{x:Static themes:AssetResourceKeys.TabbedMdiContainerTabControlBackgroundActiveNormalBrushKey}" EndPoint="0.5,1" StartPoint="0.5,0">
       	<GradientStop Color="#FFEEF2F8" />
        <GradientStop Color="White" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush presentationOptions:Freeze="True"  x:Key="{x:Static themes:AssetResourceKeys.TabbedMdiContainerTabControlBackgroundInactiveNormalBrushKey}"  EndPoint="0.5,1" StartPoint="0.5,0">
       	<GradientStop Color="#FFEEF2F8" />
        <GradientStop Color="White" Offset="1"/>
    </LinearGradientBrush>-->


  

    <Style TargetType="{x:Type docking3:Workspace}">
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <!--ToolWindow Style-->
    <Style TargetType="{x:Type docking3:DockSite}">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Margin" Value="-3"/>
        <Setter Property="SplitterSize" Value="3"/>
        <Setter Property="CanToolWindowsClose" Value="False"/>
        <Setter Property="CanToolWindowsRaft" Value="False"/>
        <Setter Property="CanToolWindowsBecomeDocuments" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <!--<Setter Property="Background" Value="#00112045"/>-->
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.95"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--TabbedMdiHostStyle-->
    <Style TargetType="{x:Type docking3:TabbedMdiHost}">
        <Setter Property="IsCloseButtonOnTab" Value="False"/>
        <Setter Property="FontSize" Value="12"/>
        <!--<Setter Property="Background" Value="{StaticResource BaseLightGray}"/>-->
        <Setter Property="BorderBrush" Value="{StaticResource BaseLightBlue}"/>
        <Setter Property="BorderThickness" Value="0,0,0,0"/>
        <Setter Property="Padding" Value="0"/>
    </Style>


    <Style x:Key="ToolWindowHeaderButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{StaticResource BaseDarkBlue}"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Bd"
                    SnapsToDevicePixels="true"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}">
                        <ContentPresenter
                         HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                         VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource BaseDarkGray}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource BaseDarkGray}"/>
                            <Setter Property="Foreground" Value="{StaticResource BaseMoreDarkBlue}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




   

    <Style x:Key="{x:Static themes:SharedResourceKeys.EmbeddedPopupButtonOverrideStyleKey}" TargetType="{x:Type shared:PopupButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="2,1"/>
        <Setter Property="Foreground" Value="{StaticResource BaseDarkBlue}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="themes:ThemeProperties.IsAnimationEnabled" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonIsAnimationEnabledBooleanKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}"/>
        <Setter Property="themes:ThemeProperties.CornerRadius" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:PopupButton}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="contentColumn" Width="*"/>
                            <ColumnDefinition MaxWidth="1" Width="1"/>
                            <ColumnDefinition x:Name="indicatorColumn" Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <shared:ElementChrome x:Name="contentArea" 
                                              BorderBrush="{TemplateBinding BorderBrush}" 
                                              BorderBrushDefaulted="{DynamicResource {ComponentResourceKey ResourceId=ButtonBorderDefaultedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" 
                                              BackgroundHover="{StaticResource BaseDarkGray}" 
                                              BorderBrushPressed="{StaticResource BaseDarkGray}" 
                                              BackgroundDefaulted="Transparent" 
                                              BorderBrushDisabled="Transparent" 
                                              BorderThickness="{TemplateBinding BorderThickness}" 
                                              BackgroundPressed="{StaticResource BaseDarkGray}" 
                                              BorderBrushHover="{StaticResource BaseDarkGray}" 
                                              BackgroundDisabled="Transparent" 
                                              BorderStyle="{DynamicResource {ComponentResourceKey ResourceId=ButtonElementChromeBorderStyleKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}"
                                              Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Grid.Column="0" CornerRadius="0" Focusable="False" 
                                              HighlightPressed="{StaticResource BaseDarkGray}" 
                                              Highlight="{StaticResource BaseDarkGray}"
                                              HighlightDisabled="{StaticResource BaseDarkGray}"
                                              HighlightHover="{StaticResource BaseDarkGray}"
                                              HighlightDefaulted="{StaticResource BaseDarkGray}" 
                                              InnerBorderBrush="{StaticResource BaseDarkGray}" 
                                              InnerBorderThickness="{TemplateBinding BorderThickness}" 
                                              InnerBorderBrushDefaulted="{StaticResource BaseDarkGray}" 
                                              InnerBorderBrushHover="{StaticResource BaseDarkGray}" 
                                              InnerBorderBrushDisabled="{StaticResource BaseDarkGray}" 
                                              InnerBorderBrushPressed="{StaticResource BaseDarkGray}" 
                                              
                                              SnapsToDevicePixels="True">
                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" 
                                              Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </shared:ElementChrome>
                        <shared:ElementChrome x:Name="PART_IndicatorArea" 
                                              BorderBrush="{TemplateBinding BorderBrush}" 
                                              BorderBrushDefaulted="{DynamicResource {ComponentResourceKey ResourceId=ButtonBorderDefaultedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" 
                                              BackgroundHover="{StaticResource BaseDarkGray}" 
                                              BorderBrushPressed="{StaticResource BaseDarkGray}" 
                                              BackgroundDefaulted="Transparent" 
                                              BorderBrushDisabled="Transparent" 
                                              BorderThickness="{TemplateBinding BorderThickness}" 
                                              BackgroundPressed="{StaticResource BaseDarkGray}" 
                                              BorderBrushHover="{StaticResource BaseDarkGray}" 
                                              BackgroundDisabled="Transparent" 
                                              BorderStyle="{DynamicResource {ComponentResourceKey ResourceId=ButtonElementChromeBorderStyleKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" 
                                              Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Grid.Column="1" CornerRadius="0" Focusable="False" 
                                
                                              InnerBorderThickness="{TemplateBinding BorderThickness}" 
                                                                             
                                              SnapsToDevicePixels="True" ToolTip="{TemplateBinding PopupIndicatorToolTip}">
                                              <ContentPresenter ContentTemplate="{TemplateBinding PopupIndicatorTemplate}" 
                                              Content="{TemplateBinding PopupIndicator}" HorizontalAlignment="Center" Margin="0,0,0,2" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </shared:ElementChrome>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="State" SourceName="contentArea" Value="Normal"/>
                                <Condition Property="State" SourceName="PART_IndicatorArea" Value="Normal"/>
                                <Condition Property="IsTransparencyModeEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="contentArea" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="contentArea" Value="Transparent"/>
                            <Setter Property="Highlight" TargetName="contentArea" Value="Transparent"/>
                            <Setter Property="InnerBorderBrush" TargetName="contentArea" Value="Transparent"/>
                            <Setter Property="Background" TargetName="PART_IndicatorArea" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="PART_IndicatorArea" Value="Transparent"/>
                            <Setter Property="Highlight" TargetName="PART_IndicatorArea" Value="Transparent"/>
                            <Setter Property="InnerBorderBrush" TargetName="PART_IndicatorArea" Value="Transparent"/>
                        </MultiTrigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonForegroundDefaultedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}"/>
                            <Setter Property="State" TargetName="contentArea" Value="Defaulted"/>
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonForegroundDefaultedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}"/>
                            <Setter Property="State" TargetName="contentArea" Value="Defaulted"/>
                            <Setter Property="State" TargetName="PART_IndicatorArea" Value="Defaulted"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonForegroundHoverBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}"/>
                            <Setter Property="State" TargetName="contentArea" Value="Hover"/>
                            <Setter Property="State" TargetName="PART_IndicatorArea" Value="Hover"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonForegroundPressedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}"/>
                            <Setter Property="State" TargetName="contentArea" Value="Pressed"/>
                        </Trigger>
                        <Trigger Property="IsPopupOpen" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonForegroundPressedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}"/>
                            <Setter Property="State" TargetName="contentArea" Value="Pressed"/>
                            <Setter Property="State" TargetName="PART_IndicatorArea" Value="Pressed"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlForegroundDisabledBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}"/>
                            <Setter Property="State" TargetName="contentArea" Value="Disabled"/>
                            <Setter Property="State" TargetName="PART_IndicatorArea" Value="Disabled"/>
                        </Trigger>
                        <Trigger Property="DisplayMode" Value="ButtonOnly">
                            <Setter Property="Visibility" TargetName="PART_IndicatorArea" Value="Collapsed"/>
                            <Setter Property="CornerRadius" TargetName="contentArea" Value="3"/>
                        </Trigger>
                        <Trigger Property="DisplayMode" Value="PopupOnly">
                            <Setter Property="Visibility" TargetName="contentArea" Value="Collapsed"/>
                            <Setter Property="Width" TargetName="contentColumn" Value="0"/>
                            <Setter Property="Width" TargetName="indicatorColumn" Value="*"/>
                            <Setter Property="CornerRadius" TargetName="PART_IndicatorArea" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsRounded" Value="False">
                            <Setter Property="CornerRadius" TargetName="contentArea" Value="0"/>
                            <Setter Property="CornerRadius" TargetName="PART_IndicatorArea" Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PopupMenuDataContext" Value="{Binding}"/>
        <Style.Triggers>
            <Trigger Property="DisplayMode" Value="Merged">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type shared:PopupButton}">
                            <shared:ElementChrome x:Name="PART_IndicatorArea" BorderBrush="{TemplateBinding BorderBrush}" BorderBrushDefaulted="{DynamicResource {ComponentResourceKey ResourceId=ButtonBorderDefaultedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" BackgroundHover="{DynamicResource {ComponentResourceKey ResourceId=ButtonBackgroundHoverBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" BorderBrushPressed="{DynamicResource {ComponentResourceKey ResourceId=ButtonBorderPressedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" BackgroundDefaulted="{DynamicResource {ComponentResourceKey ResourceId=ButtonBackgroundDefaultedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" BorderBrushDisabled="{DynamicResource {ComponentResourceKey ResourceId=ButtonBorderDisabledBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" BorderThickness="{TemplateBinding BorderThickness}" BackgroundPressed="{DynamicResource {ComponentResourceKey ResourceId=ButtonBackgroundPressedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" BorderBrushHover="{DynamicResource {ComponentResourceKey ResourceId=ButtonBorderHoverBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" BackgroundDisabled="{DynamicResource {ComponentResourceKey ResourceId=ButtonBackgroundDisabledBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" BorderStyle="{DynamicResource {ComponentResourceKey ResourceId=ButtonElementChromeBorderStyleKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" Background="{TemplateBinding Background}" CornerRadius="3" HighlightPressed="{DynamicResource {ComponentResourceKey ResourceId=ButtonHighlightPressedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" Highlight="{DynamicResource {ComponentResourceKey ResourceId=ButtonHighlightNormalBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" HighlightDisabled="{DynamicResource {ComponentResourceKey ResourceId=ButtonHighlightDisabledBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" HighlightHover="{DynamicResource {ComponentResourceKey ResourceId=ButtonHighlightHoverBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" HighlightDefaulted="{DynamicResource {ComponentResourceKey ResourceId=ButtonHighlightDefaultedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" InnerBorderBrush="{DynamicResource {ComponentResourceKey ResourceId=ButtonInnerBorderNormalBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" InnerBorderThickness="{DynamicResource {ComponentResourceKey ResourceId=ButtonInnerBorderNormalThicknessKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" InnerBorderBrushDefaulted="{DynamicResource {ComponentResourceKey ResourceId=ButtonInnerBorderDefaultedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" InnerBorderBrushHover="{DynamicResource {ComponentResourceKey ResourceId=ButtonInnerBorderHoverBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" InnerBorderBrushDisabled="{DynamicResource {ComponentResourceKey ResourceId=ButtonInnerBorderDisabledBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" InnerBorderBrushPressed="{DynamicResource {ComponentResourceKey ResourceId=ButtonInnerBorderPressedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}" IsAnimationEnabled="{TemplateBinding themes:ThemeProperties.IsAnimationEnabled}" SnapsToDevicePixels="True">
                                <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    <ContentPresenter ContentTemplate="{TemplateBinding PopupIndicatorTemplate}" Content="{TemplateBinding PopupIndicator}" Grid.Column="1" HorizontalAlignment="Center" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                </Grid>
                            </shared:ElementChrome>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="State" SourceName="PART_IndicatorArea" Value="Normal"/>
                                        <Condition Property="IsTransparencyModeEnabled" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="PART_IndicatorArea" Value="Transparent"/>
                                    <Setter Property="BorderBrush" TargetName="PART_IndicatorArea" Value="Transparent"/>
                                    <Setter Property="Highlight" TargetName="PART_IndicatorArea" Value="Transparent"/>
                                    <Setter Property="InnerBorderBrush" TargetName="PART_IndicatorArea" Value="Transparent"/>
                                </MultiTrigger>
                                <Trigger Property="IsKeyboardFocused" Value="True">
                                    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonForegroundDefaultedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}"/>
                                    <Setter Property="State" TargetName="PART_IndicatorArea" Value="Defaulted"/>
                                </Trigger>
                                <Trigger Property="IsDefaulted" Value="True">
                                    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonForegroundDefaultedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}"/>
                                    <Setter Property="State" TargetName="PART_IndicatorArea" Value="Defaulted"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonForegroundHoverBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}"/>
                                    <Setter Property="State" TargetName="PART_IndicatorArea" Value="Hover"/>
                                </Trigger>
                                <Trigger Property="IsPopupOpen" Value="True">
                                    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonForegroundPressedBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}"/>
                                    <Setter Property="State" TargetName="PART_IndicatorArea" Value="Pressed"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlForegroundDisabledBrushKey, TypeInTargetAssembly={x:Type themes:AssetResourceKeys}}}"/>
                                    <Setter Property="State" TargetName="PART_IndicatorArea" Value="Disabled"/>
                                </Trigger>
                                <Trigger Property="IsRounded" Value="False">
                                    <Setter Property="CornerRadius" TargetName="PART_IndicatorArea" Value="0"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="themes:ThemeProperties.CornerRadius" Value="0">
                <Setter Property="IsRounded" Value="False"/>
            </Trigger>
        </Style.Triggers>
    </Style>














    <!-- docking:ToolWindowContainer+ -->
    <Style TargetType="{x:Type docking3:ToolWindowContainer}">
        <Setter Property="Background" Value="{StaticResource BaseLightBackground}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Padding" Value="5,2"/>
        <Setter Property="BorderBrush" Value="{StaticResource BaseLightBlue}"/>
        <Setter Property="BorderThickness" Value="1,1,1,1"/>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ToolWindowStyle}"/>
        <!-- 7/27/2010 - Moved panel to ItemsPanel because when using panel directly in a ScrollViewer and changing theme, inherited properties are not properly refreshing on children of panels. -->
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <primitives:DockingWindowTabPanel
						SelectedTab="{Binding RelativeSource={RelativeSource AncestorType={x:Type docking3:ToolWindowContainer}}, Path=SelectedItem}"
						ClipToBounds="True" 
                        CanHorizontallyScroll="False" 
                        CanVerticallyScroll="False" 
                        HorizontalTabSpacing="-1" 
                        Margin="0,0,0,0" 
                        HorizontalAlignment="Left" 
                        IsItemsHost="True"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type docking3:ToolWindowContainer}">

                    <Grid x:Name="rootGrid">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <!-- TitleBar -->



                        <shared:PixelSnapper>
                            <Border x:Name="titleBarBorder"
									Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedItem.HasTitleBarResolved, Converter={StaticResource BooleanToVisibilityConverter}}"
									BorderThickness="1,1,1,1" BorderBrush="{StaticResource BaseLightBlue}" Background="{DynamicResource {x:Static themes:AssetResourceKeys.DockingWindowContainerTitleBarBackgroundInactiveBrushKey}}"
									TextElement.Foreground="{DynamicResource {x:Static themes:AssetResourceKeys.DockingWindowContainerTitleBarGlyphBackgroundInactiveBrushKey}}"
									CornerRadius="{DynamicResource {x:Static themes:AssetResourceKeys.DockingWindowContainerTitleBarBorderNormalCornerRadiusKey}}" SnapsToDevicePixels="True">
                                <DockPanel x:Name="PART_TitleBar" Background="Transparent" Margin="{TemplateBinding Padding}"
										LastChildFill="True">

                                    <!-- Buttons -->
                                    <Button x:Name="closeButton" DockPanel.Dock="Right" Padding="2" Focusable="False"
											Style="{DynamicResource {x:Static themes:SharedResourceKeys.EmbeddedButtonBaseOverrideStyleKey}}"
											ContentTemplate="{DynamicResource {x:Static themes:SharedResourceKeys.CloseGlyphTemplateKey}}"
											Command="{x:Static docking3:DockingCommands.CloseWindow}"
											CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
											ToolTip="{productsDocking:SRExtension UIToolWindowContainerCloseButtonToolTip}"
											Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedItem.CanCloseResolved, Converter={StaticResource BooleanToVisibilityConverter}}"
											AutomationProperties.Name="Close" />

                                    <Button x:Name="autoHideButton" DockPanel.Dock="Right" Padding="2" Focusable="False"
											Style="{StaticResource ToolWindowHeaderButtonStyle}"
											ContentTemplate="{DynamicResource {x:Static themes:SharedResourceKeys.UnpinGlyphTemplateKey}}"
											Command="{x:Static docking3:DockingCommands.ToggleWindowAutoHideState}"
											CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
											ToolTip="{productsDocking:SRExtension UIToolWindowContainerAutoHideButtonToolTip}"
											Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedItem.CanAutoHideResolved, Converter={StaticResource BooleanToVisibilityConverter}}"
											AutomationProperties.Name="Auto-Hide" />

                                    <Button x:Name="maximizeButton" DockPanel.Dock="Right" Padding="2" Focusable="False"
											Style="{StaticResource ToolWindowHeaderButtonStyle}"
											ContentTemplate="{DynamicResource {x:Static themes:SharedResourceKeys.MaximizeGlyphTemplateKey}}"
											Command="{x:Static docking3:WindowCommands.Maximize}"
											CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
											ToolTip="{productsDocking:SRExtension UICommandMaximizeWindowText}"
											Visibility="Collapsed" AutomationProperties.Name="Maximize" />

                                    <Button x:Name="restoreButton" DockPanel.Dock="Right" Padding="2" Focusable="False"
											Style="{StaticResource ToolWindowHeaderButtonStyle}"
											ContentTemplate="{DynamicResource {x:Static themes:SharedResourceKeys.RestoreGlyphTemplateKey}}"
											Command="{x:Static docking3:WindowCommands.Restore}"
											CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
											ToolTip="{productsDocking:SRExtension UICommandRestoreWindowText}"
											Visibility="Collapsed" AutomationProperties.Name="Restore" />

                                    <shared:PopupButton x:Name="optionsButton" DockPanel.Dock="Right" DisplayMode="PopupOnly" Padding="2" Focusable="False"
											Style="{DynamicResource {x:Static themes:SharedResourceKeys.EmbeddedPopupButtonOverrideStyleKey}}"
											PopupIndicatorTemplate="{DynamicResource {x:Static themes:SharedResourceKeys.DropDownArrowGlyphTemplateKey}}"
											Command="{x:Static docking3:DockingCommands.OpenOptionsMenu}"
											CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
											CommandParameter="{x:Static docking3:DockingContextMenuType.DockingWindowOptionsButton}"
											ToolTip="{productsDocking:SRExtension UIToolWindowContainerOptionsButtonToolTip}"
											Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedItem.HasOptionsResolved, Converter={StaticResource BooleanToVisibilityConverter}}"
											AutomationProperties.Name="Options" />

                                    <primitives:ReverseMeasureDockPanel>

                                        <!-- Title -->
                                        <shared:PixelSnapper DockPanel.Dock="Left" VerticalAlignment="Center">
                                            <TextBlock x:Name="title" Margin="3,1,3,1" TextTrimming="CharacterEllipsis"
													Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedItem.Title}"
													Foreground="{DynamicResource {x:Static themes:AssetResourceKeys.DockingWindowContainerTitleBarForegroundInactiveBrushKey}}"
													AutomationProperties.Name="Title" />
                                        </shared:PixelSnapper>

                                        <Image x:Name="contextImage" DockPanel.Dock="Left"
												AutomationProperties.Name="Context Image" Stretch="None"
												Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedItem.ContextImageSource}"
												VerticalAlignment="Center" SnapsToDevicePixels="True" Margin="2,1,2,1" />

                                    </primitives:ReverseMeasureDockPanel>
                                </DockPanel>
                            </Border>
                        </shared:PixelSnapper>





                        <!-- Content -->
                        <Border Grid.Row="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness, Converter={StaticResource ThicknessConverter}, ConverterParameter='Left,Right,Bottom'}" 
								SnapsToDevicePixels="True">
                            <Border
									Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedItem.Background}"
									BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedItem.BorderBrush}"
									BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedItem.BorderThickness}"
									SnapsToDevicePixels="True">
                                <shared:TransitionPresenter x:Name="PART_SelectedContentHost" DefaultDuration="0:0:0.15"
										TransitionSelector="{TemplateBinding docking3:DockSite.ToolWindowTransitionSelector}"
										Content="{TemplateBinding SelectedContent}"
										ContentTemplate="{TemplateBinding SelectedContentTemplate}"
										ContentTemplateSelector="{TemplateBinding SelectedContentTemplateSelector}" />
                            </Border>
                        </Border>

                        <!-- TabPanelSpacer -->
                        <Border x:Name="tabPanelSpacer" Grid.Row="3" VerticalAlignment="Top"
								Background="{DynamicResource {x:Static themes:AssetResourceKeys.ToolWindowContainerTabItemBackgroundSelectedBrushKey}}"
								BorderThickness="1,0,1,1"
								BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ToolWindowContainerTabItemBorderSelectedBrushKey}}"
								Padding="{TemplateBinding HeaderMargin, Converter={StaticResource ThicknessConverter}, ConverterParameter='Top'}"
								/>

                        <!-- TabPanel -->
                        <Grid x:Name="tabPanelGrid" Grid.Row="3"
							  Margin="{TemplateBinding HeaderMargin}"
							  TextElement.Foreground="{DynamicResource {x:Static themes:AssetResourceKeys.ToolWindowContainerTabControlForegroundNormalBrushKey}}"
							  Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsTabBarVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <ScrollViewer x:Name="scrollViewer" CanContentScroll="True" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Disabled"
									primitives:DockingWindowTabPanel.IsStretched="True" primitives:DockingWindowTabPanel.StretchDirection="DownOnly"
									Style="{DynamicResource {x:Static themes:DockingResourceKeys.DockingTabScrollViewerStyleKey}}">
                                <ItemsPresenter />
                            </ScrollViewer>

                            <shared:PopupButton x:Name="toolsButton" Grid.Column="1" DisplayMode="PopupOnly" Margin="1,2,1,2" Padding="1" Focusable="False"
									Style="{DynamicResource {x:Static themes:SharedResourceKeys.EmbeddedPopupButtonOverrideStyleKey}}"
									PopupIndicatorTemplate="{DynamicResource {x:Static themes:SharedResourceKeys.DropDownArrowGlyphTemplateKey}}"
									Command="{x:Static docking3:DockingCommands.OpenToolsMenu}"
									CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
									CommandParameter="{Binding RelativeSource={RelativeSource Self}}"
									ToolTip="{productsDocking:SRExtension UIToolWindowContainerToolsButtonToolTip}"
									AutomationProperties.Name="Tool Windows" Visibility="Collapsed" />
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="docking3:DockingWindowContainer.IsActive" Value="True">
                            <Setter TargetName="titleBarBorder" Property="Background"
									Value="{DynamicResource {x:Static themes:AssetResourceKeys.DockingWindowContainerTitleBarBackgroundActiveBrushKey}}" />
                            <Setter TargetName="titleBarBorder" Property="TextElement.Foreground"
									Value="{DynamicResource {x:Static themes:AssetResourceKeys.DockingWindowContainerTitleBarGlyphBackgroundActiveBrushKey}}" />
                            <Setter TargetName="title" Property="Foreground"
									Value="{DynamicResource {x:Static themes:AssetResourceKeys.DockingWindowContainerTitleBarForegroundActiveBrushKey}}" />
                        </Trigger>
                        <Trigger Property="AllTabsVisible" Value="False">
                            <Setter TargetName="toolsButton" Property="PopupIndicatorTemplate" Value="{DynamicResource {x:Static themes:SharedResourceKeys.OverflowDropDownArrowGlyphTemplateKey}}" />
                        </Trigger>
                        <Trigger Property="TabOverflowBehaviorResolved" Value="None">
                            <Setter TargetName="scrollViewer" Property="primitives:DockingWindowTabPanel.IsStretched" Value="False" />
                        </Trigger>
                        <Trigger Property="TabOverflowBehaviorResolved" Value="Menu">
                            <Setter TargetName="scrollViewer" Property="primitives:DockingWindowTabPanel.IsStretched" Value="False" />
                            <Setter TargetName="toolsButton" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="TabOverflowBehaviorResolved" Value="ShrinkWithMenu">
                            <Setter TargetName="toolsButton" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="TabOverflowBehaviorResolved" Value="Scroll">
                            <Setter TargetName="scrollViewer" Property="HorizontalScrollBarVisibility" Value="Visible" />
                            <Setter TargetName="scrollViewer" Property="primitives:DockingWindowTabPanel.IsStretched" Value="False" />
                        </Trigger>
                        <Trigger Property="TabOverflowBehaviorResolved" Value="ScrollWithMenu">
                            <Setter TargetName="scrollViewer" Property="HorizontalScrollBarVisibility" Value="Visible" />
                            <Setter TargetName="scrollViewer" Property="primitives:DockingWindowTabPanel.IsStretched" Value="False" />
                            <Setter TargetName="toolsButton" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSingleWindow" Value="True" />
                                <Condition Property="SingleTabLayoutBehaviorResolved" Value="Hide" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="tabPanelSpacer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="tabPanelGrid" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSingleWindow" Value="True" />
                                <Condition Property="SingleTabLayoutBehaviorResolved" Value="Stretch" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="scrollViewer" Property="HorizontalContentAlignment" Value="Stretch" />
                            <Setter TargetName="scrollViewer" Property="HorizontalScrollBarVisibility" Value="Hidden" />
                            <Setter TargetName="scrollViewer" Property="primitives:DockingWindowTabPanel.IsStretched" Value="True" />
                            <Setter TargetName="scrollViewer" Property="primitives:DockingWindowTabPanel.StretchDirection" Value="Both" />
                            <Setter TargetName="toolsButton" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                        <Trigger Property="HasWindows" Value="False">
                            <Setter TargetName="rootGrid" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="State" Value="AutoHide">
                            <Setter TargetName="tabPanelSpacer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="autoHideButton" Property="ContentTemplate" Value="{DynamicResource {x:Static themes:SharedResourceKeys.PinGlyphTemplateKey}}" />
                        </Trigger>
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=State, RelativeSource={RelativeSource Self}}" Value="Floating" />
                                <Condition Binding="{Binding Path=SelectedItem.CanMaximizeResolved, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=(primitives:RaftableDockingWindowContainer.CanContainerMaximize), RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=(primitives:RaftableDockingWindowContainer.IsMaximized), RelativeSource={RelativeSource Self}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="maximizeButton" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=State, RelativeSource={RelativeSource Self}}" Value="Floating" />
                                <Condition Binding="{Binding Path=SelectedItem.CanMaximizeResolved, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=(primitives:RaftableDockingWindowContainer.CanContainerMaximize), RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=(primitives:RaftableDockingWindowContainer.IsMaximized), RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="restoreButton" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>-->
                        <Trigger SourceName="contextImage" Property="Source" Value="{x:Null}">
                            <Setter TargetName="contextImage" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger SourceName="tabPanelSpacer" Property="Padding" Value="0">
                            <Setter TargetName="tabPanelSpacer" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="docking3:DockSite.ToolWindowsTabPlacement" Value="Top">
                            <Setter TargetName="titleBarBorder" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=BorderThickness}" />
                            <Setter TargetName="tabPanelSpacer" Property="Grid.Row" Value="1" />
                            <Setter TargetName="tabPanelSpacer" Property="BorderThickness" Value="1,1,1,0" />
                            <Setter TargetName="tabPanelSpacer" Property="Padding" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=HeaderMargin, Converter={StaticResource ThicknessConverter}, ConverterParameter='Bottom'}" />
                            <Setter TargetName="tabPanelSpacer" Property="VerticalAlignment" Value="Bottom" />
                            <Setter TargetName="tabPanelGrid" Property="Grid.Row" Value="1" />
                            <Setter Property="HeaderMargin" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolWindowContainerTabControlHeaderTopMarginNormalThicknessKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


























    <!--ToolWindowStyle-->

    <Style x:Key="ToolWindowStyle" TargetType="{x:Type docking3:ToolWindow}">
        <Setter Property="FontSize" Value="12"/>


        <Setter Property="Background" Value="{StaticResource BaseLightBackground}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="TabBackground" Value="{x:Null}"/>
        <Setter Property="TabBorderBrush" Value="#FF92aebf"/>
        <Setter Property="TabForeground" Value="#D8000D21"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="Padding" Value="10,2,10,2"/>
        <Setter Property="Template">
            <Setter.Value>

                <ControlTemplate  TargetType="{x:Type docking3:ToolWindow}">
                    <shared:TintableBorder x:Name="border" BorderBrush="{TemplateBinding TabBorderBrush}"  Background="{TemplateBinding TabBackground}" ClipToBounds="True" TextElement.Foreground="{TemplateBinding TabForeground}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True" TintColor="{TemplateBinding TabTintColor}" ToolTip="{TemplateBinding ToolTip}" CornerRadius="0,0,0,0">
                        <!--<shared:TintableBorder.BorderThickness>
    			<TemplateBinding ConverterParameter="Left,Right,Bottom" Property="TabBorderThickness">
    				<TemplateBinding.Converter>
    					<shared:ThicknessConverter/>
    				</TemplateBinding.Converter>
    			</TemplateBinding>
    		</shared:TintableBorder.BorderThickness>-->
                        <shared:PixelSnapper>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Image x:Name="image" Grid.Column="0" Height="16" Margin="0,1,4,0" AutomationProperties.Name="Image" Source="{TemplateBinding ImageSource}" Stretch="None" SnapsToDevicePixels="True" VerticalAlignment="Top" Width="16"/>
                                <primitives:TruncationDecorator x:Name="truncationDecorator" Grid.Column="1" IsTruncated="{Binding IsTitleTruncated, Mode=OneWayToSource, RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed">
                                    <TextBlock x:Name="title" Margin="0,0,0,1" AutomationProperties.Name="Title" SnapsToDevicePixels="True" Text="{TemplateBinding Title}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
                                </primitives:TruncationDecorator>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="1" Margin="0,0,0,1" VerticalAlignment="Center"/>

                            </Grid>
                        </shared:PixelSnapper>
                    </shared:TintableBorder>
                    <ControlTemplate.Triggers>
                        <Trigger Property="docking3:DockSite.ToolWindowsTabPlacement" Value="Bottom">
                            <Setter Property="TabBackground" Value="{StaticResource BaseLightGray}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="1,0,1,1"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource BaseDarkGray}"/>
                        </Trigger>
                        <Trigger Property="docking3:DockSite.ToolWindowsTabPlacement" Value="Top">
                            <Setter Property="BorderThickness" TargetName="border" Value="1,1,1,0"/>
                          
                            <Setter Property="CornerRadius" TargetName="border" Value="2,2,0,0">
                                <!--<Setter.Value>
    					<Binding ConverterParameter="Top" Path="(themes:ThemeProperties.CornerRadius)" RelativeSource="{RelativeSource TemplatedParent}">
    						<Binding.Converter>
    							<shared:CornerRadiusConverter/>
    						</Binding.Converter>
    					</Binding>
    				</Setter.Value>-->
                            </Setter>
                            <Setter Property="Margin" TargetName="image" Value="0,0,0,0"/>
                        </Trigger>
                        <Trigger Property="ImageSource" Value="{x:Null}">
                            <Setter Property="Margin" TargetName="image" Value="0"/>
                            <Setter Property="Visibility" TargetName="image" Value="Hidden"/>
                            <Setter Property="Width" TargetName="image" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="TabBackground" Value="{StaticResource BaseDarkGray}"/>
                            <Setter Property="TabBorderBrush" Value="{StaticResource BaseLightBlue}"/>
                            <Setter Property="TabForeground" Value="Black"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="TabBackground" Value="{StaticResource BaseLightBackground}"/>
                            <Setter Property="TabBorderBrush" Value="{StaticResource BaseLightBlue}"/>
                            <Setter Property="TabForeground" Value="black"/>
                        </Trigger>
                        <Trigger Property="IsTitleTruncated" Value="True">
                            <Setter Property="ToolTip" Value="{Binding Title, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Header" Value="{x:Null}"/>
                                <Condition Property="HeaderTemplate" Value="{x:Null}"/>
                                <Condition Property="HeaderTemplateSelector" Value="{x:Null}"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="contentPresenter" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="truncationDecorator" Value="Visible"/>
                        </MultiTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="False">
                                    <Condition.Binding>
                                        <Binding Path="TabTintColor" RelativeSource="{RelativeSource Self}">
                                            <Binding.Converter>
                                                <shared:IsNullOrTransparentBrushConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding Path="TabBackground" RelativeSource="{RelativeSource Self}">
                                            <Binding.Converter>
                                                <shared:IsNullOrTransparentBrushConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="#44AAAAAA"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="False">
                                    <Condition.Binding>
                                        <Binding Path="TabTintColor" RelativeSource="{RelativeSource Self}">
                                            <Binding.Converter>
                                                <shared:IsNullOrTransparentBrushConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding Path="TabBorderBrush" RelativeSource="{RelativeSource Self}">
                                            <Binding.Converter>
                                                <shared:IsNullOrTransparentBrushConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="border" Value="#AAAAAAAA"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="0"/>



    </Style>



    

    <!--ToolWindowStyle1-->
    <Style x:Key="ToolWindowStyle1" TargetType="{x:Type docking3:ToolWindow}">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Background" Value="{StaticResource BaseLightBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource BaseDarkFontColor}"/>
        <Setter Property="TabBackground" Value="White"/>
        <Setter Property="TabBorderBrush" Value="White"/>
        <Setter Property="TabForeground" Value="{StaticResource BaseDarkFontColor}"/>
        <Setter Property="Margin" Value="0,0,0,2"/>
        <Setter Property="Template">
            <Setter.Value>

                <ControlTemplate  TargetType="{x:Type docking3:ToolWindow}">
                    <shared:TintableBorder x:Name="border" Background="Transparent" BorderBrush="{TemplateBinding TabBorderBrush}"  TextElement.Foreground="{TemplateBinding TabForeground}" SnapsToDevicePixels="True" TintColor="{TemplateBinding TabTintColor}" ToolTip="{TemplateBinding ToolTip}" CornerRadius="0" Margin="0,0,0,0" MinHeight="23">
                        <shared:PixelSnapper d:IsHidden="True">
                            <Border x:Name="border1" BorderBrush="{StaticResource BaseMoreLightBlue}" BorderThickness="1,1,1,0" CornerRadius="0" Margin="0,0,0,0" Background="{StaticResource BaseLightGray}" d:IsHidden="True">
                                <Grid Margin="5,0,5,0" d:IsHidden="True">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Rectangle Grid.Column="0"  x:Name="contextIcon" Fill="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,5,0" Stroke="{x:Null}" VerticalAlignment="Center" Width="20" Height="20" Visibility="Visible" />
                                    <!-- <Image x:Name="image" Grid.Column="1" Height="16" Margin="0,2,4,-1" AutomationProperties.Name="Image" Source="{TemplateBinding ImageSource}" Stretch="Uniform" SnapsToDevicePixels="True" VerticalAlignment="Center" Width="16"/>-->
                                    <primitives:TruncationDecorator x:Name="truncationDecorator" Grid.Column="1" IsTruncated="{Binding IsTitleTruncated, Mode=OneWayToSource, RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" d:IsHidden="True">
                                        <TextBlock x:Name="title" AutomationProperties.Name="Title" SnapsToDevicePixels="True" Text="{TemplateBinding Title}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" />
                                    </primitives:TruncationDecorator>
                                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="1"  VerticalAlignment="Center"/>
                                   <Rectangle Grid.Column="0" x:Name="decorator"  Grid.ColumnSpan="2"  Margin="-5,0,-5,-1" Fill="{StaticResource BaseLightBackground}" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Visibility="Collapsed"  Height="1" />


                                </Grid>
                            </Border>
                        </shared:PixelSnapper>
                    </shared:TintableBorder>
                    <ControlTemplate.Triggers>
                        <Trigger Property="docking3:DockSite.ToolWindowsTabPlacement" Value="Top">
                            <Setter Property="BorderThickness" TargetName="border" Value="1,1,1,1">
                                <!--<Setter.Value>
                                    <Binding ConverterParameter="Left,Top,Right" Path="TabBorderThickness" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <shared:ThicknessConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </Setter.Value>-->
                            </Setter>
                        </Trigger>
                        <Trigger Property="Tag" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="contextIcon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ImageSource" Value="{x:Null}">
                            <!--<Setter Property="Visibility" TargetName="contextIcon" Value="Collapsed"/>
                           <Setter Property="Margin" TargetName="image" Value="0"/>
    			<Setter Property="Visibility" TargetName="image" Value="Hidden"/>
    			<Setter Property="Width" TargetName="image" Value="0"/>-->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border1" Value="{StaticResource BaseDarkGray}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="border1" Value="{StaticResource BaseLightBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border1" Value="{StaticResource BaseLightBlue}"/>
                            <!--<Setter Property="Margin" Value="-1,0,1,1"/>
                            <Setter Property="Margin" TargetName="contextIcon" Value="0,1,5,0"/>-->
                            <Setter Property="Visibility" TargetName="decorator" Value="Visible"/>
                            <!--<Setter Property="Margin" TargetName="border" Value="0,0,0,0"/>-->
                        </Trigger>
                        <Trigger Property="IsTitleTruncated" Value="True">
                            <Setter Property="ToolTip" Value="{Binding Title, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Header" Value="{x:Null}"/>
                                <Condition Property="HeaderTemplate" Value="{x:Null}"/>
                                <Condition Property="HeaderTemplateSelector" Value="{x:Null}"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="contentPresenter" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="truncationDecorator" Value="Visible"/>
                        </MultiTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="False">
                                    <Condition.Binding>
                                        <Binding Path="TabTintColor" RelativeSource="{RelativeSource Self}">
                                            <Binding.Converter>
                                                <shared:IsNullOrTransparentBrushConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding Path="TabBackground" RelativeSource="{RelativeSource Self}">
                                            <Binding.Converter>
                                                <shared:IsNullOrTransparentBrushConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="#44AAAAAA"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="False">
                                    <Condition.Binding>
                                        <Binding Path="TabTintColor" RelativeSource="{RelativeSource Self}">
                                            <Binding.Converter>
                                                <shared:IsNullOrTransparentBrushConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding Path="TabBorderBrush" RelativeSource="{RelativeSource Self}">
                                            <Binding.Converter>
                                                <shared:IsNullOrTransparentBrushConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="border" Value="#AAAAAAAA"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    

    <!--TabbedMdiContainer + -->
    <Style  TargetType="{x:Type docking3:TabbedMdiContainer}">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Background" Value="{StaticResource BaseLightBackground}"/>
        <Setter Property="BorderThickness" Value="1,1,1,1"/>
        <Setter Property="BorderBrush" Value="{StaticResource BaseLightBlue}"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ToolWindowStyle1}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel  Margin="0,0,0,0" HorizontalAlignment="Left" IsItemsHost="True" />
                    <!--<docking:DockingWindowTabPanel CanHorizontallyScroll="False" CanVerticallyScroll="False" HorizontalTabSpacing="0" Margin="5,0,0,0" HorizontalAlignment="Left" IsItemsHost="True" SelectedTab="{Binding SelectedItem, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type docking:TabbedMdiContainer}}}"/>-->
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="Template" Value="{StaticResource TabbedMdiContainerControlTemplate}"/>-->
    </Style>



    <Style x:Key="ToolWindowNonDragStyle" BasedOn="{StaticResource ToolWindowStyle1}" TargetType="{x:Type docking3:ToolWindow}">
        <Setter Property="CanDockTop" Value="True"/>
        <Setter Property="CanDockRight" Value="False"/>
        <Setter Property="CanDockLeft" Value="False"/>
        <Setter Property="CanDockBottom" Value="False"/>
        <Setter Property="CanDrag" Value="False"/>
        <Setter Property="CanDragToLinkedDockSites" Value="False"/>
        <Setter Property="CanBecomeDocument" Value="False"/>
        <Setter Property="CanMaximize" Value="False"/>
        <Setter Property="CanRaft" Value="False"/>
        <Setter Property="CanStandardMdiMaximize" Value="False"/>
        <Setter Property="CanStandardMdiMinimize" Value="False"/>
    </Style>

    <Style x:Key="ToolWindowDarkStyle" BasedOn="{StaticResource ToolWindowStyle1}" TargetType="{x:Type docking3:ToolWindow}">
        <Setter Property="TabForeground" Value="#D8000D21"/>
    </Style>


    <Style  x:Key="TabbedMdiDarkContainer" TargetType="{x:Type docking3:TabbedMdiContainer}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ToolWindowDarkStyle}"/>
    </Style>





</ResourceDictionary>