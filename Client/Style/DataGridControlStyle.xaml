<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"    
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"
    xmlns:arm="ARMVisual"                    
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
    xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/DrawingBrushResource.xaml"/>
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/SimpleScrollBar.xaml"/>
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/ExpanderStyle.xaml"/>
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/BrushResource.xaml"/>
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/TextBoxStyle.xaml"/>
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/ListBoxStyle.xaml"/>
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/IgXamGrid.xaml"/> 
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/NewDrawingBrushResource.xaml"/>
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/CheckBoxStyle.xaml"/>
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/RadioButtonStyle.xaml"/>
        <ResourceDictionary Source="/ElectroARM_Styles;Component/Style/BaseToolTipStyle.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <xcdg:IndexToOddConverter x:Key="rowIndexConverter"/>


    <DataTemplate x:Key="currentItemGlyph">
        <Path Margin="0,2,0,0" 
            Opacity="1"
            Data="M 5,4.46875 C5,4.46875 0,0 0,0 0,0 0,9 0,9 0,9 5,4.46875 5,4.46875 z" Fill="#FFFFFFFF"/>
    </DataTemplate>


    <Style x:Key="ExportExcelContentButton" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Padding" Value="6,0,0,0"/>
        <Setter Property="FontSize" Value="{StaticResource BaseFontSizeM}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource BaseLightGray}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid  Opacity="1" SnapsToDevicePixels="True" UseLayoutRounding="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="25"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}" SnapsToDevicePixels="true"/>
                        <ContentPresenter  x:Name="contentPresenter" TextElement.Foreground="{StaticResource BaseDarkFontColor}"   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,0,4,0"/>
                        <Rectangle Fill="{StaticResource     ExportGreedBrush}" Stroke="{x:Null}" Height="18px" Width="18px"  Margin="{Binding Path=Padding, RelativeSource={RelativeSource TemplatedParent}}"  VerticalAlignment="Stretch"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource BaseDarkGray}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource BaseLightBlue}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExportExcelGridButton" TargetType="{x:Type Button}">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid VerticalAlignment="Stretch" Background="{StaticResource BaseLightControlBackground}"   HorizontalAlignment="Stretch" x:Name="grid" SnapsToDevicePixels="True">
                        <Rectangle Fill="{StaticResource     ExportGreedBrush}"  Stroke="{x:Null}"  Width="19" Height="19"  SnapsToDevicePixels="True"/>
                        <Border x:Name="border"   BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" >
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource BaseMoreDarkBlue}"/>
                            <Setter Property="Background" TargetName="grid" Value="{StaticResource BaseDarkGray}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true"/>
                        <Trigger Property="IsDefaulted" Value="true"/>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

   


    <!-- Glyph that is displayed in a ColumnManagerCell or GroupByItem when a descending sort is applied to a column. -->

    <DataTemplate x:Key="descendingSortGlyph">
        <Canvas Width="9"
              Height="5">

            <Path Opacity="1"
               Data="M 4.53125,5 C4.53125,5 9,0.15625 9,0.15625 9,0.15625 0,0.15625 0,0.15625 0,0.15625 4.53125,5 4.53125,5 z" Fill="#FF000000" RenderTransformOrigin="0.5,0.5">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                        <SkewTransform AngleX="0" AngleY="0"/>
                        <RotateTransform Angle="180"/>
                        <TranslateTransform X="0" Y="0"/>
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
        </Canvas>
    </DataTemplate>

    <DataTemplate x:Key="ascendingSortGlyph">
        <Canvas Width="9"
              Height="5">

            <Path Opacity="1"
               Data="M 4.53125,5 C4.53125,5 9,0.15625 9,0.15625 9,0.15625 0,0.15625 0,0.15625 0,0.15625 4.53125,5 4.53125,5 z" Fill="#FF000000"/>
        </Canvas>
    </DataTemplate>
    <!--Brush-->



   

    <!--Темплейт для более корректного отображения группы в гриде-->
    <DataTemplate DataType="{x:Type xcdg:Group}">
        <DataTemplate.Resources>
            <DataTemplate x:Key="detailedGroupItemContentTemplate">
                <StackPanel Orientation="Horizontal"
                        VerticalAlignment="Center">

                    <ContentControl Content="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:GroupNavigationControl.Group).Value}"
                               ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:GroupNavigationControl.Group).ValueTemplate}"
                               ContentTemplateSelector="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:GroupNavigationControl.Group).ValueTemplateSelector}"
                               
                               VerticalAlignment="Center" />

                    <TextBlock Text=" ( элементов " VerticalAlignment="Center" />
                    <TextBlock Text="{Binding ItemCount}" VerticalAlignment="Center" />
                    <TextBlock Text=")" VerticalAlignment="Center" />

                </StackPanel>
            </DataTemplate>

            <DataTemplate x:Key="groupItemContentTemplate">
                <ContentControl Content="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:GroupNavigationControl.Group).Value}"
                            ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:GroupNavigationControl.Group).ValueTemplate}"
                            ContentTemplateSelector="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:GroupNavigationControl.Group).ValueTemplateSelector}" />
            </DataTemplate>

            <DataTemplate x:Key="parentGroupTemplate">
                <xcdg:GroupNavigationControl Group="{Binding}"
                                          MainItemTemplate="{StaticResource groupItemContentTemplate}"
                                          ItemTemplate="{StaticResource groupItemContentTemplate}" />
            </DataTemplate>
        </DataTemplate.Resources>

        <StackPanel Orientation="Horizontal">
            <ItemsControl ItemsSource="{Binding Path=ParentGroups}"
                       ItemTemplate="{StaticResource parentGroupTemplate}"
                       Focusable="False">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal"
                              IsItemsHost="True" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>

            <xcdg:GroupNavigationControl Group="{Binding}"
                                       MainItemTemplate="{StaticResource detailedGroupItemContentTemplate}"
                                       ItemTemplate="{StaticResource groupItemContentTemplate}" />
        </StackPanel>
    </DataTemplate>

   
    <!--end brush-->
    <ControlTemplate x:Key="BaseScrollTip"  TargetType="{x:Type xcdg:ScrollTip}">
        <Grid HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
            <Border BorderThickness="1,1,1,1" CornerRadius="0" BorderBrush="{StaticResource BaseLightBorder}" Background="{StaticResource BaseLightBackground}">
                <ContentPresenter HorizontalAlignment="Right" Margin="5,5,5,5" VerticalAlignment="Center" TextElement.Foreground="{TemplateBinding Foreground}" Content="{TemplateBinding Content}" ContentTemplate="{Binding Path=(xcdg:DataGridControl.DataGridContext).ScrollTipContentTemplate, RelativeSource={RelativeSource Self}}"/>
            </Border>
        </Grid>
    </ControlTemplate>

    <!-- Glyph that is displayed in the group headers to expand the group. -->
    <DataTemplate x:Key="insertionRowGlyph">
        <Rectangle Width="9.468750"
                    Height="9.468750">
            <Rectangle.Fill>
                <DrawingBrush>
                    <DrawingBrush.Drawing>
                        <DrawingGroup>
                            <DrawingGroup>
                                <!-- Layer 1/<Path> -->
                                <GeometryDrawing Brush="#FFFFFFFF"
                        			Geometry="F1 M 5.064941,4.750000 C 5.064941,7.355957 5.515625,9.468750 4.734375,9.468750 C 3.953125,9.468750 4.403809,7.355957 4.403809,4.750000 L 4.403809,4.718750 C 4.403809,2.112793 3.953125,0.000000 4.734375,0.000000 C 5.515625,0.000000 5.064941,2.112793 5.064941,4.718750 L 5.064941,4.750000 Z"/>
                                <!-- Layer 1/<Path> -->
                                <GeometryDrawing Brush="#FFFFFFFF"
                        			Geometry="F1 M 4.718750,5.064941 C 2.112793,5.064941 0.000000,5.515625 0.000000,4.734375 C 0.000000,3.953125 2.112793,4.403809 4.718750,4.403809 L 4.750000,4.403809 C 7.355957,4.403809 9.468750,3.953125 9.468750,4.734375 C 9.468750,5.515625 7.355957,5.064941 4.750000,5.064941 L 4.718750,5.064941 Z"/>
                                <!-- Layer 1/<Path> -->
                                <GeometryDrawing Brush="#FFDBFBFF"
                        			Geometry="F1 M 4.957031,4.979004 C 3.114258,6.821777 1.938965,8.634766 1.386719,8.082031 C 0.833984,7.529785 2.646973,6.354492 4.489746,4.511719 L 4.511719,4.489746 C 6.354492,2.646973 7.529785,0.833984 8.082031,1.386719 C 8.634277,1.938965 6.821777,3.114258 4.979004,4.957031 L 4.957031,4.979004 Z"/>
                                <!-- Layer 1/<Path> -->
                                <GeometryDrawing Brush="#FFDBFBFF"
                        			Geometry="F1 M 4.489746,4.957031 C 2.646973,3.114258 0.833984,1.938965 1.386719,1.386719 C 1.938965,0.833984 3.114258,2.646973 4.957031,4.489746 L 4.979004,4.511719 C 6.821777,6.354492 8.634277,7.529785 8.082031,8.082031 C 7.529785,8.634766 6.354492,6.821777 4.511719,4.979004 L 4.489746,4.957031 Z"/>
                            </DrawingGroup>
                        </DrawingGroup>
                    </DrawingBrush.Drawing>
                </DrawingBrush>
            </Rectangle.Fill>
        </Rectangle>
    </DataTemplate>

    <DataTemplate x:Key="expandGroupGlyph">
        <DataTemplate.Resources>
            <Storyboard x:Key="ExpanderAnimation" Timeline.DesiredFrameRate="10">
                <ColorAnimationUsingKeyFrames BeginTime="0" Duration="0:0:0.001" Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="ExpansionIndicatorGlyph">
                    <SplineColorKeyFrame KeyTime="0" Value="{StaticResource BaseMoreDarkBlueColor}"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="0" Duration="0:0:0.001" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="ExpansionIndicatorGlyph">
                    <SplineColorKeyFrame KeyTime="0" Value="{StaticResource BaseMoreDarkBlueColor}"/>
                </ColorAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="ExitExpanderAnimation" Timeline.DesiredFrameRate="10">
                <ColorAnimationUsingKeyFrames BeginTime="0" Duration="0:0:0.001" Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="ExpansionIndicatorGlyph">
                    <SplineColorKeyFrame KeyTime="0" Value="{StaticResource BaseDarkBlueColor}"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="0" Duration="0:0:0.001" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="ExpansionIndicatorGlyph">
                    <SplineColorKeyFrame KeyTime="0" Value="Transparent"/>
                </ColorAnimationUsingKeyFrames>
            </Storyboard>
        </DataTemplate.Resources>

        <Grid x:Name="ExpansionIndicator" Width="22" Height="22" Background="Transparent" VerticalAlignment="Center" HorizontalAlignment="Center" >
            <Path x:Name="ExpansionIndicatorGlyph" Width="5" Height="9"  Stretch="Fill" StrokeThickness="1" Fill="Transparent"  StrokeMiterLimit="2.75" RenderTransformOrigin="0.5,0.5"  Stroke="{StaticResource BaseDarkBlue}" Data="F1 M 10.2622,0.708332L 16.2622,6.04167L 10.2622,11.375L 10.2622,0.708332 Z " VerticalAlignment="Stretch" Margin="1,0,0,0">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform/>
                        <SkewTransform/>
                        <RotateTransform/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
        </Grid>

        <DataTemplate.Triggers>
            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <BeginStoryboard Storyboard="{StaticResource ExpanderAnimation}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="Mouse.MouseLeave">
                <BeginStoryboard Storyboard="{StaticResource ExitExpanderAnimation}"/>
            </EventTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Glyph that is displayed in the group headers to collapse the group. -->
    <DataTemplate x:Key="collapseGroupGlyph">

        <DataTemplate.Resources>
            <Storyboard x:Key="CollapseAnimation" Timeline.DesiredFrameRate="10">
                <ColorAnimationUsingKeyFrames BeginTime="0" Duration="0:0:0.001" Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="ExpansionIndicatorGlyph">
                    <SplineColorKeyFrame KeyTime="0" Value="{StaticResource BaseMoreDarkBlueColor}"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="0" Duration="0:0:0.001" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="ExpansionIndicatorGlyph">
                    <SplineColorKeyFrame KeyTime="0" Value="{StaticResource BaseMoreDarkBlueColor}"/>
                </ColorAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="ExitCollapseAnimation" Timeline.DesiredFrameRate="10">
                <ColorAnimationUsingKeyFrames BeginTime="0" Duration="0:0:0.001" Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="ExpansionIndicatorGlyph">
                    <SplineColorKeyFrame KeyTime="0" Value="{StaticResource BaseDarkBlueColor}"/>
                </ColorAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames BeginTime="0" Duration="0:0:0.001" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="ExpansionIndicatorGlyph">
                    <SplineColorKeyFrame KeyTime="0" Value="{StaticResource BaseDarkBlueColor}"/>
                </ColorAnimationUsingKeyFrames>
            </Storyboard>
        </DataTemplate.Resources>

        <Grid x:Name="ExpansionIndicator" Width="22" Height="22" VerticalAlignment="Center" HorizontalAlignment="Center" Background="Transparent" >
            <Path x:Name="ExpansionIndicatorGlyph" Width="5" Height="9"  Stroke="{StaticResource BaseDarkBlue}"  Stretch="Fill" StrokeThickness="1" Fill="{StaticResource BaseDarkBlue}"  StrokeMiterLimit="2.75" RenderTransformOrigin="0.5,0.5"   Data="F1 M 10.2622,0.708332L 16.2622,6.04167L 10.2622,11.375L 10.2622,0.708332 Z " VerticalAlignment="Stretch" Margin="1,0,0,0">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform/>
                        <SkewTransform/>
                        <RotateTransform Angle="45"/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
        </Grid>

        <DataTemplate.Triggers>
            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <BeginStoryboard Storyboard="{StaticResource CollapseAnimation}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="Mouse.MouseLeave">
                <BeginStoryboard Storyboard="{StaticResource ExitCollapseAnimation}"/>
            </EventTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>







    <!--<DataTemplate x:Key="Column_CellContent_AlignCenter">
        <TextBlock Text="{Binding Path=.}"  VerticalAlignment="Center" Block.TextAlignment="Center"/>
    </DataTemplate>
    
    <Style TargetType="{x:Type xcdg:Column}">
        <Setter Property="CellContentTemplate" Value="{StaticResource Column_CellContent_AlignCenter}" />
    </Style>-->





    <!--ColumnManagerRow-->
    <Style TargetType="{x:Type xcdg:ColumnManagerRow}">
        <Setter Property="Background"  Value="{x:Null}"/>
        <Setter Property="BorderBrush"  Value="{x:Null}"/>
        <Setter Property="BorderThickness"  Value="0.5,1,0.5,0"/>
    </Style>

    <Style x:Key="tableViewTotalStatCellStyle"
          TargetType="{x:Type xcdg:StatCell}">

        <!-- The line(s) will be of the same color as the HorizontalGridLine. -->
        <Setter Property="BorderBrush"
              Value="red"/>


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xcdg:StatCell}">
                    <Border
                       BorderThickness="{TemplateBinding BorderThickness}"
                       Padding="{TemplateBinding Padding}">
                        <StackPanel>
                            <Border x:Name="totalBorder"
                             BorderBrush="{StaticResource BaseLightBorder}"
                             BorderThickness="0,1,0,0"/>

                            <xcdg:CellContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>

                        <DataTrigger Binding="{Binding Path=ParentColumn.Visible, RelativeSource={RelativeSource Self}}"
                               Value="False">
                            <Setter Property="Visibility"
                             Value="Collapsed"/>
                        </DataTrigger>

                        <!-- When the StatCell is not inside a Group, display a double line. -->
                        <Trigger Property="xcdg:GroupLevelIndicatorPane.GroupLevel"
                           Value="-1">
                            <Setter TargetName="totalBorder"
                             Property="BorderThickness"
                             Value="0,1,0,0"/>
                            <Setter TargetName="totalBorder"
                             Property="BorderBrush"
                             Value="{StaticResource BaseDarkBlue}"/>




                        </Trigger>
                        <!-- When the StatCell has no content, don't display any line above. -->
                        <Trigger Property="HasContent"
                           Value="False">
                            <Setter TargetName="totalBorder"
                             Property="BorderThickness"
                             Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DataGridControl-->
    <Style TargetType="{x:Type xcdg:DataGridControl}">
    	
    	<Setter Property="FontSize" Value="12"/>
        <Setter Property="UseLayoutRounding" Value="False"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{StaticResource BaseDarkFontColor}"/>
        <Setter Property="BorderBrush" Value="#00FFFFFF"/>
        <Setter Property="ItemScrollingBehavior" Value="Immediate"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <xcdg:VirtualizingStackPanel VirtualizingStackPanel.IsVirtualizing="True" VirtualizingStackPanel.VirtualizationMode="Recycling" Background="green" IsItemsHost="True" CanHorizontallyScroll="False" CanVerticallyScroll="False" Orientation="Vertical" ScrollOwner="{x:Null}"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TableViewScrollViewerLeftStyle" TargetType="{x:Type xcdg:TableViewScrollViewer}">
        <Style.Resources>
            <SolidColorBrush PresentationOptions:Freeze="True" x:Key="{x:Static SystemColors.ControlBrushKey}" Color="#FFE6EAF1"/>
            <SolidColorBrush PresentationOptions:Freeze="True" x:Key="{x:Static SystemColors.ControlDarkBrushKey}" Color="#FF5D7D9C"/>
        </Style.Resources>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="CanContentScroll" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xcdg:TableViewScrollViewer}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid Margin="16,0,0,0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <xcdg:RowSelectorPane Margin="2,0,0,0" x:Name="PART_RowSelectorPane" Width="{TemplateBinding RowSelectorPaneWidth}" Grid.Column="0" Grid.Row="0" Grid.RowSpan="3" />
                            <xcdg:SynchronizedScrollViewer  Style="{StaticResource SimpleScrollViewer}" Focusable="False" x:Name="fixedHeaderScrollViewer" Grid.Column="1" Grid.Row="0" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" xcdg:DataGridScrollViewer.SynchronizedScrollViewerPosition="Top">
                                <xcdg:TableViewHeaderFooterPanel HorizontalAlignment="Left" Orientation="Vertical" xcdg:DataGridControl.IsFixedHeadersHost="True"/>
                            </xcdg:SynchronizedScrollViewer>
                            <xcdg:SynchronizedScrollViewer Style="{StaticResource SimpleScrollViewer}"  Focusable="False" x:Name="fixedFooterScrollViewer" Grid.Column="1" Grid.Row="2" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" xcdg:DataGridScrollViewer.SynchronizedScrollViewerPosition="Bottom">
                                <xcdg:TableViewHeaderFooterPanel HorizontalAlignment="Left" Orientation="Vertical" xcdg:DataGridControl.IsFixedFootersHost="True"/>
                            </xcdg:SynchronizedScrollViewer>
                            <ScrollContentPresenter   Grid.Column="1" Grid.Row="1" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False"/>
                        </Grid>
                        <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Style="{StaticResource SimpleScrollBarHorizontals}" x:Name="PART_HorizontalScrollBar"  Grid.Column="0" Grid.Row="1"  Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Maximum="{TemplateBinding ScrollableWidth}" Value="{TemplateBinding HorizontalOffset}"/>
                        <ScrollBar HorizontalAlignment="Left" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Style="{StaticResource SimpleScrollBarVerticals}" x:Name="PART_VerticalScrollBar"  Grid.Column="0" Grid.Row="0" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Maximum="{TemplateBinding ScrollableHeight}" Value="{TemplateBinding VerticalOffset}"/>
                        <xcdg:ScrollTip Visibility="Hidden" Content="{x:Null}"  ContentTemplate="{Binding Path=(xcdg:DataGridControl.DataGridContext).ScrollTipContentTemplate, RelativeSource={RelativeSource Self}}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ShowRowSelectorPane" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--GroupLevelIndicatorPane-->
    <Style TargetType="{x:Type xcdg:GroupLevelIndicatorPane}">
        <Setter Property="Visibility" Value="Visible"/>
        <Setter Property="Foreground" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
    </Style>


    <!--HierarchicalGroupByControl-->
    
    
    <!--<Style TargetType="{x:Type xcdg:HierarchicalGroupByControl}">
        <Setter Property="Visibility" Value="Collapsed"/>
        <Setter Property="Foreground" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Background" Value="{x:Null}"/>
    </Style>-->

    
    <!--FixedColumnSplitter-->

    <Style x:Key="basicSplitter_style" TargetType="{x:Type xcdg:FixedColumnSplitter}">
        <Setter Property="Background" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="BorderThickness" Value="0,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type xcdg:FixedColumnSplitter}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type xcdg:DataRow}">
        
        <Style.BasedOn>
            <Style TargetType="{x:Type xcdg:DataRow}">
                <Style.BasedOn>
                    <Style TargetType="{x:Type xcdg:Row}">
                        <Setter Property="FocusVisualStyle">
                            <Setter.Value>
                                <Style>
                                    <Style.Resources>
                                        <xcdg:ThicknessConverter x:Key="thicknessConverter" InverseValue="False"/>
                                    </Style.Resources>
                                    <Setter Property="Control.Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Rectangle Stroke="#FF000000" StrokeDashArray="1 2" StrokeThickness="1" SnapsToDevicePixels="True">
                                                    <Rectangle.Margin>
                                                        <Binding Path="HorizontalOffset" ConverterParameter="Left" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ScrollViewer}}">
                                                            <Binding.Converter>
                                                                <xcdg:ThicknessConverter InverseValue="False"/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </Rectangle.Margin>
                                                </Rectangle>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="FontFamily" Value="{StaticResource BaseNormalFontFamily}"/>
                        <Setter Property="FontSize" Value="{StaticResource BaseFontSizeM}"/>
                        <Setter Property="SelectionBackground" Value="{StaticResource BaseDarkGray}"/>
                        <Setter Property="SelectionForeground" Value="{StaticResource BaseMoreDarkBlue}"/>
                        <Setter Property="InactiveSelectionBackground" Value="{x:Null}"/>
                        <Setter Property="InactiveSelectionForeground" Value="{StaticResource BaseDarkFontColor}"/>
                        <Setter Property="xcdg:TableView.FixedColumnSplitterStyle" Value="{StaticResource basicSplitter_style}"/>
                        <Setter Property="BorderThickness" Value="0">
                            <!--<Setter.Value>
                                <Binding Path="(xcdg:DataGridControl.DataGridContext).HorizontalGridLineThickness" ConverterParameter="Top" RelativeSource="{RelativeSource Self}">
                                    <Binding.Converter>
                                        <xcdg:ThicknessConverter InverseValue="False"/>
                                    </Binding.Converter>
                                </Binding>
                            </Setter.Value>-->
                        </Setter>
                        <Setter Property="BorderBrush" Value="{Binding Path=(xcdg:DataGridControl.DataGridContext).HorizontalGridLineBrush, RelativeSource={RelativeSource Self}}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type xcdg:Row}">
                                    <ControlTemplate.Resources>
									<Storyboard x:Key="Storyboard1">
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="rootBorder">
										<EasingColorKeyFrame KeyTime="0:0:0.6" Value="Red"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
                                        <xcdg:TypeToBooleanConverter x:Key="typeToBooleanConverter"/>
                                    </ControlTemplate.Resources>
                                    <Grid x:Name="rootGrid">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Border x:Name="rootBorder" Background="{TemplateBinding Background}" BorderBrush="{StaticResource BaseDarkGray}" BorderThickness="0.5,0,0.5,0.5" Padding="{TemplateBinding Padding}" Grid.Column="2" Grid.ColumnSpan="2" xcdg:TableView.CanScrollHorizontally="False"/>
                                        <xcdg:HierarchicalGroupLevelIndicatorPane  Grid.Column="0" xcdg:TableView.CanScrollHorizontally="False"/>
                                        <xcdg:GroupLevelIndicatorPane BorderBrush="#FF5D7D9C" Background="#FF5D7D9C" x:Name="groupLevelIndicatorPane" Grid.Column="1" xcdg:TableView.CanScrollHorizontally="False"/>
                                        <Button Margin="2,4,2,0" x:Name="detailsToggle" OverridesDefaultStyle="True" VerticalAlignment="Top" Focusable="False" Visibility="Collapsed" Command="xcdg:DataGridCommands.ToggleDetailExpansion" Grid.Column="2" xcdg:TableView.CanScrollHorizontally="False">
                                            <Button.Template>
                                                <ControlTemplate TargetType="{x:Type Button}">
                                                    <ContentPresenter x:Name="expanderGlyphPresenter" Content="{x:Null}" ContentTemplate="{Binding Path=(xcdg:DataGridControl.DataGridContext).CollapseGroupGlyph, RelativeSource={RelativeSource Self}}"/>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="xcdg:DataGridControl.HasExpandedDetails" Value="False">
                                                            <Setter Property="ContentTemplate" TargetName="expanderGlyphPresenter" Value="{Binding Path=(xcdg:DataGridControl.DataGridContext).ExpandGroupGlyph, RelativeSource={RelativeSource Self}}"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Button.Template>
                                        </Button>
                                        <TextBlock Margin="{TemplateBinding BorderThickness}" Visibility="Hidden" Grid.Column="3"/>
                                        <xcdg:FixedCellPanel   Margin="{TemplateBinding BorderThickness}" x:Name="PART_CellsHost" Grid.Column="3" ColumnStretchMinWidth="{Binding Path=(xcdg:DataGridControl.DataGridContext).ColumnStretchMinWidth, RelativeSource={RelativeSource Self}}" ColumnStretchMode="{Binding Path=(xcdg:DataGridControl.DataGridContext).ColumnStretchMode, RelativeSource={RelativeSource Self}}" FixedCellCount="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnCount, Mode=TwoWay, RelativeSource={RelativeSource Self}}" FixedColumnDropMarkPen="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnDropMarkPen, RelativeSource={RelativeSource Self}}" ShowSplitter="{Binding Path=(xcdg:DataGridControl.DataGridContext).ShowFixedColumnSplitter, RelativeSource={RelativeSource Self}}" SplitterStyle="{TemplateBinding xcdg:TableView.FixedColumnSplitterStyle}" SplitterWidth="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnSplitterWidth, RelativeSource={RelativeSource Self}}"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                    	<Trigger Property="IsMouseOver" Value="True">
                <!--<Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard TargetProperty="Background.Color" Timeline.DesiredFrameRate="10">
                            <ColorAnimation From="#0054A3D8" To="#3354A3D8" Duration="0:0:0"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard TargetProperty="Background.Color" Timeline.DesiredFrameRate="10">
                            <ColorAnimation To="#0054A3D8" Duration="0:0:.1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>-->
 </Trigger>

                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xcdg:DataGridControl}}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="rootBorder" Value="{Binding Path=SelectionBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                            <Setter Property="TextElement.Foreground" TargetName="rootGrid" Value="{Binding Path=SelectionForeground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xcdg:DataGridControl}}}" Value="False"/>
                                                <Condition Binding="{Binding Path=HideSelection, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xcdg:DataGridControl}}}" Value="False"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="rootBorder" Value="{Binding Path=InactiveSelectionBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                            <Setter Property="TextElement.Foreground" TargetName="rootGrid" Value="{Binding Path=InactiveSelectionForeground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).(xcdg:TableView.FixedColumnCount), RelativeSource={RelativeSource Self}}" Value="0"/>
                                                <Condition Value="True">
                                                    <Condition.Binding>
                                                        <Binding Path="(xcdg:DataGridControl.DataGridContext).GroupLevelDescriptions.Count" RelativeSource="{RelativeSource Self}">
                                                            <Binding.Converter>
                                                                <xcdg:GreaterThanZeroConverter/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </Condition.Binding>
                                                </Condition>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="ShowSplitter" TargetName="PART_CellsHost" Value="False"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).(xcdg:TableView.FixedColumnCount), RelativeSource={RelativeSource Self}}" Value="0"/>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).AllowDetailToggle, RelativeSource={RelativeSource Self}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="ShowSplitter" TargetName="PART_CellsHost" Value="False"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).AllowDetailToggle, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Value="True">
                                                    <Condition.Binding>
                                                        <Binding Path="." ConverterParameter="{x:Type xcdg:DataRow}" Mode="OneWay" RelativeSource="{RelativeSource Self}">
                                                            <Binding.Converter>
                                                                <xcdg:TypeToBooleanConverter/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </Condition.Binding>
                                                </Condition>
                                                <Condition Value="False">
                                                    <Condition.Binding>
                                                        <Binding Path="." ConverterParameter="{x:Type xcdg:InsertionRow}" Mode="OneWay" RelativeSource="{RelativeSource Self}">
                                                            <Binding.Converter>
                                                                <xcdg:TypeToBooleanConverter/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </Condition.Binding>
                                                </Condition>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" TargetName="detailsToggle" Value="Visible"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Value="True">
                                                    <Condition.Binding>
                                                        <Binding Path="." ConverterParameter="{x:Type xcdg:InsertionRow}" Mode="OneWay" RelativeSource="{RelativeSource Self}">
                                                            <Binding.Converter>
                                                                <xcdg:TypeToBooleanConverter/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </Condition.Binding>
                                                </Condition>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).AllowDetailToggle, RelativeSource={RelativeSource Self}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" TargetName="detailsToggle" Value="Hidden"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).AllowDetailToggle, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Value="False">
                                                    <Condition.Binding>
                                                        <Binding Path="." ConverterParameter="{x:Type xcdg:DataRow}" Mode="OneWay" RelativeSource="{RelativeSource Self}">
                                                            <Binding.Converter>
                                                                <xcdg:TypeToBooleanConverter/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </Condition.Binding>
                                                </Condition>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" TargetName="detailsToggle" Value="Hidden"/>
                                        </MultiDataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=(xcdg:ViewBase.IsLastItem), RelativeSource={RelativeSource Self}}" Value="True">
                                <Setter Property="BorderThickness">
                                    <Setter.Value>
                                        <Binding Path="(xcdg:DataGridControl.DataGridContext).HorizontalGridLineThickness" ConverterParameter="Top, Bottom" RelativeSource="{RelativeSource Self}">
                                            <Binding.Converter>
                                                <xcdg:ThicknessConverter InverseValue="False"/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Margin" Value="0,0,0,0"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=(xcdg:DataGridControl.HasExpandedDetails), RelativeSource={RelativeSource Self}}" Value="True">
                                <Setter Property="BorderThickness">
                                    <Setter.Value>
                                        <Binding Path="(xcdg:DataGridControl.DataGridContext).HorizontalGridLineThickness" ConverterParameter="Top, Bottom" RelativeSource="{RelativeSource Self}">
                                            <Binding.Converter>
                                                <xcdg:ThicknessConverter InverseValue="False"/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).IsAlternatingRowStyleEnabled, RelativeSource={RelativeSource Self}}" Value="True"/>
                                    <Condition Value="True">
                                        <Condition.Binding>
                                            <Binding Path="(xcdg:DataGridVirtualizingPanel.ItemIndex)" RelativeSource="{RelativeSource Self}">
                                                <Binding.Converter>
                                                    <xcdg:IndexToOddConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </Condition.Binding>
                                    </Condition>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" Value="#33FFFFFF"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Style.BasedOn>
            </Style>
        </Style.BasedOn>
    </Style>







    <Style x:Key="DataRowNonSelection"  TargetType="{x:Type xcdg:DataRow}">
        
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="SelectionBackground" Value="{x:Null}"/>
        <Style.BasedOn>
            <Style TargetType="{x:Type xcdg:DataRow}">
                <Style.BasedOn>
                    <Style TargetType="{x:Type xcdg:Row}">
                        <Setter Property="FocusVisualStyle">
                            <Setter.Value>
                                <Style>
                                    <Style.Resources>
                                        <xcdg:ThicknessConverter x:Key="thicknessConverter" InverseValue="False"/>
                                    </Style.Resources>
                                    <Setter Property="Control.Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Rectangle Stroke="#FF000000" StrokeDashArray="1 2" StrokeThickness="1" SnapsToDevicePixels="True">
                                                    <Rectangle.Margin>
                                                        <Binding Path="HorizontalOffset" ConverterParameter="Left" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ScrollViewer}}">
                                                            <Binding.Converter>
                                                                <xcdg:ThicknessConverter InverseValue="False"/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </Rectangle.Margin>
                                                </Rectangle>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Setter.Value>
                        </Setter>

                        <Setter Property="SelectionForeground" Value="black"/>
                        <Setter Property="InactiveSelectionBackground" Value="{x:Null}"/>
                        <Setter Property="InactiveSelectionForeground" Value="black"/>
                        <Setter Property="xcdg:TableView.FixedColumnSplitterStyle" Value="{StaticResource basicSplitter_style}"/>
                        <Setter Property="BorderThickness">
                            <Setter.Value>
                                <Binding Path="(xcdg:DataGridControl.DataGridContext).HorizontalGridLineThickness" ConverterParameter="Top" RelativeSource="{RelativeSource Self}">
                                    <Binding.Converter>
                                        <xcdg:ThicknessConverter InverseValue="False"/>
                                    </Binding.Converter>
                                </Binding>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="BorderBrush" Value="{Binding Path=(xcdg:DataGridControl.DataGridContext).HorizontalGridLineBrush, RelativeSource={RelativeSource Self}}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type xcdg:Row}">
                                    <ControlTemplate.Resources>
                                        <xcdg:TypeToBooleanConverter x:Key="typeToBooleanConverter"/>

                                        <Storyboard x:Key="RowBlinkAnimation" Timeline.DesiredFrameRate="10">
                                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="1"/>
                                                <SplineDoubleKeyFrame KeyTime="00:00:01" Value="0"/>
                                                <SplineDoubleKeyFrame KeyTime="00:00:01.5000000" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>

                                    </ControlTemplate.Resources>
                                    <Grid x:Name="rootGrid">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Border x:Name="rootBorder" Background="{TemplateBinding Background}" BorderBrush="{StaticResource BaseDarkGray}" BorderThickness="0.5,0,0.5,0.5" Padding="{TemplateBinding Padding}" Grid.Column="2" Grid.ColumnSpan="2" xcdg:TableView.CanScrollHorizontally="False"/>
                                        <xcdg:HierarchicalGroupLevelIndicatorPane  Grid.Column="0" xcdg:TableView.CanScrollHorizontally="False"/>
                                        <xcdg:GroupLevelIndicatorPane BorderBrush="#FF3794D3" Background="#FF3794D3" x:Name="groupLevelIndicatorPane" Grid.Column="1" xcdg:TableView.CanScrollHorizontally="False"/>
                                        <Button Margin="2,4,2,0" x:Name="detailsToggle" OverridesDefaultStyle="True" VerticalAlignment="Top" Focusable="False" Visibility="Collapsed" Command="xcdg:DataGridCommands.ToggleDetailExpansion" Grid.Column="2" xcdg:TableView.CanScrollHorizontally="False">
                                            <Button.Template>
                                                <ControlTemplate TargetType="{x:Type Button}">
                                                    <ContentPresenter x:Name="expanderGlyphPresenter" Content="{x:Null}" ContentTemplate="{Binding Path=(xcdg:DataGridControl.DataGridContext).CollapseGroupGlyph, RelativeSource={RelativeSource Self}}"/>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="xcdg:DataGridControl.HasExpandedDetails" Value="False">
                                                            <Setter Property="ContentTemplate" TargetName="expanderGlyphPresenter" Value="{Binding Path=(xcdg:DataGridControl.DataGridContext).ExpandGroupGlyph, RelativeSource={RelativeSource Self}}"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Button.Template>
                                        </Button>
                                        <TextBlock Margin="{TemplateBinding BorderThickness}" Visibility="Hidden" Grid.Column="3"/>
                                        <xcdg:FixedCellPanel Margin="{TemplateBinding BorderThickness}" x:Name="PART_CellsHost" Grid.Column="3" ColumnStretchMinWidth="{Binding Path=(xcdg:DataGridControl.DataGridContext).ColumnStretchMinWidth, RelativeSource={RelativeSource Self}}" ColumnStretchMode="{Binding Path=(xcdg:DataGridControl.DataGridContext).ColumnStretchMode, RelativeSource={RelativeSource Self}}" FixedCellCount="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnCount, Mode=TwoWay, RelativeSource={RelativeSource Self}}" FixedColumnDropMarkPen="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnDropMarkPen, RelativeSource={RelativeSource Self}}" ShowSplitter="{Binding Path=(xcdg:DataGridControl.DataGridContext).ShowFixedColumnSplitter, RelativeSource={RelativeSource Self}}" SplitterStyle="{TemplateBinding xcdg:TableView.FixedColumnSplitterStyle}" SplitterWidth="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnSplitterWidth, RelativeSource={RelativeSource Self}}"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <!--<Trigger Property="IsMouseOver" Value="true">
                                            <Setter Property="Background"  Value="{x:Null}"/>
                                        </Trigger>-->
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xcdg:DataGridControl}}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="rootBorder" Value="{Binding Path=SelectionBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                            <Setter Property="TextElement.Foreground" TargetName="rootGrid" Value="{Binding Path=SelectionForeground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xcdg:DataGridControl}}}" Value="False"/>
                                                <Condition Binding="{Binding Path=HideSelection, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xcdg:DataGridControl}}}" Value="False"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="rootBorder" Value="{Binding Path=InactiveSelectionBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                            <Setter Property="TextElement.Foreground" TargetName="rootGrid" Value="{Binding Path=InactiveSelectionForeground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).(xcdg:TableView.FixedColumnCount), RelativeSource={RelativeSource Self}}" Value="0"/>
                                                <Condition Value="True">
                                                    <Condition.Binding>
                                                        <Binding Path="(xcdg:DataGridControl.DataGridContext).GroupLevelDescriptions.Count" RelativeSource="{RelativeSource Self}">
                                                            <Binding.Converter>
                                                                <xcdg:GreaterThanZeroConverter/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </Condition.Binding>
                                                </Condition>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="ShowSplitter" TargetName="PART_CellsHost" Value="False"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).(xcdg:TableView.FixedColumnCount), RelativeSource={RelativeSource Self}}" Value="0"/>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).AllowDetailToggle, RelativeSource={RelativeSource Self}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="ShowSplitter" TargetName="PART_CellsHost" Value="False"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).AllowDetailToggle, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Value="True">
                                                    <Condition.Binding>
                                                        <Binding Path="." ConverterParameter="{x:Type xcdg:DataRow}" Mode="OneWay" RelativeSource="{RelativeSource Self}">
                                                            <Binding.Converter>
                                                                <xcdg:TypeToBooleanConverter/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </Condition.Binding>
                                                </Condition>
                                                <Condition Value="False">
                                                    <Condition.Binding>
                                                        <Binding Path="." ConverterParameter="{x:Type xcdg:InsertionRow}" Mode="OneWay" RelativeSource="{RelativeSource Self}">
                                                            <Binding.Converter>
                                                                <xcdg:TypeToBooleanConverter/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </Condition.Binding>
                                                </Condition>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" TargetName="detailsToggle" Value="Visible"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Value="True">
                                                    <Condition.Binding>
                                                        <Binding Path="." ConverterParameter="{x:Type xcdg:InsertionRow}" Mode="OneWay" RelativeSource="{RelativeSource Self}">
                                                            <Binding.Converter>
                                                                <xcdg:TypeToBooleanConverter/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </Condition.Binding>
                                                </Condition>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).AllowDetailToggle, RelativeSource={RelativeSource Self}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" TargetName="detailsToggle" Value="Hidden"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).AllowDetailToggle, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Value="False">
                                                    <Condition.Binding>
                                                        <Binding Path="." ConverterParameter="{x:Type xcdg:DataRow}" Mode="OneWay" RelativeSource="{RelativeSource Self}">
                                                            <Binding.Converter>
                                                                <xcdg:TypeToBooleanConverter/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </Condition.Binding>
                                                </Condition>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" TargetName="detailsToggle" Value="Hidden"/>
                                        </MultiDataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=(xcdg:ViewBase.IsLastItem), RelativeSource={RelativeSource Self}}" Value="True">
                                <Setter Property="BorderThickness">
                                    <Setter.Value>
                                        <Binding Path="(xcdg:DataGridControl.DataGridContext).HorizontalGridLineThickness" ConverterParameter="Top, Bottom" RelativeSource="{RelativeSource Self}">
                                            <Binding.Converter>
                                                <xcdg:ThicknessConverter InverseValue="False"/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Margin" Value="0,0,0,0"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=(xcdg:DataGridControl.HasExpandedDetails), RelativeSource={RelativeSource Self}}" Value="True">
                                <Setter Property="BorderThickness">
                                    <Setter.Value>
                                        <Binding Path="(xcdg:DataGridControl.DataGridContext).HorizontalGridLineThickness" ConverterParameter="Top, Bottom" RelativeSource="{RelativeSource Self}">
                                            <Binding.Converter>
                                                <xcdg:ThicknessConverter InverseValue="False"/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).IsAlternatingRowStyleEnabled, RelativeSource={RelativeSource Self}}" Value="True"/>
                                    <Condition Value="True">
                                        <Condition.Binding>
                                            <Binding Path="(xcdg:DataGridVirtualizingPanel.ItemIndex)" RelativeSource="{RelativeSource Self}">
                                                <Binding.Converter>
                                                    <xcdg:IndexToOddConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </Condition.Binding>
                                    </Condition>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" Value="#33FFFFFF"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Style.BasedOn>
            </Style>
        </Style.BasedOn>
    </Style>




    <SolidColorBrush  x:Key="RedDataRowBrush" Color="#7FDC3D42"/>
    <SolidColorBrush  x:Key="GreenDataRowBrush"  Color="#7F00A77B"/>
    <SolidColorBrush  x:Key="YellowDataRowBrush" Color="#7FE1B77D"/>


    <Style x:Key="OpacityDataRowStyle" TargetType="{x:Type xcdg:DataRow}" BasedOn="{StaticResource DataRowNonSelection}">
        <Setter Property="Opacity" Value="0.15"/>
	</Style>
    <Style x:Key="GreenDataRowStyle" TargetType="{x:Type xcdg:DataRow}" BasedOn="{StaticResource DataRowNonSelection}">
		<Setter Property="Background" Value="{StaticResource GreenDataRowBrush}"/>
        <Setter Property="SelectionBackground" Value="{StaticResource GreenDataRowBrush}"/>
    </Style>
    <Style x:Key="YellowDataRowStyle" TargetType="{x:Type xcdg:DataRow}" BasedOn="{StaticResource DataRowNonSelection}">
        <Setter Property="Background" Value="{StaticResource YellowDataRowBrush}"/>
        <Setter Property="SelectionBackground" Value="{StaticResource YellowDataRowBrush}"/>
    </Style>















   

    <!--DataRow
    <Style TargetType="{x:Type xcdg:DataRow}">
        <Setter Property="Background" Value="red" />
        <Setter Property="InactiveSelectionBackground" Value="yellow" />
        <Setter Property="InactiveSelectionForeground" Value="#FF000000" />
        <Setter Property="SelectionBackground" Value="green"/>
        <Setter Property="SelectionForeground" Value="#FF000000"/>
        <Setter Property="BorderBrush" Value="#CC3780B5"/>
        <Setter Property="BorderThickness" Value="0.5,0.5,0.5,0.5"/>
        <Setter Property="xcdg:TableView.FixedColumnSplitterStyle"
               Value="{StaticResource basicSplitter_style}"/>
      
       <Style.Triggers>
<Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background"  Value="gray"/>
            </Trigger>
        </Style.Triggers>
    </Style>-->
    <!--DataCell-->
    <Style TargetType="{x:Type xcdg:DataCell}">

        <Setter Property="BorderBrush" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="BorderThickness" Value="0.5,0,0.5,0"/>
        <Setter Property="CurrentForeground" Value="{StaticResource BaseMoreDarkBlue}"/>
        <Setter Property="CurrentBackground" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="FontSize" Value="{StaticResource BaseFontSizeM}"/>
    </Style>

    <Style TargetType="{x:Type xcdg:TableView}">
        <Setter Property="ExpandGroupGlyph"
              Value="{StaticResource expandGroupGlyph}" />
        <Setter Property="ExpandGroupGlyph"
              Value="{StaticResource expandGroupGlyph}" />
        <Setter Property="CollapseGroupGlyph"
              Value="{StaticResource collapseGroupGlyph}" />
        <Setter Property="GroupLevelIndicatorWidth" Value="10" />
        <Setter Property="DetailIndicatorWidth" Value="20" />
        <Setter Property="InsertionRowGlyph"
             Value="{StaticResource insertionRowGlyph}" />
        <Setter Property="xcdg:TableView.FixedColumnSplitterStyle"
             Value="{StaticResource basicSplitter_style}" />
        <Setter Property="AllowColumnChooser" Value="False"/>
        <Setter Property="IsAlternatingRowStyleEnabled"
               Value="False" />
        <Setter Property="VerticalGridLineThickness"
               Value="1" />
        <Setter Property="HorizontalGridLineThickness"
               Value="0" />
        <Setter Property="HorizontalGridLineBrush"
               Value="{StaticResource BaseDarkGray}" />
        <Setter Property="VerticalGridLineBrush"
               Value="{StaticResource BaseDarkGray}" />
    </Style>



    <!--RowSelector + RowSelectorPane + invisibleThumbStyle-->
    <!--invisibleThumbStyle-->
    <Style x:Key="invisibleThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="invisibleThumbStyleRS" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border>
                        <Grid>
                            <Border Background="{StaticResource BaseDarkBlue}" Height="1" BorderBrush="Transparent" Opacity="0.5" BorderThickness="0,1,0,0"></Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--RowSelector-->
    <Style TargetType="{x:Type xcdg:RowSelector}">
        <Setter Property="Foreground" Value="{StaticResource BaseMoreDarkGray}"/>
        <Setter Property="Background" Value="{StaticResource BaseLightGray}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate 
                   TargetType="{x:Type xcdg:RowSelector}">

                    <Grid>
                        <Border x:Name="mainBorder"
               Background="{TemplateBinding Background}"
               BorderBrush="{TemplateBinding BorderBrush}"
               BorderThickness="{TemplateBinding BorderThickness}"
               Padding="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="contentPresenter"
                             Content="{TemplateBinding Content}"
                             ContentTemplate="{TemplateBinding ContentTemplate}"
                             ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                             HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                             VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>

                        <Thumb x:Name="PART_RowResizerThumb"
               Style="{StaticResource invisibleThumbStyleRS}"
               VerticalAlignment="Bottom" />
                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background"  Value="{StaticResource BaseDarkGray}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter  Property="Background" Value="{StaticResource BaseDarkGray}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--RowSelectorPane-->
    <Style TargetType="{x:Type xcdg:RowSelectorPane}">
        <Setter Property="Background" Value="{StaticResource BaseLightGray}"/>
        <Setter Property="TextElement.Foreground" Value="{StaticResource BaseMoreDarkGray}"/>

    </Style>



    <!--DataCell-->
    <!--<Style x:Key="DataCellStyle" TargetType="{x:Type xcdg:DataCell}">
        <Setter Property="BorderBrush" Value="#CC3780B5"/>
        <Setter Property="BorderThickness" Value="0.5,0,0.5,0"/>
        <Setter Property="CurrentForeground" Value="#FF000000"/>
        <Setter Property="CurrentBackground" Value="red"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
    </Style>-->




    <!--GroupHeaderControlControlTemplate-->
    <ControlTemplate x:Key="GroupHeaderControlControlTemplate" TargetType="{x:Type xcdg:GroupHeaderControl}">
        <xcdg:PassiveLayoutDecorator Axis="Horizontal">
            <DockPanel>
                <xcdg:HierarchicalGroupLevelIndicatorPane DockPanel.Dock="Left"/>
                <xcdg:GroupLevelIndicatorPane DockPanel.Dock="Left" Indented="False">
                    <xcdg:GroupLevelIndicatorPane.GroupLevel>
                        <Binding Path="(xcdg:GroupLevelIndicatorPane.GroupLevel)" ConverterParameter="-1" RelativeSource="{RelativeSource TemplatedParent}">
                            <Binding.Converter>
                                <xcdg:IntAdditionConverter/>
                            </Binding.Converter>
                        </Binding>
                    </xcdg:GroupLevelIndicatorPane.GroupLevel>
                </xcdg:GroupLevelIndicatorPane>
                <Border  Focusable="True" FocusVisualStyle="{TemplateBinding FocusVisualStyle}" Background="{StaticResource BaseLightGray}" BorderBrush="{StaticResource BaseDarkGray}" BorderThickness="0,1,0,0" x:Name="mainBorder" Padding="{TemplateBinding Padding}" Visibility="Visible" Opacity="1">
                    <StackPanel Orientation="Horizontal">
                        <ToggleButton Focusable="False" Style="{DynamicResource TreeViewToggleButtonItemPlusMinus}"  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" IsChecked="{Binding Path=Group.IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" />
                        <ContentPresenter Margin="3,0,0,0" 	TextBlock.Foreground="#ff3c5f76" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                    </StackPanel>
                </Border>
            </DockPanel>
        </xcdg:PassiveLayoutDecorator>

    </ControlTemplate>

    <Style TargetType="{x:Type xcdg:GroupHeaderControl}">
        <Setter Property="xcdg:TableView.CanScrollHorizontally" Value="False"/>
        <Setter Property="BorderThickness" Value="0,0,0,0"/>
        <Setter Property="Padding" Value="2,0,2,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template" Value="{StaticResource GroupHeaderControlControlTemplate}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(xcdg:ViewBase.IsLastItem), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="BorderThickness" Value="0,1,1,1"/>
                <Setter Property="Margin" Value="0,0,0,0"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="ClearAutoFilterStyle"  TargetType="{x:Type Button}">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Foreground" Value="{StaticResource BaseDarkFontColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Margin="0" x:Name="border" BorderThickness="1" Background="{StaticResource BaseLightGray}" BorderBrush="{StaticResource BaseDarkBlue}"  VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                        <ContentPresenter Content="Очистить фильтр" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource BaseDarkGray}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="AutoFilterControlStyle"  TargetType="{x:Type xcdg:AutoFilterControl}">
        <Style.BasedOn>
            <Style TargetType="{x:Type xcdg:AutoFilterControl}">
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="BorderBrush" Value="Black"/>
                <Setter Property="Background" Value="{x:Null}"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate 
                    TargetType="{x:Type xcdg:AutoFilterControl}">
                            <Border x:Name="autoFilterControlBorder"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource BaseLightBackground}">
                                <Grid>


                                    <Button DockPanel.Dock="Top"
                    Grid.Row="0"
                    MinHeight="24"
                    Content="Очистить фильтр"
                    Command="xcdg:AutoFilterControl.ClearAutoFilterValues" Style="{StaticResource ClearAutoFilterStyle}" HorizontalAlignment="Stretch" VerticalAlignment="Top" />

                                    <!-- ItemsSource will be set in OnApplyTemplate of AutoFilterControl because the DataGridContext does not
             redirects automatically to the DataGridCollectionView for the Master level -->
                                    <ListBox Style="{StaticResource AutoFilterDataGridListBoxStyle}" x:Name="PART_DistinctValuesHost"
                     Grid.Row="0"
                     MaxHeight="550"
                     ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                     Foreground="{TemplateBinding Foreground}"
                     BorderThickness="0"
                     ItemTemplate="{TemplateBinding DistinctValueItemTemplate}"
                     ItemTemplateSelector="{TemplateBinding DistinctValueItemTemplateSelector}"
                     ItemContainerStyle="{TemplateBinding DistinctValueItemContainerStyle}"
                     ItemContainerStyleSelector="{TemplateBinding DistinctValueItemContainerStyleSelector}"
                     SelectionMode="Multiple" Background="{x:Null}" Margin="0,30,2,5" />
                                </Grid>
                            </Border>
                        </ControlTemplate>

                    </Setter.Value>
                </Setter>
            </Style>
        </Style.BasedOn>
    </Style>








   











    <!--ColumnManagerToggleButton-->






    <ControlTemplate TargetType="{x:Type ToggleButton}"
                    x:Key="filterToggleButton">

        <Grid Background="{StaticResource BaseLightGray}"
            VerticalAlignment="Stretch"
            HorizontalAlignment="Stretch">
            <Border Margin="0" Width="18" Background="{x:Null}">
                <Grid
        			Background="{x:Null}"
               >

                    <ContentPresenter x:Name="glyphPresenter"
        				ContentTemplate="{Binding (xcdg:DataGridControl.DataGridContext).AutoFilterDropDownGlyph, RelativeSource={RelativeSource Self}}"
        				Content="{TemplateBinding Content}"
        				VerticalAlignment="Center"
        				HorizontalAlignment="Center"
        				Margin="0"
        				Opacity="{TemplateBinding Opacity}" />

                    <ContentPresenter x:Name="filterActivatedGlyphPresenter"
        				ContentTemplate="{x:Null}"
        				Content="{TemplateBinding Content}"
        				VerticalAlignment="Center"
        				HorizontalAlignment="Center"
        				Margin="0"
        				Opacity="{TemplateBinding Opacity}"/>
                </Grid>

            </Border>
        </Grid>

        <ControlTemplate.Triggers>

            <!-- Display AutoFilterGlyph when there are AutoFilterValues -->
            <DataTrigger Binding="{Binding HasAutoFilterValues, ElementName=autoFilterControl, FallbackValue=False}"
                      Value="True">

                <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{x:Null}" />

                <Setter TargetName="filterActivatedGlyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding (xcdg:DataGridControl.DataGridContext).AutoFilterGlyph, RelativeSource={RelativeSource Self}}" />

            </DataTrigger>

            <!-- Restore DropDownGlyph when there are no AutoFilterValues -->
            <DataTrigger Binding="{Binding HasAutoFilterValues, ElementName=autoFilterControl}"
                      Value="False">

                <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding (xcdg:DataGridControl.DataGridContext).AutoFilterDropDownGlyph, RelativeSource={RelativeSource Self}}" />

            </DataTrigger>

        </ControlTemplate.Triggers>

    </ControlTemplate>

    <Style TargetType="{x:Type xcdg:ColumnManagerCell}">
        <Setter Property="FontFamily" Value="{StaticResource BaseNormalFontFamily}"/>
        <Setter Property="FontSize" Value="{StaticResource BaseFontSizeM}"/>
        <Setter Property="Foreground" Value="{StaticResource BaseDarkFontColor}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch"/>
        <Setter Property="Padding"
                Value="5,4,5,4"/>
        <Setter Property="VerticalContentAlignment"
                Value="Stretch" />
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate 
                    TargetType="xcdg:ColumnManagerCell">
                    <ControlTemplate.Resources>
                        <Style TargetType="ToggleButton">
                            <Setter Property="Template"
                    Value="{StaticResource filterToggleButton}" />
                        </Style>
                    </ControlTemplate.Resources>

                    <Border BorderThickness="0,1" Background="{StaticResource BaseLightGray}" BorderBrush="{StaticResource  BaseLightGray}" SnapsToDevicePixels="True">

                        <Border BorderThickness="0,0,1,0" Margin="0,1" BorderBrush="{StaticResource  BaseDarkBlue}">

                            <Border x:Name="border"  BorderThickness="1,0,0,0" BorderBrush="{StaticResource  BaseLightBackground}"  >


                                 <!-- This Grid is used to position the resizer Thumb over the ColumnManagerCell -->
                                <Grid>

                                    <!--<Rectangle Fill="{x:Null}"
                						HorizontalAlignment="Left"
                						VerticalAlignment="Stretch"
                						Width="1"
                						Margin="0,2,0,2" />

                                    <Rectangle Fill="{x:Null}"
                						HorizontalAlignment="Right"
                						VerticalAlignment="Stretch"
                						Width="1"
                						Margin="0,2,0,2" />-->

                                    <DockPanel HorizontalAlignment="Stretch">
                                        <Border x:Name="thumbToggleBackgroundBorder"
                							DockPanel.Dock="Right">

                                            <Grid>

                                                <Border x:Name="toggleDelimeterBorder"
                									BorderBrush="#FF5D7D9C"
                									BorderThickness="1,0,0,0"
                									Margin="0"
                									Background="Transparent"
                									Visibility="Hidden" Opacity="1">

                                                    <Border x:Name="toggleDelimeterBorder2"
                										BorderBrush="#66FFFFFF"
                										BorderThickness="1,0,0,0"
                										Margin="0"
                										Background="Transparent"
                										Visibility="Visible"/>

                                                </Border>

                                                <ToggleButton x:Name="toggleButton"
                									Focusable="False"
                									VerticalAlignment="Stretch"
                									Visibility="Collapsed"
                									Margin="2,0,0,0"
                									Opacity="1" Background="{x:Null}" />

                                                <xcdg:AutoFilterPopup x:Name="filterOptions"
                									PopupAnimation="Slide"
                									IsOpen="{Binding IsChecked, ElementName=toggleButton, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                									StaysOpen="False"
                									AllowsTransparency="True"
                									PlacementTarget="{Binding ElementName=toggleButton}">

                                                    <xcdg:AutoFilterControl x:Name="autoFilterControl"
                										Style="{StaticResource AutoFilterControlStyle}"
                										Background="Transparent"
                										BorderBrush="{StaticResource BaseLightBorder}"
                										BorderThickness="1"
                										AutoFilterColumn="{Binding ParentColumn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type xcdg:ColumnManagerCell}}}"
                										TextElement.Foreground="{TemplateBinding TextElement.Foreground}"  Width="330" />
                                                </xcdg:AutoFilterPopup>

                                                <!-- Thumb that is used to resize the Column. -->
                                                <Thumb x:Name="PART_ColumnResizerThumb"
                									Style="{StaticResource invisibleThumbStyle}"
                									Width="6"
                									HorizontalAlignment="Right" Background="#FF9AC6FF" Margin="0,0,-4,0" />
                                            </Grid>
                                        </Border>
                                        <Border Padding="{TemplateBinding Padding}" UseLayoutRounding="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                    <!-- This StackPanel is used to layout the ContentPresenter and the Sort Glyph (when present). -->
                                        	<StackPanel x:Name="contentPanel"
                                        		Orientation="Horizontal">

                                                        <!-- Same ContentPresenter as in the base Cell Template. -->
                                        		<xcdg:CellContentPresenter TextBlock.TextAlignment="Center"  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        			VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
<xcdg:CellContentPresenter.ToolTip><ToolTip Style="{StaticResource tooltipStyle}" Content="{Binding}"></ToolTip></xcdg:CellContentPresenter.ToolTip>
												</xcdg:CellContentPresenter>

                                                        <!-- ContentPresenter that is used to display the sort glyph.
                          We explicitly set its Content property to Null to prevent the XAML parser
                          from implicitly setting it to its TemplatedParent's Content. -->
                                        		<ContentPresenter x:Name="sortGlyphPresenter"
                                        			Content="{x:Null}"
                                        			ContentTemplate="{x:Null}" />
                                        	</StackPanel>
                                        </Border>
                                    </DockPanel>
                                </Grid>
                          </Border>
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Trigger related to the filteringToggleButton-->
                        
  
                        
                        <Trigger SourceName="toggleButton"
                  Property="IsMouseOver"
                  Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource BaseDarkGray}"/>
                            <Setter Property="Foreground" Value="{StaticResource BaseMoreDarkBlue}"/>
                            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />
                        </Trigger>

                        <Trigger Property="IsBeingDragged"
                  Value="True">

                            <!--<Setter TargetName="borderToggleBackground"
                    Property="Margin"
                    Value="0,0,1,0" />-->

                        </Trigger>

                        <!-- Always visible if filterOptions popup IsOpen -->
                        <Trigger SourceName="filterOptions"
                  Property="IsOpen"
                  Value="True">

                            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

                            <Setter TargetName="toggleDelimeterBorder"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleDelimeterBorder2"
                    Property="Visibility"
                    Value="Visible" />
                        </Trigger>

                        <!-- Display FilterToggleButton Trigger on MouseOver -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True" />

                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True" />

                                <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />

                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleDelimeterBorder"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleDelimeterBorder2"
                    Property="Visibility"
                    Value="Visible" />

                        </MultiDataTrigger>

                        <!-- Display FilterToggleButton Trigger to display AutoFilterGlyph -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True" />

                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

                                <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />

                                <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}" />

                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

                            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleDelimeterBorder"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleDelimeterBorder2"
                    Property="Visibility"
                    Value="Visible" />

                        </MultiDataTrigger>

                        <Trigger Property="IsPressed"
                  Value="True">

                            <Setter TargetName="contentPanel"
                    Property="Margin"
                    Value="1,1,-1,-1" />

                        </Trigger>


                        <!-- The following 2 triggers allow the appropriate Sort Glyph to be displayed
              depending on the ParentColumn's SortDirection. -->

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Ascending">

                            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).AscendingSortGlyph}" />

                            <Setter TargetName="sortGlyphPresenter"
                    Property="Margin"
                    Value="6,0,0,0" />

                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Descending">

                            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).DescendingSortGlyph}" />

                            <Setter TargetName="sortGlyphPresenter"
                    Property="Margin"
                    Value="6,0,0,0" />

                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.HasFixedWidth}"
                          Value="True" />

                                <!-- Don't disable resizing if ColumnStretching can be disabled by an 
                    end-user resize. -->
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).RemoveColumnStretchingOnResize}"
                          Value="False" />
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="PART_ColumnResizerThumb"
                    Property="IsEnabled"
                    Value="False" />
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowColumnResize}"
                      Value="False">
                            <Setter TargetName="PART_ColumnResizerThumb"
                    Property="IsEnabled"
                    Value="False" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.Visible}"
                      Value="False">
                            <Setter Property="Visibility"
                    Value="Collapsed" />
                        </DataTrigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

   

    <Style x:Key="ColumnManagerCellNonAutoFilterStyle" TargetType="{x:Type xcdg:ColumnManagerCell}">
        <Setter Property="Foreground" Value="{StaticResource BaseDarkFontColor}"/>
        <Setter Property="FontFamily" Value="{StaticResource BaseNormalFontFamily}"/>
        <Setter Property="FontSize" Value="{StaticResource BaseFontSizeM}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch"/>
        <Setter Property="Padding"
                Value="5,4,5,4"/>
        <Setter Property="VerticalContentAlignment"
                Value="Stretch" />
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate 
                    TargetType="xcdg:ColumnManagerCell">
                    <ControlTemplate.Resources>
                        <Style TargetType="ToggleButton">
                            <Setter Property="Template"
                    Value="{StaticResource filterToggleButton}" />
                        </Style>
                    </ControlTemplate.Resources>
                    <Border BorderThickness="0,2" Background="{StaticResource BaseLightControlBackground}" BorderBrush="{StaticResource  BaseDarkGray}" SnapsToDevicePixels="True">

                        <Border BorderThickness="0,0,1,0" Margin="0,1" BorderBrush="{StaticResource  BaseDarkGray}">

                            <Border x:Name="border"  BorderThickness="1,0,0,0" BorderBrush="{StaticResource  BaseLightGray}"  >

                                <!-- This Grid is used to position the resizer Thumb over the ColumnManagerCell -->
                                <Grid>

                                    <!--<Rectangle Fill="{x:Null}"
                						HorizontalAlignment="Left"
                						VerticalAlignment="Stretch"
                						Width="1"
                						Margin="0,2,0,2" />

                                    <Rectangle Fill="{x:Null}"
                						HorizontalAlignment="Right"
                						VerticalAlignment="Stretch"
                						Width="1"
                						Margin="0,2,0,2" />-->

                                    <DockPanel HorizontalAlignment="Stretch">
                                        <Border x:Name="thumbToggleBackgroundBorder"
                							DockPanel.Dock="Right">

                                            <Grid>

                                                <Border x:Name="toggleDelimeterBorder"
                									BorderBrush="#FF5D7D9C"
                									BorderThickness="1,0,0,0"
                									Margin="0"
                									Background="Transparent"
                									Visibility="Hidden" Opacity="1">

                                                    <Border x:Name="toggleDelimeterBorder2"
                										BorderBrush="#66FFFFFF"
                										BorderThickness="1,0,0,0"
                										Margin="0"
                										Background="Transparent"
                										Visibility="Visible"/>

                                                </Border>

                                                <ToggleButton x:Name="toggleButton"
                									Focusable="False"
                									VerticalAlignment="Stretch"
                									Visibility="Collapsed"
                									Margin="2,0,0,0"
                									Opacity="1" Background="{x:Null}" />


                                                <xcdg:AutoFilterPopup x:Name="filterOptions"
                									PopupAnimation="Slide"
                									IsOpen="{Binding IsChecked, ElementName=toggleButton, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                									StaysOpen="False"
                									AllowsTransparency="True"
                									PlacementTarget="{Binding ElementName=toggleButton}">

                                                    <xcdg:AutoFilterControl x:Name="autoFilterControl"
                										Background="{StaticResource BaseLightBackground}"
                										BorderBrush="{StaticResource BaseLightBorder}"
                										BorderThickness="1"
                										AutoFilterColumn="{Binding ParentColumn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type xcdg:ColumnManagerCell}}}"
                                                        Style="{Binding RelativeSource={RelativeSource self}, Path=(xcdg:Cell.ParentCell).ParentColumn.AutoFilterControlStyle}"                    
                										TextElement.Foreground="{TemplateBinding TextElement.Foreground}"  Width="330" />
                                                </xcdg:AutoFilterPopup>

                                                <!-- Thumb that is used to resize the Column. -->
                                                <Thumb x:Name="PART_ColumnResizerThumb"
                									Style="{StaticResource invisibleThumbStyle}"
                									Width="4"
                									HorizontalAlignment="Right" Background="#FF9AC6FF" Margin="0,0,-4,0" />
                                            </Grid>
                                        </Border>
                                        <Border Padding="{TemplateBinding Padding}" UseLayoutRounding="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                            <!-- This StackPanel is used to layout the ContentPresenter and the Sort Glyph (when present). -->
                                            <StackPanel x:Name="contentPanel"
                                        		Orientation="Horizontal">

                                                <!-- Same ContentPresenter as in the base Cell Template. -->
                                                <xcdg:CellContentPresenter TextBlock.TextAlignment="Center" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        			VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                    <xcdg:CellContentPresenter.ToolTip>
                                                        <ToolTip Style="{StaticResource tooltipStyle}" Content="{Binding}"></ToolTip>
                                                    </xcdg:CellContentPresenter.ToolTip>
                                                </xcdg:CellContentPresenter>

                                                <!-- ContentPresenter that is used to display the sort glyph.
                          We explicitly set its Content property to Null to prevent the XAML parser
                          from implicitly setting it to its TemplatedParent's Content. -->
                                                <ContentPresenter x:Name="sortGlyphPresenter"
                                        			Content="{x:Null}"
                                        			ContentTemplate="{x:Null}" />
                                            </StackPanel>
                                        </Border>
                                    </DockPanel>
                                </Grid>
                            </Border>
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Trigger related to the filteringToggleButton-->



                        <Trigger SourceName="toggleButton"
                  Property="IsMouseOver"
                  Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource BaseDarkGray}"/>
                            <Setter Property="Foreground" Value="{StaticResource BaseMoreDarkBlue}"/>
                            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />
                        </Trigger>

                        <Trigger Property="IsBeingDragged"
                  Value="True">

                            <!--<Setter TargetName="borderToggleBackground"
                    Property="Margin"
                    Value="0,0,1,0" />-->

                        </Trigger>

                        <!-- Always visible if filterOptions popup IsOpen -->
                        <Trigger SourceName="filterOptions"
                  Property="IsOpen"
                  Value="True">

                            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

                            <Setter TargetName="toggleDelimeterBorder"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleDelimeterBorder2"
                    Property="Visibility"
                    Value="Visible" />
                        </Trigger>

                        <!-- Display FilterToggleButton Trigger on MouseOver -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True" />

                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True" />

                                <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />

                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleDelimeterBorder"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleDelimeterBorder2"
                    Property="Visibility"
                    Value="Visible" />

                        </MultiDataTrigger>

                        <!-- Display FilterToggleButton Trigger to display AutoFilterGlyph -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True" />

                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

                                <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />

                                <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}" />

                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

                            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleDelimeterBorder"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleDelimeterBorder2"
                    Property="Visibility"
                    Value="Visible" />

                        </MultiDataTrigger>

                        <Trigger Property="IsPressed"
                  Value="True">

                            <Setter TargetName="contentPanel"
                    Property="Margin"
                    Value="1,1,-1,-1" />

                        </Trigger>


                        <!-- The following 2 triggers allow the appropriate Sort Glyph to be displayed
              depending on the ParentColumn's SortDirection. -->

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Ascending">

                            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).AscendingSortGlyph}" />

                            <Setter TargetName="sortGlyphPresenter"
                    Property="Margin"
                    Value="6,0,0,0" />

                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Descending">

                            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).DescendingSortGlyph}" />

                            <Setter TargetName="sortGlyphPresenter"
                    Property="Margin"
                    Value="6,0,0,0" />

                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.HasFixedWidth}"
                          Value="True" />

                                <!-- Don't disable resizing if ColumnStretching can be disabled by an 
                    end-user resize. -->
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).RemoveColumnStretchingOnResize}"
                          Value="False" />
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="PART_ColumnResizerThumb"
                    Property="IsEnabled"
                    Value="False" />
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowColumnResize}"
                      Value="False">
                            <Setter TargetName="PART_ColumnResizerThumb"
                    Property="IsEnabled"
                    Value="False" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.Visible}"
                      Value="False">
                            <Setter Property="Visibility"
                    Value="Collapsed" />
                        </DataTrigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ColumnManagerCellLightStyle" TargetType="{x:Type xcdg:ColumnManagerCell}">
        <Setter Property="FontFamily" Value="{StaticResource BaseNormalFontFamily}"/>
        <Setter Property="FontSize" Value="{StaticResource BaseFontSizeM}"/>
        <Setter Property="Foreground" Value="{StaticResource SelectionFontColor}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch"/>
        <Setter Property="Padding"
                Value="5,4,5,4"/>
        <Setter Property="VerticalContentAlignment"
                Value="Stretch" />
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate 
                    TargetType="xcdg:ColumnManagerCell">
                    <ControlTemplate.Resources>
                        <Style TargetType="ToggleButton">
                            <Setter Property="Template"
                    Value="{StaticResource filterToggleButton}" />
                        </Style>
                    </ControlTemplate.Resources>

                 
                        <Border BorderThickness="1" Margin="2,0,2,2" BorderBrush="{StaticResource   BaseDarkGray}">

                            <Border x:Name="border"  BorderThickness="0,0,0,0" BorderBrush="{StaticResource IconBlue}">


                                <!-- This Grid is used to position the resizer Thumb over the ColumnManagerCell -->
                                <Grid>

                                    <!--<Rectangle Fill="{x:Null}"
                						HorizontalAlignment="Left"
                						VerticalAlignment="Stretch"
                						Width="1"
                						Margin="0,2,0,2" />

                                    <Rectangle Fill="{x:Null}"
                						HorizontalAlignment="Right"
                						VerticalAlignment="Stretch"
                						Width="1"
                						Margin="0,2,0,2" />-->

                                    <DockPanel HorizontalAlignment="Stretch">
                                        <Border x:Name="thumbToggleBackgroundBorder"
                							DockPanel.Dock="Right">

                                            <Grid>

                                                <Border x:Name="toggleDelimeterBorder"
                									BorderBrush="#FF5D7D9C"
                									BorderThickness="1,0,0,0"
                									Margin="0"
                									Background="Transparent"
                									Visibility="Hidden" Opacity="1">

                                                    <Border x:Name="toggleDelimeterBorder2"
                										BorderBrush="#66FFFFFF"
                										BorderThickness="1,0,0,0"
                										Margin="0"
                										Background="Transparent"
                										Visibility="Visible"/>

                                                </Border>

                                                <ToggleButton x:Name="toggleButton"
                									Focusable="False"
                									VerticalAlignment="Stretch"
                									Visibility="Collapsed"
                									Margin="2,0,0,0"
                									Opacity="1" Background="{x:Null}" />

                                                <xcdg:AutoFilterPopup x:Name="filterOptions"
                									PopupAnimation="Slide"
                									IsOpen="{Binding IsChecked, ElementName=toggleButton, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                									StaysOpen="False"
                									AllowsTransparency="True"
                									PlacementTarget="{Binding ElementName=toggleButton}">

                                                    <xcdg:AutoFilterControl x:Name="autoFilterControl"
                										Style="{StaticResource AutoFilterControlStyle}"
                										Background="Transparent"
                										BorderBrush="{StaticResource BaseLightBorder}"
                										BorderThickness="1"
                										AutoFilterColumn="{Binding ParentColumn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type xcdg:ColumnManagerCell}}}"
                										TextElement.Foreground="{TemplateBinding TextElement.Foreground}"  Width="330" />
                                                </xcdg:AutoFilterPopup>

                                                <!-- Thumb that is used to resize the Column. -->
                                                <Thumb x:Name="PART_ColumnResizerThumb"
                									Style="{StaticResource invisibleThumbStyle}"
                									Width="6"
                									HorizontalAlignment="Right" Background="#FF9AC6FF" Margin="0,0,-4,0" />
                                            </Grid>
                                        </Border>
                                        <Border Padding="{TemplateBinding Padding}" UseLayoutRounding="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                            <!-- This StackPanel is used to layout the ContentPresenter and the Sort Glyph (when present). -->
                                            <StackPanel x:Name="contentPanel"
                                        		Orientation="Horizontal">

                                                <!-- Same ContentPresenter as in the base Cell Template. -->
                                                <xcdg:CellContentPresenter TextBlock.TextAlignment="Center"  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        			VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                    <xcdg:CellContentPresenter.ToolTip>
                                                        <ToolTip Style="{StaticResource tooltipStyle}" Content="{Binding}"></ToolTip>
                                                    </xcdg:CellContentPresenter.ToolTip>
                                                </xcdg:CellContentPresenter>

                                                <!-- ContentPresenter that is used to display the sort glyph.
                          We explicitly set its Content property to Null to prevent the XAML parser
                          from implicitly setting it to its TemplatedParent's Content. -->
                                                <ContentPresenter x:Name="sortGlyphPresenter"
                                        			Content="{x:Null}"
                                        			ContentTemplate="{x:Null}" />
                                            </StackPanel>
                                        </Border>
                                    </DockPanel>
                                </Grid>
                            </Border>
                        </Border>
               

                    <ControlTemplate.Triggers>
                        <!-- Trigger related to the filteringToggleButton-->



                        <Trigger SourceName="toggleButton"
                  Property="IsMouseOver"
                  Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource BaseDarkGray}"/>
                            <Setter Property="Foreground" Value="{StaticResource BaseMoreDarkBlue}"/>
                            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />
                        </Trigger>

                        <Trigger Property="IsBeingDragged"
                  Value="True">

                            <!--<Setter TargetName="borderToggleBackground"
                    Property="Margin"
                    Value="0,0,1,0" />-->

                        </Trigger>

                        <!-- Always visible if filterOptions popup IsOpen -->
                        <Trigger SourceName="filterOptions"
                  Property="IsOpen"
                  Value="True">

                            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

                            <Setter TargetName="toggleDelimeterBorder"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleDelimeterBorder2"
                    Property="Visibility"
                    Value="Visible" />
                        </Trigger>

                        <!-- Display FilterToggleButton Trigger on MouseOver -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True" />

                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True" />

                                <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />

                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleDelimeterBorder"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleDelimeterBorder2"
                    Property="Visibility"
                    Value="Visible" />

                        </MultiDataTrigger>

                        <!-- Display FilterToggleButton Trigger to display AutoFilterGlyph -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True" />

                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

                                <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />

                                <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}" />

                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

                            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleDelimeterBorder"
                    Property="Visibility"
                    Value="Visible" />

                            <Setter TargetName="toggleDelimeterBorder2"
                    Property="Visibility"
                    Value="Visible" />

                        </MultiDataTrigger>

                        <Trigger Property="IsPressed"
                  Value="True">

                            <Setter TargetName="contentPanel"
                    Property="Margin"
                    Value="1,1,-1,-1" />

                        </Trigger>


                        <!-- The following 2 triggers allow the appropriate Sort Glyph to be displayed
              depending on the ParentColumn's SortDirection. -->

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Ascending">

                            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).AscendingSortGlyph}" />

                            <Setter TargetName="sortGlyphPresenter"
                    Property="Margin"
                    Value="6,0,0,0" />

                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Descending">

                            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).DescendingSortGlyph}" />

                            <Setter TargetName="sortGlyphPresenter"
                    Property="Margin"
                    Value="6,0,0,0" />

                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.HasFixedWidth}"
                          Value="True" />

                                <!-- Don't disable resizing if ColumnStretching can be disabled by an 
                    end-user resize. -->
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).RemoveColumnStretchingOnResize}"
                          Value="False" />
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="PART_ColumnResizerThumb"
                    Property="IsEnabled"
                    Value="False" />
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowColumnResize}"
                      Value="False">
                            <Setter TargetName="PART_ColumnResizerThumb"
                    Property="IsEnabled"
                    Value="False" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.Visible}"
                      Value="False">
                            <Setter Property="Visibility"
                    Value="Collapsed" />
                        </DataTrigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>





















    <!--ColumnManagerCell-->

   

    <Style TargetType="{x:Type xcdg:StatCell}">
        <Setter Property="Background" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="BorderThickness" Value="0.5,1,1,0.5"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
    </Style>

    <Style TargetType="{x:Type xcdg:NumericTextBox}">
        <Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenu}" />
        <Setter Property="FontFamily" Value="{StaticResource BaseNormalFontFamily}"/>
        <Setter Property="FontSize" Value="{StaticResource BaseFontSizeM}"/>
        <Setter Property="Foreground" Value="{StaticResource BaseDarkFontColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BaseLightBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True" BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource BaseLightBackground}">
                        <ScrollViewer Style="{StaticResource SimpleScrollViewer}" x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TextWrapping"  Value="NoWrap">
                            <Setter Property="VerticalAlignment" TargetName="PART_ContentHost" Value="Center"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="Bd" Value="0.6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--<Style TargetType="{x:Type xcdg:InsertionRow}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xcdg:InsertionRow}">
                    <Expander Header="Добавить новую строку">
                        <Border BorderBrush="#CC3780B5" 
                      BorderThickness="1, 1, 1, 1">
                            <xcdg:FixedCellPanel x:Name="PART_CellsHost" 
                  FixedCellCount="{xcdg:ViewBinding FixedColumnCount, Mode=TwoWay}" 
                  SplitterStyle="{TemplateBinding xcdg:TableView.FixedColumnSplitterStyle}" 
                  SplitterWidth="{xcdg:ViewBinding FixedColumnSplitterWidth}" 
                  ShowSplitter="{xcdg:ViewBinding ShowFixedColumnSplitter}" 
                  FixedColumnDropMarkPen="{xcdg:ViewBinding FixedColumnDropMarkPen}" 
                  Background="{x:Null}"/>
                        </Border>
                    </Expander>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="PART_CellsHost" Value="{StaticResource BaseLightBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>-->

    <DataTemplate x:Key="ColumnManagerRowHeaders">
        <xcdg:ColumnManagerRow x:Name="cmr"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ElementName=cmr, Path=(xcdg:DataGridControl.DataGridContext).Items.Count}" Value="0">
                <Setter TargetName="cmr" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style TargetType="{x:Type xcdg:MaskedTextBox}">
        <Setter Property="FontFamily" Value="{StaticResource BaseNormalFontFamily}"/>
        <Setter Property="FontSize" Value="{StaticResource BaseFontSizeM}"/>
        <Setter Property="Foreground" Value="{StaticResource BaseDarkFontColor}"/>
        <Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenu}" />
        <Setter Property="Padding" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xcdg:MaskedTextBox}">
                    <Border Background="{StaticResource BaseLightBackground}" SnapsToDevicePixels="True" CornerRadius="0" BorderThickness="1,1,1,1" BorderBrush="{StaticResource BaseLightBorder}">
                        <ScrollViewer x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TextWrapping"  Value="NoWrap">
                            <Setter Property="VerticalAlignment" TargetName="PART_ContentHost" Value="Center"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style TargetType="{x:Type xcdg:TableflowView}">
        <Setter Property="ShowFixedColumnSplitter"
              Value="True" />
        <Setter Property="ExpandGroupGlyph"
              Value="{StaticResource expandGroupGlyph}" />
        <Setter Property="CollapseGroupGlyph"
              Value="{StaticResource collapseGroupGlyph}" />
        <Setter Property="GroupLevelIndicatorWidth" Value="10" />
        <Setter Property="DetailIndicatorWidth" Value="20" />
        <Setter Property="InsertionRowGlyph"
             Value="{StaticResource insertionRowGlyph}" />
        <Setter Property="xcdg:TableView.FixedColumnSplitterStyle"
             Value="{StaticResource basicSplitter_style}" />
        <Setter Property="AllowColumnChooser" Value="False"/>
        <Setter Property="IsAlternatingRowStyleEnabled"
               Value="False" />
        <Setter Property="VerticalGridLineThickness"
               Value="1" />
        <Setter Property="HorizontalGridLineThickness"
               Value="0" />
        <Setter Property="HorizontalGridLineBrush"
               Value="{StaticResource BaseDarkGray}" />
        <Setter Property="VerticalGridLineBrush"
               Value="{StaticResource BaseDarkGray}" />
        <Setter Property="ContainerHeight"
               Value="28" />
        <Setter Property="AreParentRowsSticky"
               Value="True" />
      
    </Style>

    <Style x:Key="MaxContainerHeight" BasedOn="{StaticResource {x:Type xcdg:TableflowView}}" TargetType="{x:Type xcdg:TableflowView}">
        <Setter Property="ContainerHeight" Value="27" />
    </Style>

    <ControlTemplate x:Key="tableflowViewGroupNavigationControlTemplate"
                    TargetType="{x:Type xcdg:GroupNavigationControl}">

        <Grid>

            <Border x:Name="outlineBorder"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 CornerRadius="0">
                <Border x:Name="innerBorder"
                    BorderThickness="1,1,1,1"
                    CornerRadius="0" BorderBrush="#00606C8D">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <!-- Button part -->
                            <ColumnDefinition Width="*" />

                            <!-- Seperator part -->
                            <ColumnDefinition Width="Auto" />

                            <!-- Toggle button part -->
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Button x:Name="PART_Button"
                          Command="xcdg:GroupNavigationButton.NavigateToGroup"
                          CommandParameter="{TemplateBinding Group}"
                          Content="{TemplateBinding Group}"
                          ContentTemplate="{TemplateBinding MainItemTemplate}"
                          ContentTemplateSelector="{TemplateBinding MainItemTemplateSelector}"
                          Foreground="{TemplateBinding Foreground}"
                          Focusable="False"
                          Grid.Column="0">
                            <Button.Template>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Border Background="Transparent">
                                        <ContentPresenter Margin="4,2,4,2" />
                                    </Border>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>

                        <Border x:Name="seperator"
                          Grid.Column="1"
                          BorderThickness="0,0,1,0" BorderBrush="#00606C8D" Margin="0,4"/>

                        <ToggleButton x:Name="PART_ToggleButton"
                                Focusable="False"
                                IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                Grid.Column="2">
                            <ToggleButton.Template>
                                <ControlTemplate>
                                    <Border x:Name="toggleButtonBackground"
                                   CornerRadius="0,2,2,0"
                                   Background="Transparent">
                                        <Path x:Name="Arrow"
                                    Fill="#7F000000"
                                    Margin="7,1,7,1"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="M 0 0 L 4 4 L 0 8 Z" />
                                    </Border>

                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Fill" TargetName="Arrow" Value="Black"/>
                                        </Trigger>
                                        <Trigger Property="ToggleButton.IsChecked"
                        			Value="True">
                                            <Setter TargetName="Arrow"
                        				Property="Margin"
                        				Value="5,1,5,1" />
                                            <Setter TargetName="Arrow"
                        				Property="Data"
                        				Value="M 0 0 L 4 4 L 8 0 Z" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                    </Grid>
                </Border>
            </Border>

            <Popup x:Name="PART_Popup"
                Placement="Bottom"
                IsOpen="{TemplateBinding IsDropDownOpen}"
                AllowsTransparency="True"
                Focusable="False"
                PopupAnimation="Slide">
                <Grid SnapsToDevicePixels="True"
                  MinWidth="{TemplateBinding ActualWidth}"
                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <Border CornerRadius="0"
                       BorderThickness="1"
                       BorderBrush="{StaticResource BaseLightBorder}"
                       TextElement.Foreground="#FF000000"
                       Background="{StaticResource BaseLightBackground}">
                        <Border BorderThickness="0"
                          CornerRadius="5"
                          BorderBrush="#00000000">

                            <ScrollViewer Style="{StaticResource SimpleScrollViewer}" CanContentScroll="True"
                                   HorizontalScrollBarVisibility="Disabled"
                                   VerticalScrollBarVisibility="Auto"
                                   Margin="4">
                                <!--<ItemsPresenter />-->
                                <VirtualizingStackPanel IsItemsHost="True"
                                                Margin="0,0,4,0" />
                            </ScrollViewer>
                        </Border>
                    </Border>
                </Grid>
            </Popup>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver"
                  Value="True">
                <Setter TargetName="innerBorder"
                    Property="BorderBrush" Value="Transparent">
                </Setter>
                <Setter Property="BorderBrush" TargetName="seperator" Value="#FF5D7D9C"/>
            </Trigger>

            <Trigger Property="IsDropDownOpen"
                  Value="True">
                <Setter TargetName="seperator"
                    Property="Visibility"
                    Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="xcdg:GroupNavigationControl">

        <Setter Property="Template"
              Value="{StaticResource tableflowViewGroupNavigationControlTemplate}" />
    </Style>
    <Style 
          TargetType="{x:Type xcdg:GroupNavigationControlItem}">

        <Setter Property="Background"
              Value="Transparent" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xcdg:GroupNavigationControlItem}">
                    <Grid SnapsToDevicePixels="true">
                        <Border x:Name="Border"
                          Background="{StaticResource BaseDarkGray}" Visibility="Collapsed"/>
                        <Border Margin="2">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                           Value="true">

                            <Setter Property="Foreground"
                             Value="Black" />
                            <Setter Property="Visibility" TargetName="Border" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsEnabled"
                           Value="false">
                            <Setter Property="Foreground"
                             Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="GroupByItemControlTemplate" TargetType="{x:Type xcdg:GroupByItem}">
        <Border x:Name="outerBorder" BorderBrush="{StaticResource BaseLightBackground}" BorderThickness="1" Background="#FF3B6387" Padding="0" >
    		<Border x:Name="innerBorder" BorderBrush="{StaticResource BaseLightBackground}" Background="{StaticResource BaseLightGray}" BorderThickness="1" Margin="0" Padding="4,2,4,2">
    			
    			<StackPanel x:Name="contentPanel" Orientation="Horizontal" VerticalAlignment="Center">
                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" TextBlock.Foreground="{StaticResource SelectionFontColor}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
    				<ContentPresenter x:Name="sortGlyphPresenter" ContentTemplate="{Binding (xcdg:DataGridControl.DataGridContext).AscendingSortGlyph, RelativeSource={RelativeSource Self}}" Content="{x:Null}" Margin="6,0,0,0" Visibility="Hidden"/>
    			</StackPanel>
    		</Border>
    	</Border>
    	<ControlTemplate.Triggers>
    		<EventTrigger RoutedEvent="FrameworkElement.Loaded"/>
    		<Trigger Property="IsBeingDragged" Value="False">
    			<Setter Property="BorderBrush" TargetName="innerBorder" Value="#CC587E96"/>
    			<Setter Property="BorderBrush" TargetName="outerBorder" Value="White"/>
    		</Trigger>
    		<Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="innerBorder" Value="{StaticResource BaseDarkGray}"/>
            </Trigger>
    		<Trigger Property="IsBeingDragged" Value="False"/>
    		<Trigger Property="IsPressed" Value="True">
    			<Setter Property="BorderBrush" TargetName="outerBorder" Value="#CC587E96"/>
    			<Setter Property="BorderBrush" TargetName="innerBorder" Value="White"/>
    		</Trigger>
    		<DataTrigger Binding="{Binding SortDirection, RelativeSource={RelativeSource Self}}" Value="Ascending">
    			<Setter Property="ContentTemplate" TargetName="sortGlyphPresenter" Value="{Binding (xcdg:DataGridControl.DataGridContext).AscendingSortGlyph, RelativeSource={RelativeSource Self}}"/>
    			<Setter Property="Visibility" TargetName="sortGlyphPresenter" Value="Visible"/>
    		</DataTrigger>
    		<DataTrigger Binding="{Binding SortDirection, RelativeSource={RelativeSource Self}}" Value="Descending">
    			<Setter Property="ContentTemplate" TargetName="sortGlyphPresenter" Value="{Binding (xcdg:DataGridControl.DataGridContext).DescendingSortGlyph, RelativeSource={RelativeSource Self}}"/>
    			<Setter Property="Visibility" TargetName="sortGlyphPresenter" Value="Visible"/>
    		</DataTrigger>
    	</ControlTemplate.Triggers>
    </ControlTemplate>
	

	<!--**************************
    * TEMPLATE: HierarchicalGroupByControlNode
    ************************** -->

   <ControlTemplate x:Key="tableflowViewWindows7HierarchicalGroupByControlNodeTemplate"
                    TargetType="xcdg:HierarchicalGroupByControlNode">
      <StackPanel Orientation="Horizontal"
                  Background="{TemplateBinding Background}">
         <Grid>
                <Border Background="{StaticResource BaseLightControlBackground}"  x:Name="innerBorder"
                    CornerRadius="0" />
            <TextBlock x:Name="titleTextBlock"
                       Text="{TemplateBinding Title}"
                       Margin="4,2,4,4"
                       Foreground="Black"
					   
                       VerticalAlignment="Center" />

            <Border x:Name="blackBorder"
                    BorderThickness="1"
                    BorderBrush="{StaticResource BaseLightGray}"
                    CornerRadius="0"/>
             
         </Grid>
         <ItemsPresenter Margin="0,0,0,0" />
      </StackPanel>

	  <ControlTemplate.Triggers>
    		<EventTrigger RoutedEvent="FrameworkElement.Loaded"/>
    		
    		<Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="innerBorder" Value="{StaticResource BaseLightGray}"/>
    		</Trigger>
	
    </ControlTemplate.Triggers>
   </ControlTemplate>

   <!--**************************
    * STYLE: HierarchicalGroupByControlNode
    ************************** -->

	<Style  TargetType="{x:Type xcdg:HierarchicalGroupByControlNode}">
        <Setter Property="BorderBrush" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="Background" Value="{StaticResource BaseDarkGray}"/>
        <Setter Property="StairHeight"
              Value="0" />
      <Setter Property="ConnectionLineOffset"
              Value="0" />
      <Setter Property="Focusable"
              Value="False" />
      <Setter Property="ConnectionLineAlignment"
              Value="CenterToCenter" />
      <Setter Property="Margin"
              Value="2" />
      <Setter Property="Template" Value="{StaticResource tableflowViewWindows7HierarchicalGroupByControlNodeTemplate}"/>
     </Style>




		<Style  TargetType="{x:Type xcdg:HierarchicalGroupByItem}">
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type xcdg:HierarchicalGroupByItem}">
        				<Grid>
                        <Border x:Name="outerBorder" BorderBrush="{StaticResource BaseLightGray}"  Background="{StaticResource BaseLightGray}" BorderThickness="1" >
                            <Border x:Name="innerBorder" Margin="0" Padding="4,0,4,1">
                                <StackPanel x:Name="contentPanel" Orientation="Horizontal" VerticalAlignment="Center">
        								<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        								<ContentPresenter x:Name="sortGlyphPresenter" ContentTemplate="{Binding (xcdg:DataGridControl.DataGridContext).AscendingSortGlyph, RelativeSource={RelativeSource Self}}" Content="{x:Null}" Margin="6,0,0,0" Visibility="Hidden"/>
        							</StackPanel>
        						</Border>
        					</Border>
        				</Grid>
        				<ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                        </Trigger>
							<Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource BaseLightControlBackground}" TargetName="outerBorder"/>
                            <Setter Property="BorderBrush" Value="{StaticResource BaseLightControlBackground}" TargetName="outerBorder"/>

                        </Trigger>
        					<DataTrigger Binding="{Binding SortDirection, RelativeSource={RelativeSource Self}}" Value="Ascending">
        						<Setter Property="ContentTemplate" TargetName="sortGlyphPresenter" Value="{Binding (xcdg:DataGridControl.DataGridContext).AscendingSortGlyph, RelativeSource={RelativeSource Self}}"/>
        						<Setter Property="Visibility" TargetName="sortGlyphPresenter" Value="Visible"/>
        					</DataTrigger>
        					<DataTrigger Binding="{Binding SortDirection, RelativeSource={RelativeSource Self}}" Value="Descending">
        						<Setter Property="ContentTemplate" TargetName="sortGlyphPresenter" Value="{Binding (xcdg:DataGridControl.DataGridContext).DescendingSortGlyph, RelativeSource={RelativeSource Self}}"/>
        						<Setter Property="Visibility" TargetName="sortGlyphPresenter" Value="Visible"/>
        					</DataTrigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
	 <Style TargetType="{x:Type xcdg:GroupByItem}">
		<Setter Property="Foreground" Value="#ff00396d"/>
		<Setter Property="Template" Value="{StaticResource GroupByItemControlTemplate}"/>
    </Style>
	 <Style TargetType="{x:Type xcdg:ValueRangeTextBox}">
	 	<Setter Property="BorderBrush" Value="#ff9cb1c1"/>
	 	
	 	
	 	<Setter Property="FontSize" Value="12"/>
	 </Style>




    <!--**************************
    * STYLE: MergedColumnManage
    ************************** -->

    <Style TargetType="{x:Type xcdg:MergedColumnManagerRow}">
        <Setter Property="Background" Value="{StaticResource BaseDarkBlue}"/>
        <Setter Property="AllowColumnResize" Value="False"/>
        <Setter Property="AllowColumnReorder" Value="False"/>
        <Setter Property="BorderBrush" Value="{StaticResource BaseDarkBlue}"/>
        <Setter Property="Foreground" Value="{StaticResource BaseLightFontColor}"/>
        <Setter Property="Height" Value="22"/>
    </Style>
    <Style TargetType="{x:Type xcdg:MergedColumnManagerCell}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background"  Value="{StaticResource BaseLightBlue}"/>
                <Setter Property="BorderBrush" Value="{StaticResource BaseLightBlue}"/>
            </Trigger>
        </Style.Triggers>
    </Style>




</ResourceDictionary>